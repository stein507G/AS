   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"queue.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.g_tQueue,"aw",%nobits
  19              		.align	2
  22              	g_tQueue:
  23 0000 00000000 		.space	12
  23      00000000 
  23      00000000 
  24              		.section	.text.init_queue,"ax",%progbits
  25              		.align	2
  26              		.global	init_queue
  27              		.thumb
  28              		.thumb_func
  30              	init_queue:
  31              	.LFB102:
  32              		.file 1 "../src/queue.c"
   1:../src/queue.c **** #include "config.h"
   2:../src/queue.c **** #include "queue.h"
   3:../src/queue.c **** 
   4:../src/queue.c **** #define		MAX_QUEUE		1024
   5:../src/queue.c **** 
   6:../src/queue.c **** typedef struct
   7:../src/queue.c **** {
   8:../src/queue.c **** 	int			Head;
   9:../src/queue.c **** 	int			Tail;
  10:../src/queue.c **** 	char*		pBuffer;
  11:../src/queue.c **** } __attribute__((packed)) QUEUE, *PQUEUE;
  12:../src/queue.c **** 
  13:../src/queue.c **** //-------------------------------------------------------
  14:../src/queue.c **** 
  15:../src/queue.c **** static QUEUE g_tQueue;
  16:../src/queue.c **** 
  17:../src/queue.c **** int init_queue()
  18:../src/queue.c **** {
  33              		.loc 1 18 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 82B0     		sub	sp, sp, #8
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_def_cfa_register 7
  19:../src/queue.c **** 	int ret = 0;
  45              		.loc 1 19 0
  46 0006 0023     		movs	r3, #0
  47 0008 7B60     		str	r3, [r7, #4]
  20:../src/queue.c **** 
  21:../src/queue.c **** 	g_tQueue.Head = 0;
  48              		.loc 1 21 0
  49 000a 0D4B     		ldr	r3, .L3
  50 000c 0022     		movs	r2, #0
  51 000e 1A60     		str	r2, [r3]
  22:../src/queue.c **** 	g_tQueue.Tail = 0;
  52              		.loc 1 22 0
  53 0010 0B4B     		ldr	r3, .L3
  54 0012 0022     		movs	r2, #0
  55 0014 5A60     		str	r2, [r3, #4]
  23:../src/queue.c **** 	g_tQueue.pBuffer = (char *)malloc(MAX_QUEUE);
  56              		.loc 1 23 0
  57 0016 4FF48060 		mov	r0, #1024
  58 001a FFF7FEFF 		bl	malloc
  59 001e 0346     		mov	r3, r0
  60 0020 1A46     		mov	r2, r3
  61 0022 074B     		ldr	r3, .L3
  62 0024 9A60     		str	r2, [r3, #8]
  24:../src/queue.c **** 	memset(g_tQueue.pBuffer, 0, MAX_QUEUE);
  63              		.loc 1 24 0
  64 0026 064B     		ldr	r3, .L3
  65 0028 9B68     		ldr	r3, [r3, #8]
  66 002a 1846     		mov	r0, r3
  67 002c 0021     		movs	r1, #0
  68 002e 4FF48062 		mov	r2, #1024
  69 0032 FFF7FEFF 		bl	memset
  25:../src/queue.c **** 	
  26:../src/queue.c **** 	return ret;
  70              		.loc 1 26 0
  71 0036 7B68     		ldr	r3, [r7, #4]
  27:../src/queue.c **** }
  72              		.loc 1 27 0
  73 0038 1846     		mov	r0, r3
  74 003a 0837     		adds	r7, r7, #8
  75              		.cfi_def_cfa_offset 8
  76 003c BD46     		mov	sp, r7
  77              		.cfi_def_cfa_register 13
  78              		@ sp needed
  79 003e 80BD     		pop	{r7, pc}
  80              	.L4:
  81              		.align	2
  82              	.L3:
  83 0040 00000000 		.word	g_tQueue
  84              		.cfi_endproc
  85              	.LFE102:
  87              		.section	.text.deinit_queue,"ax",%progbits
  88              		.align	2
  89              		.global	deinit_queue
  90              		.thumb
  91              		.thumb_func
  93              	deinit_queue:
  94              	.LFB103:
  28:../src/queue.c **** 
  29:../src/queue.c **** int deinit_queue()
  30:../src/queue.c **** {
  95              		.loc 1 30 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 8
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 82B0     		sub	sp, sp, #8
 104              		.cfi_def_cfa_offset 16
 105 0004 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
  31:../src/queue.c **** 	int ret = 0;
 107              		.loc 1 31 0
 108 0006 0023     		movs	r3, #0
 109 0008 7B60     		str	r3, [r7, #4]
  32:../src/queue.c **** 
  33:../src/queue.c **** 	free(g_tQueue.pBuffer);
 110              		.loc 1 33 0
 111 000a 054B     		ldr	r3, .L7
 112 000c 9B68     		ldr	r3, [r3, #8]
 113 000e 1846     		mov	r0, r3
 114 0010 FFF7FEFF 		bl	free
  34:../src/queue.c **** 
  35:../src/queue.c **** 	return ret;
 115              		.loc 1 35 0
 116 0014 7B68     		ldr	r3, [r7, #4]
  36:../src/queue.c **** }
 117              		.loc 1 36 0
 118 0016 1846     		mov	r0, r3
 119 0018 0837     		adds	r7, r7, #8
 120              		.cfi_def_cfa_offset 8
 121 001a BD46     		mov	sp, r7
 122              		.cfi_def_cfa_register 13
 123              		@ sp needed
 124 001c 80BD     		pop	{r7, pc}
 125              	.L8:
 126 001e 00BF     		.align	2
 127              	.L7:
 128 0020 00000000 		.word	g_tQueue
 129              		.cfi_endproc
 130              	.LFE103:
 132              		.section	.text.clear_queue,"ax",%progbits
 133              		.align	2
 134              		.global	clear_queue
 135              		.thumb
 136              		.thumb_func
 138              	clear_queue:
 139              	.LFB104:
  37:../src/queue.c **** 
  38:../src/queue.c **** void clear_queue()
  39:../src/queue.c **** {
 140              		.loc 1 39 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 1, uses_anonymous_args = 0
 144 0000 80B5     		push	{r7, lr}
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 7, -8
 147              		.cfi_offset 14, -4
 148 0002 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
  40:../src/queue.c **** 	g_tQueue.Head = 0;
 150              		.loc 1 40 0
 151 0004 074B     		ldr	r3, .L10
 152 0006 0022     		movs	r2, #0
 153 0008 1A60     		str	r2, [r3]
  41:../src/queue.c **** 	g_tQueue.Tail = 0;
 154              		.loc 1 41 0
 155 000a 064B     		ldr	r3, .L10
 156 000c 0022     		movs	r2, #0
 157 000e 5A60     		str	r2, [r3, #4]
  42:../src/queue.c **** 
  43:../src/queue.c **** 	memset(g_tQueue.pBuffer, 0, MAX_QUEUE);
 158              		.loc 1 43 0
 159 0010 044B     		ldr	r3, .L10
 160 0012 9B68     		ldr	r3, [r3, #8]
 161 0014 1846     		mov	r0, r3
 162 0016 0021     		movs	r1, #0
 163 0018 4FF48062 		mov	r2, #1024
 164 001c FFF7FEFF 		bl	memset
  44:../src/queue.c **** }
 165              		.loc 1 44 0
 166 0020 80BD     		pop	{r7, pc}
 167              	.L11:
 168 0022 00BF     		.align	2
 169              	.L10:
 170 0024 00000000 		.word	g_tQueue
 171              		.cfi_endproc
 172              	.LFE104:
 174              		.section	.text.get_buffer_size,"ax",%progbits
 175              		.align	2
 176              		.global	get_buffer_size
 177              		.thumb
 178              		.thumb_func
 180              	get_buffer_size:
 181              	.LFB105:
  45:../src/queue.c **** 
  46:../src/queue.c **** 
  47:../src/queue.c **** int get_buffer_size()
  48:../src/queue.c **** {
 182              		.loc 1 48 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 8
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 187 0000 80B4     		push	{r7}
 188              		.cfi_def_cfa_offset 4
 189              		.cfi_offset 7, -4
 190 0002 83B0     		sub	sp, sp, #12
 191              		.cfi_def_cfa_offset 16
 192 0004 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
  49:../src/queue.c **** 	int ret = 0;
 194              		.loc 1 49 0
 195 0006 0023     		movs	r3, #0
 196 0008 7B60     		str	r3, [r7, #4]
  50:../src/queue.c **** 
  51:../src/queue.c **** 	ret = MAX_QUEUE;
 197              		.loc 1 51 0
 198 000a 4FF48063 		mov	r3, #1024
 199 000e 7B60     		str	r3, [r7, #4]
  52:../src/queue.c **** 
  53:../src/queue.c **** 	return ret;
 200              		.loc 1 53 0
 201 0010 7B68     		ldr	r3, [r7, #4]
  54:../src/queue.c **** }
 202              		.loc 1 54 0
 203 0012 1846     		mov	r0, r3
 204 0014 0C37     		adds	r7, r7, #12
 205              		.cfi_def_cfa_offset 4
 206 0016 BD46     		mov	sp, r7
 207              		.cfi_def_cfa_register 13
 208              		@ sp needed
 209 0018 5DF8047B 		ldr	r7, [sp], #4
 210              		.cfi_restore 7
 211              		.cfi_def_cfa_offset 0
 212 001c 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE105:
 216 001e 00BF     		.section	.text.get_data_size,"ax",%progbits
 217              		.align	2
 218              		.global	get_data_size
 219              		.thumb
 220              		.thumb_func
 222              	get_data_size:
 223              	.LFB106:
  55:../src/queue.c **** 
  56:../src/queue.c **** int get_data_size(int pos)
  57:../src/queue.c **** {
 224              		.loc 1 57 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 16
 227              		@ frame_needed = 1, uses_anonymous_args = 0
 228 0000 80B5     		push	{r7, lr}
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 7, -8
 231              		.cfi_offset 14, -4
 232 0002 84B0     		sub	sp, sp, #16
 233              		.cfi_def_cfa_offset 24
 234 0004 00AF     		add	r7, sp, #0
 235              		.cfi_def_cfa_register 7
 236 0006 7860     		str	r0, [r7, #4]
  58:../src/queue.c **** 	int ret = 0;
 237              		.loc 1 58 0
 238 0008 0023     		movs	r3, #0
 239 000a FB60     		str	r3, [r7, #12]
  59:../src/queue.c **** 
  60:../src/queue.c **** 	MSS_UART0_disable_intr();
 240              		.loc 1 60 0
 241 000c FFF7FEFF 		bl	MSS_UART0_disable_intr
  61:../src/queue.c **** 	ret = (pos <= g_tQueue.Tail) ? g_tQueue.Tail - pos : get_buffer_size() + g_tQueue.Tail - pos;
 242              		.loc 1 61 0
 243 0010 0C4B     		ldr	r3, .L18
 244 0012 5A68     		ldr	r2, [r3, #4]
 245 0014 7B68     		ldr	r3, [r7, #4]
 246 0016 9A42     		cmp	r2, r3
 247 0018 04DB     		blt	.L15
 248              		.loc 1 61 0 is_stmt 0 discriminator 1
 249 001a 0A4B     		ldr	r3, .L18
 250 001c 5A68     		ldr	r2, [r3, #4]
 251 001e 7B68     		ldr	r3, [r7, #4]
 252 0020 D31A     		subs	r3, r2, r3
 253 0022 07E0     		b	.L16
 254              	.L15:
 255              		.loc 1 61 0 discriminator 2
 256 0024 FFF7FEFF 		bl	get_buffer_size
 257 0028 0246     		mov	r2, r0
 258 002a 064B     		ldr	r3, .L18
 259 002c 5B68     		ldr	r3, [r3, #4]
 260 002e 1A44     		add	r2, r2, r3
 261 0030 7B68     		ldr	r3, [r7, #4]
 262 0032 D31A     		subs	r3, r2, r3
 263              	.L16:
 264              		.loc 1 61 0 discriminator 4
 265 0034 FB60     		str	r3, [r7, #12]
  62:../src/queue.c **** 	MSS_UART0_enable_intr();
 266              		.loc 1 62 0 is_stmt 1 discriminator 4
 267 0036 FFF7FEFF 		bl	MSS_UART0_enable_intr
  63:../src/queue.c **** 
  64:../src/queue.c **** 	return ret;
 268              		.loc 1 64 0 discriminator 4
 269 003a FB68     		ldr	r3, [r7, #12]
  65:../src/queue.c **** }
 270              		.loc 1 65 0 discriminator 4
 271 003c 1846     		mov	r0, r3
 272 003e 1037     		adds	r7, r7, #16
 273              		.cfi_def_cfa_offset 8
 274 0040 BD46     		mov	sp, r7
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 0042 80BD     		pop	{r7, pc}
 278              	.L19:
 279              		.align	2
 280              	.L18:
 281 0044 00000000 		.word	g_tQueue
 282              		.cfi_endproc
 283              	.LFE106:
 285              		.section	.text.get_free_size,"ax",%progbits
 286              		.align	2
 287              		.global	get_free_size
 288              		.thumb
 289              		.thumb_func
 291              	get_free_size:
 292              	.LFB107:
  66:../src/queue.c **** 
  67:../src/queue.c **** int get_free_size()
  68:../src/queue.c **** {
 293              		.loc 1 68 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 8
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 90B5     		push	{r4, r7, lr}
 298              		.cfi_def_cfa_offset 12
 299              		.cfi_offset 4, -12
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 83B0     		sub	sp, sp, #12
 303              		.cfi_def_cfa_offset 24
 304 0004 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
  69:../src/queue.c **** 	int ret = 0;
 306              		.loc 1 69 0
 307 0006 0023     		movs	r3, #0
 308 0008 7B60     		str	r3, [r7, #4]
  70:../src/queue.c **** 
  71:../src/queue.c **** 	MSS_UART0_disable_intr();
 309              		.loc 1 71 0
 310 000a FFF7FEFF 		bl	MSS_UART0_disable_intr
  72:../src/queue.c **** 	ret = get_buffer_size() - get_available();
 311              		.loc 1 72 0
 312 000e FFF7FEFF 		bl	get_buffer_size
 313 0012 0446     		mov	r4, r0
 314 0014 FFF7FEFF 		bl	get_available
 315 0018 0346     		mov	r3, r0
 316 001a E31A     		subs	r3, r4, r3
 317 001c 7B60     		str	r3, [r7, #4]
  73:../src/queue.c **** 	MSS_UART0_enable_intr();
 318              		.loc 1 73 0
 319 001e FFF7FEFF 		bl	MSS_UART0_enable_intr
  74:../src/queue.c **** 
  75:../src/queue.c **** 	return ret;
 320              		.loc 1 75 0
 321 0022 7B68     		ldr	r3, [r7, #4]
  76:../src/queue.c **** }
 322              		.loc 1 76 0
 323 0024 1846     		mov	r0, r3
 324 0026 0C37     		adds	r7, r7, #12
 325              		.cfi_def_cfa_offset 12
 326 0028 BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 002a 90BD     		pop	{r4, r7, pc}
 330              		.cfi_endproc
 331              	.LFE107:
 333              		.section	.text.get_available,"ax",%progbits
 334              		.align	2
 335              		.global	get_available
 336              		.thumb
 337              		.thumb_func
 339              	get_available:
 340              	.LFB108:
  77:../src/queue.c **** 
  78:../src/queue.c **** int get_available()
  79:../src/queue.c **** {
 341              		.loc 1 79 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 8
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345 0000 80B5     		push	{r7, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 7, -8
 348              		.cfi_offset 14, -4
 349 0002 82B0     		sub	sp, sp, #8
 350              		.cfi_def_cfa_offset 16
 351 0004 00AF     		add	r7, sp, #0
 352              		.cfi_def_cfa_register 7
  80:../src/queue.c **** 	int ret = 0;
 353              		.loc 1 80 0
 354 0006 0023     		movs	r3, #0
 355 0008 7B60     		str	r3, [r7, #4]
  81:../src/queue.c **** 
  82:../src/queue.c **** 	MSS_UART0_disable_intr();
 356              		.loc 1 82 0
 357 000a FFF7FEFF 		bl	MSS_UART0_disable_intr
  83:../src/queue.c **** 	ret = (g_tQueue.Head <= g_tQueue.Tail )? g_tQueue.Tail - g_tQueue.Head : get_buffer_size() + g_tQu
 358              		.loc 1 83 0
 359 000e 0E4B     		ldr	r3, .L26
 360 0010 1A68     		ldr	r2, [r3]
 361 0012 0D4B     		ldr	r3, .L26
 362 0014 5B68     		ldr	r3, [r3, #4]
 363 0016 9A42     		cmp	r2, r3
 364 0018 05DC     		bgt	.L23
 365              		.loc 1 83 0 is_stmt 0 discriminator 1
 366 001a 0B4B     		ldr	r3, .L26
 367 001c 5A68     		ldr	r2, [r3, #4]
 368 001e 0A4B     		ldr	r3, .L26
 369 0020 1B68     		ldr	r3, [r3]
 370 0022 D31A     		subs	r3, r2, r3
 371 0024 08E0     		b	.L24
 372              	.L23:
 373              		.loc 1 83 0 discriminator 2
 374 0026 FFF7FEFF 		bl	get_buffer_size
 375 002a 0246     		mov	r2, r0
 376 002c 064B     		ldr	r3, .L26
 377 002e 5B68     		ldr	r3, [r3, #4]
 378 0030 1A44     		add	r2, r2, r3
 379 0032 054B     		ldr	r3, .L26
 380 0034 1B68     		ldr	r3, [r3]
 381 0036 D31A     		subs	r3, r2, r3
 382              	.L24:
 383              		.loc 1 83 0 discriminator 4
 384 0038 7B60     		str	r3, [r7, #4]
  84:../src/queue.c **** 	MSS_UART0_enable_intr();
 385              		.loc 1 84 0 is_stmt 1 discriminator 4
 386 003a FFF7FEFF 		bl	MSS_UART0_enable_intr
  85:../src/queue.c **** 
  86:../src/queue.c **** 	return ret;
 387              		.loc 1 86 0 discriminator 4
 388 003e 7B68     		ldr	r3, [r7, #4]
  87:../src/queue.c **** }
 389              		.loc 1 87 0 discriminator 4
 390 0040 1846     		mov	r0, r3
 391 0042 0837     		adds	r7, r7, #8
 392              		.cfi_def_cfa_offset 8
 393 0044 BD46     		mov	sp, r7
 394              		.cfi_def_cfa_register 13
 395              		@ sp needed
 396 0046 80BD     		pop	{r7, pc}
 397              	.L27:
 398              		.align	2
 399              	.L26:
 400 0048 00000000 		.word	g_tQueue
 401              		.cfi_endproc
 402              	.LFE108:
 404              		.section	.text.get_head,"ax",%progbits
 405              		.align	2
 406              		.global	get_head
 407              		.thumb
 408              		.thumb_func
 410              	get_head:
 411              	.LFB109:
  88:../src/queue.c **** 
  89:../src/queue.c **** int get_head()
  90:../src/queue.c **** {
 412              		.loc 1 90 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 7, -8
 419              		.cfi_offset 14, -4
 420 0002 82B0     		sub	sp, sp, #8
 421              		.cfi_def_cfa_offset 16
 422 0004 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
  91:../src/queue.c **** 	int ret = 0;
 424              		.loc 1 91 0
 425 0006 0023     		movs	r3, #0
 426 0008 7B60     		str	r3, [r7, #4]
  92:../src/queue.c **** 
  93:../src/queue.c **** 	MSS_UART0_disable_intr();
 427              		.loc 1 93 0
 428 000a FFF7FEFF 		bl	MSS_UART0_disable_intr
  94:../src/queue.c **** 	ret = g_tQueue.Head;
 429              		.loc 1 94 0
 430 000e 054B     		ldr	r3, .L30
 431 0010 1B68     		ldr	r3, [r3]
 432 0012 7B60     		str	r3, [r7, #4]
  95:../src/queue.c **** 	MSS_UART0_enable_intr();
 433              		.loc 1 95 0
 434 0014 FFF7FEFF 		bl	MSS_UART0_enable_intr
  96:../src/queue.c **** 
  97:../src/queue.c **** 	return ret;
 435              		.loc 1 97 0
 436 0018 7B68     		ldr	r3, [r7, #4]
  98:../src/queue.c **** }
 437              		.loc 1 98 0
 438 001a 1846     		mov	r0, r3
 439 001c 0837     		adds	r7, r7, #8
 440              		.cfi_def_cfa_offset 8
 441 001e BD46     		mov	sp, r7
 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 0020 80BD     		pop	{r7, pc}
 445              	.L31:
 446 0022 00BF     		.align	2
 447              	.L30:
 448 0024 00000000 		.word	g_tQueue
 449              		.cfi_endproc
 450              	.LFE109:
 452              		.section	.text.set_head,"ax",%progbits
 453              		.align	2
 454              		.global	set_head
 455              		.thumb
 456              		.thumb_func
 458              	set_head:
 459              	.LFB110:
  99:../src/queue.c **** 
 100:../src/queue.c **** void set_head(int head)
 101:../src/queue.c **** {
 460              		.loc 1 101 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 8
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464 0000 80B5     		push	{r7, lr}
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 7, -8
 467              		.cfi_offset 14, -4
 468 0002 82B0     		sub	sp, sp, #8
 469              		.cfi_def_cfa_offset 16
 470 0004 00AF     		add	r7, sp, #0
 471              		.cfi_def_cfa_register 7
 472 0006 7860     		str	r0, [r7, #4]
 102:../src/queue.c **** 	MSS_UART0_disable_intr();
 473              		.loc 1 102 0
 474 0008 FFF7FEFF 		bl	MSS_UART0_disable_intr
 103:../src/queue.c **** 
 104:../src/queue.c **** 	g_tQueue.Head = head % get_buffer_size();
 475              		.loc 1 104 0
 476 000c FFF7FEFF 		bl	get_buffer_size
 477 0010 0246     		mov	r2, r0
 478 0012 7B68     		ldr	r3, [r7, #4]
 479 0014 93FBF2F1 		sdiv	r1, r3, r2
 480 0018 02FB01F2 		mul	r2, r2, r1
 481 001c 9B1A     		subs	r3, r3, r2
 482 001e 034A     		ldr	r2, .L33
 483 0020 1360     		str	r3, [r2]
 105:../src/queue.c **** 
 106:../src/queue.c **** 	MSS_UART0_enable_intr();
 484              		.loc 1 106 0
 485 0022 FFF7FEFF 		bl	MSS_UART0_enable_intr
 107:../src/queue.c **** 
 108:../src/queue.c **** }
 486              		.loc 1 108 0
 487 0026 0837     		adds	r7, r7, #8
 488              		.cfi_def_cfa_offset 8
 489 0028 BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 002a 80BD     		pop	{r7, pc}
 493              	.L34:
 494              		.align	2
 495              	.L33:
 496 002c 00000000 		.word	g_tQueue
 497              		.cfi_endproc
 498              	.LFE110:
 500              		.section	.text.get_tail,"ax",%progbits
 501              		.align	2
 502              		.global	get_tail
 503              		.thumb
 504              		.thumb_func
 506              	get_tail:
 507              	.LFB111:
 109:../src/queue.c **** 
 110:../src/queue.c **** int get_tail()
 111:../src/queue.c **** {
 508              		.loc 1 111 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 0000 80B5     		push	{r7, lr}
 513              		.cfi_def_cfa_offset 8
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 82B0     		sub	sp, sp, #8
 517              		.cfi_def_cfa_offset 16
 518 0004 00AF     		add	r7, sp, #0
 519              		.cfi_def_cfa_register 7
 112:../src/queue.c **** 	int ret = 0;
 520              		.loc 1 112 0
 521 0006 0023     		movs	r3, #0
 522 0008 7B60     		str	r3, [r7, #4]
 113:../src/queue.c **** 
 114:../src/queue.c **** 	MSS_UART0_disable_intr();
 523              		.loc 1 114 0
 524 000a FFF7FEFF 		bl	MSS_UART0_disable_intr
 115:../src/queue.c **** 	ret = g_tQueue.Tail;
 525              		.loc 1 115 0
 526 000e 054B     		ldr	r3, .L37
 527 0010 5B68     		ldr	r3, [r3, #4]
 528 0012 7B60     		str	r3, [r7, #4]
 116:../src/queue.c **** 	MSS_UART0_enable_intr();
 529              		.loc 1 116 0
 530 0014 FFF7FEFF 		bl	MSS_UART0_enable_intr
 117:../src/queue.c **** 
 118:../src/queue.c **** 	return ret;
 531              		.loc 1 118 0
 532 0018 7B68     		ldr	r3, [r7, #4]
 119:../src/queue.c **** }
 533              		.loc 1 119 0
 534 001a 1846     		mov	r0, r3
 535 001c 0837     		adds	r7, r7, #8
 536              		.cfi_def_cfa_offset 8
 537 001e BD46     		mov	sp, r7
 538              		.cfi_def_cfa_register 13
 539              		@ sp needed
 540 0020 80BD     		pop	{r7, pc}
 541              	.L38:
 542 0022 00BF     		.align	2
 543              	.L37:
 544 0024 00000000 		.word	g_tQueue
 545              		.cfi_endproc
 546              	.LFE111:
 548              		.section	.text.enqueue,"ax",%progbits
 549              		.align	2
 550              		.global	enqueue
 551              		.thumb
 552              		.thumb_func
 554              	enqueue:
 555              	.LFB112:
 120:../src/queue.c **** int enqueue(const char* pBuffer, int offset, int size)
 121:../src/queue.c **** {
 556              		.loc 1 121 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 24
 559              		@ frame_needed = 1, uses_anonymous_args = 0
 560 0000 90B5     		push	{r4, r7, lr}
 561              		.cfi_def_cfa_offset 12
 562              		.cfi_offset 4, -12
 563              		.cfi_offset 7, -8
 564              		.cfi_offset 14, -4
 565 0002 87B0     		sub	sp, sp, #28
 566              		.cfi_def_cfa_offset 40
 567 0004 00AF     		add	r7, sp, #0
 568              		.cfi_def_cfa_register 7
 569 0006 F860     		str	r0, [r7, #12]
 570 0008 B960     		str	r1, [r7, #8]
 571 000a 7A60     		str	r2, [r7, #4]
 122:../src/queue.c **** 	int ret = 0;
 572              		.loc 1 122 0
 573 000c 0023     		movs	r3, #0
 574 000e 7B61     		str	r3, [r7, #20]
 123:../src/queue.c **** 
 124:../src/queue.c **** 	MSS_UART0_disable_intr();
 575              		.loc 1 124 0
 576 0010 FFF7FEFF 		bl	MSS_UART0_disable_intr
 125:../src/queue.c **** 
 126:../src/queue.c **** 	if (g_tQueue.Tail + size >= get_buffer_size()) {
 577              		.loc 1 126 0
 578 0014 324B     		ldr	r3, .L45
 579 0016 5A68     		ldr	r2, [r3, #4]
 580 0018 7B68     		ldr	r3, [r7, #4]
 581 001a D418     		adds	r4, r2, r3
 582 001c FFF7FEFF 		bl	get_buffer_size
 583 0020 0346     		mov	r3, r0
 584 0022 9C42     		cmp	r4, r3
 585 0024 23DB     		blt	.L40
 586              	.LBB2:
 127:../src/queue.c **** 		int copySize = get_buffer_size() - g_tQueue.Tail;
 587              		.loc 1 127 0
 588 0026 FFF7FEFF 		bl	get_buffer_size
 589 002a 0246     		mov	r2, r0
 590 002c 2C4B     		ldr	r3, .L45
 591 002e 5B68     		ldr	r3, [r3, #4]
 592 0030 D31A     		subs	r3, r2, r3
 593 0032 3B61     		str	r3, [r7, #16]
 128:../src/queue.c **** 		memcpy(&g_tQueue.pBuffer[g_tQueue.Tail], &pBuffer[offset], copySize);
 594              		.loc 1 128 0
 595 0034 2A4B     		ldr	r3, .L45
 596 0036 9B68     		ldr	r3, [r3, #8]
 597 0038 294A     		ldr	r2, .L45
 598 003a 5268     		ldr	r2, [r2, #4]
 599 003c 9918     		adds	r1, r3, r2
 600 003e BB68     		ldr	r3, [r7, #8]
 601 0040 FA68     		ldr	r2, [r7, #12]
 602 0042 1A44     		add	r2, r2, r3
 603 0044 3B69     		ldr	r3, [r7, #16]
 604 0046 0846     		mov	r0, r1
 605 0048 1146     		mov	r1, r2
 606 004a 1A46     		mov	r2, r3
 607 004c FFF7FEFF 		bl	memcpy
 129:../src/queue.c **** 		memcpy(g_tQueue.pBuffer, &pBuffer[offset + copySize], size - copySize);
 608              		.loc 1 129 0
 609 0050 234B     		ldr	r3, .L45
 610 0052 9868     		ldr	r0, [r3, #8]
 611 0054 BA68     		ldr	r2, [r7, #8]
 612 0056 3B69     		ldr	r3, [r7, #16]
 613 0058 1344     		add	r3, r3, r2
 614 005a 1A46     		mov	r2, r3
 615 005c FB68     		ldr	r3, [r7, #12]
 616 005e 9918     		adds	r1, r3, r2
 617 0060 7A68     		ldr	r2, [r7, #4]
 618 0062 3B69     		ldr	r3, [r7, #16]
 619 0064 D31A     		subs	r3, r2, r3
 620 0066 1A46     		mov	r2, r3
 621 0068 FFF7FEFF 		bl	memcpy
 622              	.LBE2:
 623 006c 0DE0     		b	.L41
 624              	.L40:
 130:../src/queue.c **** 	}
 131:../src/queue.c **** 	else {
 132:../src/queue.c **** 
 133:../src/queue.c **** 		memcpy(&g_tQueue.pBuffer[g_tQueue.Tail], &pBuffer[offset], size);
 625              		.loc 1 133 0
 626 006e 1C4B     		ldr	r3, .L45
 627 0070 9B68     		ldr	r3, [r3, #8]
 628 0072 1B4A     		ldr	r2, .L45
 629 0074 5268     		ldr	r2, [r2, #4]
 630 0076 9918     		adds	r1, r3, r2
 631 0078 BB68     		ldr	r3, [r7, #8]
 632 007a FA68     		ldr	r2, [r7, #12]
 633 007c 1A44     		add	r2, r2, r3
 634 007e 7B68     		ldr	r3, [r7, #4]
 635 0080 0846     		mov	r0, r1
 636 0082 1146     		mov	r1, r2
 637 0084 1A46     		mov	r2, r3
 638 0086 FFF7FEFF 		bl	memcpy
 639              	.L41:
 134:../src/queue.c **** 	}
 135:../src/queue.c **** 			
 136:../src/queue.c **** 	g_tQueue.Tail = (g_tQueue.Tail + size) % get_buffer_size();
 640              		.loc 1 136 0
 641 008a 154B     		ldr	r3, .L45
 642 008c 5A68     		ldr	r2, [r3, #4]
 643 008e 7B68     		ldr	r3, [r7, #4]
 644 0090 D418     		adds	r4, r2, r3
 645 0092 FFF7FEFF 		bl	get_buffer_size
 646 0096 0346     		mov	r3, r0
 647 0098 94FBF3F2 		sdiv	r2, r4, r3
 648 009c 03FB02F3 		mul	r3, r3, r2
 649 00a0 E31A     		subs	r3, r4, r3
 650 00a2 0F4A     		ldr	r2, .L45
 651 00a4 5360     		str	r3, [r2, #4]
 137:../src/queue.c **** 
 138:../src/queue.c **** 	ret = g_tQueue.Head <= g_tQueue.Tail ? g_tQueue.Tail - g_tQueue.Head : get_buffer_size() + g_tQueu
 652              		.loc 1 138 0
 653 00a6 0E4B     		ldr	r3, .L45
 654 00a8 1A68     		ldr	r2, [r3]
 655 00aa 0D4B     		ldr	r3, .L45
 656 00ac 5B68     		ldr	r3, [r3, #4]
 657 00ae 9A42     		cmp	r2, r3
 658 00b0 05DC     		bgt	.L42
 659              		.loc 1 138 0 is_stmt 0 discriminator 1
 660 00b2 0B4B     		ldr	r3, .L45
 661 00b4 5A68     		ldr	r2, [r3, #4]
 662 00b6 0A4B     		ldr	r3, .L45
 663 00b8 1B68     		ldr	r3, [r3]
 664 00ba D31A     		subs	r3, r2, r3
 665 00bc 08E0     		b	.L43
 666              	.L42:
 667              		.loc 1 138 0 discriminator 2
 668 00be FFF7FEFF 		bl	get_buffer_size
 669 00c2 0246     		mov	r2, r0
 670 00c4 064B     		ldr	r3, .L45
 671 00c6 5B68     		ldr	r3, [r3, #4]
 672 00c8 1A44     		add	r2, r2, r3
 673 00ca 054B     		ldr	r3, .L45
 674 00cc 1B68     		ldr	r3, [r3]
 675 00ce D31A     		subs	r3, r2, r3
 676              	.L43:
 677              		.loc 1 138 0 discriminator 4
 678 00d0 7B61     		str	r3, [r7, #20]
 139:../src/queue.c **** 
 140:../src/queue.c **** 	MSS_UART0_enable_intr();
 679              		.loc 1 140 0 is_stmt 1 discriminator 4
 680 00d2 FFF7FEFF 		bl	MSS_UART0_enable_intr
 141:../src/queue.c **** 
 142:../src/queue.c **** 	return ret;
 681              		.loc 1 142 0 discriminator 4
 682 00d6 7B69     		ldr	r3, [r7, #20]
 143:../src/queue.c **** }
 683              		.loc 1 143 0 discriminator 4
 684 00d8 1846     		mov	r0, r3
 685 00da 1C37     		adds	r7, r7, #28
 686              		.cfi_def_cfa_offset 12
 687 00dc BD46     		mov	sp, r7
 688              		.cfi_def_cfa_register 13
 689              		@ sp needed
 690 00de 90BD     		pop	{r4, r7, pc}
 691              	.L46:
 692              		.align	2
 693              	.L45:
 694 00e0 00000000 		.word	g_tQueue
 695              		.cfi_endproc
 696              	.LFE112:
 698              		.section	.text.dequeue,"ax",%progbits
 699              		.align	2
 700              		.global	dequeue
 701              		.thumb
 702              		.thumb_func
 704              	dequeue:
 705              	.LFB113:
 144:../src/queue.c **** 
 145:../src/queue.c **** int dequeue(char* pBuffer, int offset, int size)
 146:../src/queue.c **** {
 706              		.loc 1 146 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 24
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710 0000 90B5     		push	{r4, r7, lr}
 711              		.cfi_def_cfa_offset 12
 712              		.cfi_offset 4, -12
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 87B0     		sub	sp, sp, #28
 716              		.cfi_def_cfa_offset 40
 717 0004 00AF     		add	r7, sp, #0
 718              		.cfi_def_cfa_register 7
 719 0006 F860     		str	r0, [r7, #12]
 720 0008 B960     		str	r1, [r7, #8]
 721 000a 7A60     		str	r2, [r7, #4]
 147:../src/queue.c **** 	int ret = 0;
 722              		.loc 1 147 0
 723 000c 0023     		movs	r3, #0
 724 000e 7B61     		str	r3, [r7, #20]
 148:../src/queue.c **** 
 149:../src/queue.c **** 	MSS_UART0_disable_intr();
 725              		.loc 1 149 0
 726 0010 FFF7FEFF 		bl	MSS_UART0_disable_intr
 150:../src/queue.c **** 
 151:../src/queue.c **** 	if (g_tQueue.Head == g_tQueue.Tail)
 727              		.loc 1 151 0
 728 0014 2C4B     		ldr	r3, .L52
 729 0016 1A68     		ldr	r2, [r3]
 730 0018 2B4B     		ldr	r3, .L52
 731 001a 5B68     		ldr	r3, [r3, #4]
 732 001c 9A42     		cmp	r2, r3
 733 001e 01D1     		bne	.L48
 152:../src/queue.c **** 		return 0;
 734              		.loc 1 152 0
 735 0020 0023     		movs	r3, #0
 736 0022 4DE0     		b	.L49
 737              	.L48:
 153:../src/queue.c **** 
 154:../src/queue.c **** 	if (g_tQueue.Head + size > get_buffer_size()) {
 738              		.loc 1 154 0
 739 0024 284B     		ldr	r3, .L52
 740 0026 1A68     		ldr	r2, [r3]
 741 0028 7B68     		ldr	r3, [r7, #4]
 742 002a D418     		adds	r4, r2, r3
 743 002c FFF7FEFF 		bl	get_buffer_size
 744 0030 0346     		mov	r3, r0
 745 0032 9C42     		cmp	r4, r3
 746 0034 23DD     		ble	.L50
 747              	.LBB3:
 155:../src/queue.c **** 		int copy = get_buffer_size() - g_tQueue.Head;
 748              		.loc 1 155 0
 749 0036 FFF7FEFF 		bl	get_buffer_size
 750 003a 0246     		mov	r2, r0
 751 003c 224B     		ldr	r3, .L52
 752 003e 1B68     		ldr	r3, [r3]
 753 0040 D31A     		subs	r3, r2, r3
 754 0042 3B61     		str	r3, [r7, #16]
 156:../src/queue.c **** 
 157:../src/queue.c **** 		memcpy(&pBuffer[offset], (const void*)&g_tQueue.pBuffer[g_tQueue.Head], copy);
 755              		.loc 1 157 0
 756 0044 BB68     		ldr	r3, [r7, #8]
 757 0046 FA68     		ldr	r2, [r7, #12]
 758 0048 D118     		adds	r1, r2, r3
 759 004a 1F4B     		ldr	r3, .L52
 760 004c 9B68     		ldr	r3, [r3, #8]
 761 004e 1E4A     		ldr	r2, .L52
 762 0050 1268     		ldr	r2, [r2]
 763 0052 1A44     		add	r2, r2, r3
 764 0054 3B69     		ldr	r3, [r7, #16]
 765 0056 0846     		mov	r0, r1
 766 0058 1146     		mov	r1, r2
 767 005a 1A46     		mov	r2, r3
 768 005c FFF7FEFF 		bl	memcpy
 158:../src/queue.c **** 		memcpy(&pBuffer[offset + copy], (const void*)g_tQueue.pBuffer, size - copy);
 769              		.loc 1 158 0
 770 0060 BA68     		ldr	r2, [r7, #8]
 771 0062 3B69     		ldr	r3, [r7, #16]
 772 0064 1344     		add	r3, r3, r2
 773 0066 1A46     		mov	r2, r3
 774 0068 FB68     		ldr	r3, [r7, #12]
 775 006a 9818     		adds	r0, r3, r2
 776 006c 164B     		ldr	r3, .L52
 777 006e 9968     		ldr	r1, [r3, #8]
 778 0070 7A68     		ldr	r2, [r7, #4]
 779 0072 3B69     		ldr	r3, [r7, #16]
 780 0074 D31A     		subs	r3, r2, r3
 781 0076 1A46     		mov	r2, r3
 782 0078 FFF7FEFF 		bl	memcpy
 783              	.LBE3:
 784 007c 0DE0     		b	.L51
 785              	.L50:
 159:../src/queue.c **** 	}
 160:../src/queue.c **** 	else {
 161:../src/queue.c **** 		memcpy(&pBuffer[offset], (const void*)&g_tQueue.pBuffer[g_tQueue.Head], size);
 786              		.loc 1 161 0
 787 007e BB68     		ldr	r3, [r7, #8]
 788 0080 FA68     		ldr	r2, [r7, #12]
 789 0082 D118     		adds	r1, r2, r3
 790 0084 104B     		ldr	r3, .L52
 791 0086 9B68     		ldr	r3, [r3, #8]
 792 0088 0F4A     		ldr	r2, .L52
 793 008a 1268     		ldr	r2, [r2]
 794 008c 1A44     		add	r2, r2, r3
 795 008e 7B68     		ldr	r3, [r7, #4]
 796 0090 0846     		mov	r0, r1
 797 0092 1146     		mov	r1, r2
 798 0094 1A46     		mov	r2, r3
 799 0096 FFF7FEFF 		bl	memcpy
 800              	.L51:
 162:../src/queue.c **** 	}
 163:../src/queue.c **** 
 164:../src/queue.c **** 	g_tQueue.Head = (g_tQueue.Head + size) % get_buffer_size();
 801              		.loc 1 164 0
 802 009a 0B4B     		ldr	r3, .L52
 803 009c 1A68     		ldr	r2, [r3]
 804 009e 7B68     		ldr	r3, [r7, #4]
 805 00a0 D418     		adds	r4, r2, r3
 806 00a2 FFF7FEFF 		bl	get_buffer_size
 807 00a6 0346     		mov	r3, r0
 808 00a8 94FBF3F2 		sdiv	r2, r4, r3
 809 00ac 03FB02F3 		mul	r3, r3, r2
 810 00b0 E31A     		subs	r3, r4, r3
 811 00b2 054A     		ldr	r2, .L52
 812 00b4 1360     		str	r3, [r2]
 165:../src/queue.c **** 
 166:../src/queue.c **** 	ret = size;
 813              		.loc 1 166 0
 814 00b6 7B68     		ldr	r3, [r7, #4]
 815 00b8 7B61     		str	r3, [r7, #20]
 167:../src/queue.c **** 
 168:../src/queue.c **** 	MSS_UART0_enable_intr();
 816              		.loc 1 168 0
 817 00ba FFF7FEFF 		bl	MSS_UART0_enable_intr
 169:../src/queue.c **** 
 170:../src/queue.c **** 	return ret;
 818              		.loc 1 170 0
 819 00be 7B69     		ldr	r3, [r7, #20]
 820              	.L49:
 171:../src/queue.c **** }
 821              		.loc 1 171 0
 822 00c0 1846     		mov	r0, r3
 823 00c2 1C37     		adds	r7, r7, #28
 824              		.cfi_def_cfa_offset 12
 825 00c4 BD46     		mov	sp, r7
 826              		.cfi_def_cfa_register 13
 827              		@ sp needed
 828 00c6 90BD     		pop	{r4, r7, pc}
 829              	.L53:
 830              		.align	2
 831              	.L52:
 832 00c8 00000000 		.word	g_tQueue
 833              		.cfi_endproc
 834              	.LFE113:
 836              		.section	.text.peek,"ax",%progbits
 837              		.align	2
 838              		.global	peek
 839              		.thumb
 840              		.thumb_func
 842              	peek:
 843              	.LFB114:
 172:../src/queue.c **** 
 173:../src/queue.c **** int peek(char* pBuffer, int offset, int size)
 174:../src/queue.c **** {
 844              		.loc 1 174 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 24
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848 0000 90B5     		push	{r4, r7, lr}
 849              		.cfi_def_cfa_offset 12
 850              		.cfi_offset 4, -12
 851              		.cfi_offset 7, -8
 852              		.cfi_offset 14, -4
 853 0002 87B0     		sub	sp, sp, #28
 854              		.cfi_def_cfa_offset 40
 855 0004 00AF     		add	r7, sp, #0
 856              		.cfi_def_cfa_register 7
 857 0006 F860     		str	r0, [r7, #12]
 858 0008 B960     		str	r1, [r7, #8]
 859 000a 7A60     		str	r2, [r7, #4]
 175:../src/queue.c **** 	int ret = 0;
 860              		.loc 1 175 0
 861 000c 0023     		movs	r3, #0
 862 000e 7B61     		str	r3, [r7, #20]
 176:../src/queue.c **** 
 177:../src/queue.c **** 	MSS_UART0_disable_intr();
 863              		.loc 1 177 0
 864 0010 FFF7FEFF 		bl	MSS_UART0_disable_intr
 178:../src/queue.c **** 
 179:../src/queue.c **** 	if (g_tQueue.Head == g_tQueue.Tail)
 865              		.loc 1 179 0
 866 0014 254B     		ldr	r3, .L59
 867 0016 1A68     		ldr	r2, [r3]
 868 0018 244B     		ldr	r3, .L59
 869 001a 5B68     		ldr	r3, [r3, #4]
 870 001c 9A42     		cmp	r2, r3
 871 001e 01D1     		bne	.L55
 180:../src/queue.c **** 		return 0;
 872              		.loc 1 180 0
 873 0020 0023     		movs	r3, #0
 874 0022 3FE0     		b	.L56
 875              	.L55:
 181:../src/queue.c **** 
 182:../src/queue.c **** 	if (g_tQueue.Head + size > get_buffer_size()) {
 876              		.loc 1 182 0
 877 0024 214B     		ldr	r3, .L59
 878 0026 1A68     		ldr	r2, [r3]
 879 0028 7B68     		ldr	r3, [r7, #4]
 880 002a D418     		adds	r4, r2, r3
 881 002c FFF7FEFF 		bl	get_buffer_size
 882 0030 0346     		mov	r3, r0
 883 0032 9C42     		cmp	r4, r3
 884 0034 23DD     		ble	.L57
 885              	.LBB4:
 183:../src/queue.c **** 		int copy = get_buffer_size() - g_tQueue.Head;
 886              		.loc 1 183 0
 887 0036 FFF7FEFF 		bl	get_buffer_size
 888 003a 0246     		mov	r2, r0
 889 003c 1B4B     		ldr	r3, .L59
 890 003e 1B68     		ldr	r3, [r3]
 891 0040 D31A     		subs	r3, r2, r3
 892 0042 3B61     		str	r3, [r7, #16]
 184:../src/queue.c **** 
 185:../src/queue.c **** 		memcpy(&pBuffer[offset], (const void*)&g_tQueue.pBuffer[g_tQueue.Head], copy);
 893              		.loc 1 185 0
 894 0044 BB68     		ldr	r3, [r7, #8]
 895 0046 FA68     		ldr	r2, [r7, #12]
 896 0048 D118     		adds	r1, r2, r3
 897 004a 184B     		ldr	r3, .L59
 898 004c 9B68     		ldr	r3, [r3, #8]
 899 004e 174A     		ldr	r2, .L59
 900 0050 1268     		ldr	r2, [r2]
 901 0052 1A44     		add	r2, r2, r3
 902 0054 3B69     		ldr	r3, [r7, #16]
 903 0056 0846     		mov	r0, r1
 904 0058 1146     		mov	r1, r2
 905 005a 1A46     		mov	r2, r3
 906 005c FFF7FEFF 		bl	memcpy
 186:../src/queue.c **** 		memcpy(&pBuffer[offset + copy], (const void*)g_tQueue.pBuffer, size - copy);
 907              		.loc 1 186 0
 908 0060 BA68     		ldr	r2, [r7, #8]
 909 0062 3B69     		ldr	r3, [r7, #16]
 910 0064 1344     		add	r3, r3, r2
 911 0066 1A46     		mov	r2, r3
 912 0068 FB68     		ldr	r3, [r7, #12]
 913 006a 9818     		adds	r0, r3, r2
 914 006c 0F4B     		ldr	r3, .L59
 915 006e 9968     		ldr	r1, [r3, #8]
 916 0070 7A68     		ldr	r2, [r7, #4]
 917 0072 3B69     		ldr	r3, [r7, #16]
 918 0074 D31A     		subs	r3, r2, r3
 919 0076 1A46     		mov	r2, r3
 920 0078 FFF7FEFF 		bl	memcpy
 921              	.LBE4:
 922 007c 0DE0     		b	.L58
 923              	.L57:
 187:../src/queue.c **** 	}
 188:../src/queue.c **** 	else {
 189:../src/queue.c **** 		memcpy(&pBuffer[offset], (const void*)&g_tQueue.pBuffer[g_tQueue.Head], size);
 924              		.loc 1 189 0
 925 007e BB68     		ldr	r3, [r7, #8]
 926 0080 FA68     		ldr	r2, [r7, #12]
 927 0082 D118     		adds	r1, r2, r3
 928 0084 094B     		ldr	r3, .L59
 929 0086 9B68     		ldr	r3, [r3, #8]
 930 0088 084A     		ldr	r2, .L59
 931 008a 1268     		ldr	r2, [r2]
 932 008c 1A44     		add	r2, r2, r3
 933 008e 7B68     		ldr	r3, [r7, #4]
 934 0090 0846     		mov	r0, r1
 935 0092 1146     		mov	r1, r2
 936 0094 1A46     		mov	r2, r3
 937 0096 FFF7FEFF 		bl	memcpy
 938              	.L58:
 190:../src/queue.c **** 	}
 191:../src/queue.c **** 
 192:../src/queue.c **** 	ret = size;
 939              		.loc 1 192 0
 940 009a 7B68     		ldr	r3, [r7, #4]
 941 009c 7B61     		str	r3, [r7, #20]
 193:../src/queue.c **** 
 194:../src/queue.c **** 	MSS_UART0_enable_intr();
 942              		.loc 1 194 0
 943 009e FFF7FEFF 		bl	MSS_UART0_enable_intr
 195:../src/queue.c **** 
 196:../src/queue.c **** 	return ret;
 944              		.loc 1 196 0
 945 00a2 7B69     		ldr	r3, [r7, #20]
 946              	.L56:
 197:../src/queue.c **** }
 947              		.loc 1 197 0
 948 00a4 1846     		mov	r0, r3
 949 00a6 1C37     		adds	r7, r7, #28
 950              		.cfi_def_cfa_offset 12
 951 00a8 BD46     		mov	sp, r7
 952              		.cfi_def_cfa_register 13
 953              		@ sp needed
 954 00aa 90BD     		pop	{r4, r7, pc}
 955              	.L60:
 956              		.align	2
 957              	.L59:
 958 00ac 00000000 		.word	g_tQueue
 959              		.cfi_endproc
 960              	.LFE114:
 962              		.text
 963              	.Letext0:
 964              		.file 2 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\arm-none-eabi\\include\\machine\\_def
 965              		.file 3 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\arm-none-eabi\\include\\sys\\_stdint.
 966              		.file 4 "C:\\Microsemi\\SoftConsole_v4.0\\CMSIS\\V4.3\\Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:19     .bss.g_tQueue:00000000 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:22     .bss.g_tQueue:00000000 g_tQueue
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:25     .text.init_queue:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:30     .text.init_queue:00000000 init_queue
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:83     .text.init_queue:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:88     .text.deinit_queue:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:93     .text.deinit_queue:00000000 deinit_queue
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:128    .text.deinit_queue:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:133    .text.clear_queue:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:138    .text.clear_queue:00000000 clear_queue
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:170    .text.clear_queue:00000024 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:175    .text.get_buffer_size:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:180    .text.get_buffer_size:00000000 get_buffer_size
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:217    .text.get_data_size:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:222    .text.get_data_size:00000000 get_data_size
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:281    .text.get_data_size:00000044 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:286    .text.get_free_size:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:291    .text.get_free_size:00000000 get_free_size
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:339    .text.get_available:00000000 get_available
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:334    .text.get_available:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:400    .text.get_available:00000048 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:405    .text.get_head:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:410    .text.get_head:00000000 get_head
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:448    .text.get_head:00000024 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:453    .text.set_head:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:458    .text.set_head:00000000 set_head
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:496    .text.set_head:0000002c $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:501    .text.get_tail:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:506    .text.get_tail:00000000 get_tail
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:544    .text.get_tail:00000024 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:549    .text.enqueue:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:554    .text.enqueue:00000000 enqueue
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:694    .text.enqueue:000000e0 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:699    .text.dequeue:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:704    .text.dequeue:00000000 dequeue
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:832    .text.dequeue:000000c8 $d
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:837    .text.peek:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:842    .text.peek:00000000 peek
C:\Users\jiryu\AppData\Local\Temp\ccE9J251.s:958    .text.peek:000000ac $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.68149608ea1c0d23dbbfc534e19a39c3
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.ctype.h.29.655cb005a4d596b4713c7a42170c401a
                           .group:00000000 wm4.stdarg.h.31.72c3aa8d68b291953fa52b9471bcdff7
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.a14b68a47d722a767cc4688ffe478d81
                           .group:00000000 wm4.stddef.h.39.fb88e218f22ad7a0ab38f3d93c6eb3e4
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.81.ded4e8fbe2d299b79c956dc834e43661
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.a99a2db1e55915cfd1b035cc1e9fcff1
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.limits.h.2.9dea55bedb68394d9750fdf18fad85e9
                           .group:00000000 wm4.limits.h.60.b4bc9eda7e37043243f7148a2c6d0306
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.m2sxxx.h.14.987ea2aeaafde240411e8c56d47721f7
                           .group:00000000 wm4.core_cm3.h.43.614605f47657df9251f3b3f57590a49a
                           .group:00000000 wm4.core_cmInstr.h.39.addda81f1f3453ba31dd54fc5b6fcee8
                           .group:00000000 wm4.core_cm3.h.160.4f087d7d2b17fc46469486aedc40cf5c
                           .group:00000000 wm4.m2sxxx.h.2709.9eef8620912489dbc5c26e98701cdac3
                           .group:00000000 wm4.sys_config_mss_clocks.h.10.c7f4d81ec72bcea6cafb9cc9c2acf4ab
                           .group:00000000 wm4.sys_config.h.25.1448a2ceceaa3c2e8913533fa4e42cee
                           .group:00000000 wm4.mss_uart.h.258.ed2d082f8e6703bd440653ce1fa4b528
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.mss_watchdog.h.135.cd7fdb2556dfc88c684a3bccbcbeffd0
                           .group:00000000 wm4.mss_nvm.h.54.53fe48cb67630dbcda63b96130444f53
                           .group:00000000 wm4.mss_sys_services.h.495.b87512b711a1bf96f4edb360126a223b
                           .group:00000000 wm4.protocol.h.2.6a5796ea80238bc4f9a16400f98bef7e
                           .group:00000000 wm4.storage.h.2.37efc95cfbe2d56f733e692b6f73ffca
                           .group:00000000 wm4.system.h.2.20e7c232f891b8ec2c2a3cc764cb981e
                           .group:00000000 wm4.version.h.2.bf62ea74301f6d323824787edbb86b92

UNDEFINED SYMBOLS
malloc
memset
free
MSS_UART0_disable_intr
MSS_UART0_enable_intr
memcpy
