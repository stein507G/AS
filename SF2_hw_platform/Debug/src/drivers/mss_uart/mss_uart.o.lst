   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mss_uart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB48:
  25              		.file 1 "C:\\Microsemi\\SoftConsole_v4.0\\CMSIS\\V4.3\\Include/core_cm3.h"
   1:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /**************************************************************************//**
   2:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  * @file     core_cm3.h
   3:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  * @version  V4.10
   5:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  * @date     18. March 2015
   6:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  *
   7:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  * @note
   8:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  *
   9:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  ******************************************************************************/
  10:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  12:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    All rights reserved.
  13:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      to endorse or promote products derived from this software without
  22:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      specific prior written permission.
  23:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    *
  24:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  37:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  38:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if defined ( __ICCARM__ )
  39:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
  41:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  42:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  43:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __CORE_CM3_H_GENERIC
  44:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  45:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifdef __cplusplus
  46:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  extern "C" {
  47:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
  48:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  49:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  52:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  55:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      Unions are used for effective representation of core registers.
  57:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  58:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
  61:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  62:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  63:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*******************************************************************************
  64:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  *                 CMSIS definitions
  65:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  ******************************************************************************/
  66:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup Cortex_M3
  67:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
  68:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
  69:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  70:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*  CMSIS CM3 definitions */
  71:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x04)                                   /*!< [31:16] CMSIS HAL m
  72:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  73:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  76:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  78:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  79:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if   defined ( __CC_ARM )
  80:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  84:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __GNUC__ )
  85:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  89:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __ICCARM__ )
  90:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  92:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __STATIC_INLINE  static inline
  93:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  94:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __TMS470__ )
  95:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
  98:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __TASKING__ )
  99:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 103:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __CSMC__ )
 104:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __packed
 105:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define __STATIC_INLINE  static inline
 108:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 109:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 110:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 111:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
 112:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     This core does not support an FPU at all
 113:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** */
 114:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __FPU_USED       0
 115:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 116:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if defined ( __CC_ARM )
 117:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #if defined __TARGET_FPU_VFP
 118:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 119:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 120:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 121:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __GNUC__ )
 122:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 123:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 124:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 125:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 126:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __ICCARM__ )
 127:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #if defined __ARMVFP__
 128:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 129:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 130:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 131:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __TMS470__ )
 132:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 133:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 134:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 135:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 136:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __TASKING__ )
 137:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #if defined __FPU_VFP__
 138:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 140:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 141:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 142:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #if ( __CSMC__ & 0x400)		// FPU present for parser
 143:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 145:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 146:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 147:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 148:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 149:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 150:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 151:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifdef __cplusplus
 152:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
 153:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 154:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 155:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 156:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 157:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifndef __CMSIS_GENERIC
 158:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 159:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 160:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 161:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 162:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifdef __cplusplus
 163:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  extern "C" {
 164:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 165:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 166:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* check device defines and use defaults */
 167:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 168:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #ifndef __CM3_REV
 169:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #define __CM3_REV               0x0200
 170:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 171:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 172:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 173:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #ifndef __MPU_PRESENT
 174:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #define __MPU_PRESENT             0
 175:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 176:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 177:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 178:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 179:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 180:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 181:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 182:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 183:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 184:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #define __Vendor_SysTickConfig    0
 185:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 186:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #endif
 187:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 188:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 189:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 190:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /**
 191:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 192:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 193:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 194:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \li to specify the access to peripheral variables.
 195:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 196:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** */
 197:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #ifdef __cplusplus
 198:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 199:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #else
 200:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 201:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 202:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 203:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 204:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 205:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group Cortex_M3 */
 206:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 207:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 208:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 209:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*******************************************************************************
 210:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  *                 Register Abstraction
 211:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   Core Register contain:
 212:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core Register
 213:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core NVIC Register
 214:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core SCB Register
 215:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core SysTick Register
 216:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core Debug Register
 217:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core MPU Register
 218:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  ******************************************************************************/
 219:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 220:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 221:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** */
 222:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 223:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup    CMSIS_core_register
 224:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 225:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief  Core Register type definitions.
 226:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 227:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 228:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 229:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 230:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 231:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef union
 232:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 233:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   struct
 234:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   {
 235:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 236:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 237:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 238:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 239:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 240:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 241:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 242:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 243:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } APSR_Type;
 244:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 245:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* APSR Register Definitions */
 246:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_N_Pos                         31                                             /*!< APSR
 247:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 248:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 249:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_Z_Pos                         30                                             /*!< APSR
 250:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 251:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 252:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_C_Pos                         29                                             /*!< APSR
 253:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 254:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 255:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_V_Pos                         28                                             /*!< APSR
 256:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 257:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 258:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_Q_Pos                         27                                             /*!< APSR
 259:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 260:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 261:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 262:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 263:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 264:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef union
 265:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 266:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   struct
 267:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   {
 268:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 269:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 270:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 271:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 272:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } IPSR_Type;
 273:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 274:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* IPSR Register Definitions */
 275:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define IPSR_ISR_Pos                        0                                             /*!< IPSR
 276:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 277:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 278:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 279:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 280:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 281:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef union
 282:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 283:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   struct
 284:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   {
 285:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 286:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 287:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 288:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 289:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 290:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 291:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 292:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 293:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 294:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 295:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 296:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } xPSR_Type;
 297:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 298:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* xPSR Register Definitions */
 299:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_N_Pos                         31                                             /*!< xPSR
 300:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 301:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 302:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_Z_Pos                         30                                             /*!< xPSR
 303:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 304:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 305:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_C_Pos                         29                                             /*!< xPSR
 306:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 307:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 308:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_V_Pos                         28                                             /*!< xPSR
 309:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 310:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 311:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_Q_Pos                         27                                             /*!< xPSR
 312:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 313:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 314:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_IT_Pos                        25                                             /*!< xPSR
 315:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 316:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 317:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_T_Pos                         24                                             /*!< xPSR
 318:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 319:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 320:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_ISR_Pos                        0                                             /*!< xPSR
 321:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 322:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 323:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 324:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 325:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 326:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef union
 327:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 328:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   struct
 329:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   {
 330:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 331:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 332:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved                           */
 333:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 334:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 335:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } CONTROL_Type;
 336:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 337:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* CONTROL Register Definitions */
 338:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CONTROL_SPSEL_Pos                   1                                             /*!< CONT
 339:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 340:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 341:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CONTROL_nPRIV_Pos                   0                                             /*!< CONT
 342:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 343:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 344:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_CORE */
 345:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 346:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 347:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup    CMSIS_core_register
 348:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 349:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 350:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 351:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 352:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 353:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 354:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 355:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 356:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 357:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 358:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED0[24];
 359:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 360:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RSERVED1[24];
 361:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 362:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED2[24];
 363:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 364:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED3[24];
 365:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 366:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED4[56];
 367:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 368:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED5[644];
 369:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 370:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }  NVIC_Type;
 371:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 372:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 373:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 374:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 375:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 376:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_NVIC */
 377:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 378:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 379:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
 380:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 381:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 382:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 383:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 384:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 385:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 386:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 387:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 388:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 389:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 390:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 391:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 392:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 393:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 394:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 395:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 396:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 397:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 398:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 399:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 400:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 401:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 402:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 403:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 404:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 405:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 406:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 407:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 408:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED0[5];
 409:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 410:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } SCB_Type;
 411:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 412:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB CPUID Register Definitions */
 413:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 414:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 415:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 416:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 417:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 418:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 419:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 420:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 421:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 422:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 423:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 424:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 425:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 426:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 427:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 428:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 429:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 430:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 431:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 432:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 433:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 434:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 435:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 436:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 437:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 438:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 439:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 440:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 441:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 442:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 443:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 444:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 445:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 446:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 447:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 448:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 449:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 450:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 451:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 452:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 453:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 454:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 455:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 456:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 457:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 458:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 459:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 460:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 461:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 462:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 463:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 464:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 465:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 466:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #else
 467:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 468:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 469:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 470:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 471:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 472:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 473:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 474:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 475:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 476:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 477:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 478:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 479:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 480:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 481:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 482:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 483:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 484:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 485:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 486:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 487:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 488:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 489:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 490:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 491:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 492:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 493:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB System Control Register Definitions */
 494:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 495:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 496:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 497:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 498:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 499:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 500:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 501:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 502:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 503:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Configuration Control Register Definitions */
 504:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 505:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 506:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 507:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 508:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 509:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 510:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 511:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 512:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 513:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 514:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 515:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 516:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 517:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 518:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 519:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 520:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 521:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 522:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 523:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 524:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 525:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 526:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 527:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 528:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 529:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 530:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 531:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 532:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 533:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 534:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 535:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 536:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 537:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 538:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 539:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 540:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 541:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 542:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 543:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 544:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 545:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 546:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 547:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 548:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 549:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 550:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 551:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 552:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 553:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 554:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 555:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 556:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 557:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 558:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 559:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 560:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 561:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 562:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 563:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 564:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 565:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 566:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 567:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 568:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 569:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 570:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 571:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 572:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 573:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 574:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 575:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 576:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 577:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 578:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 579:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 580:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 581:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 582:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 583:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 584:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 585:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 586:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 587:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 588:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 589:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 590:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 591:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 592:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 593:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 594:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 595:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 596:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 597:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 598:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 599:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 600:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 601:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_SCB */
 602:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 603:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 604:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
 605:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 606:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 607:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 608:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 609:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 610:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 611:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 612:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 613:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 614:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED0[1];
 615:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 616:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 617:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 618:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #else
 619:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED1[1];
 620:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
 621:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } SCnSCB_Type;
 622:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 623:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 624:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 625:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 626:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 627:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Auxiliary Control Register Definitions */
 628:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 629:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 630:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 631:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 632:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 633:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 634:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 635:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 636:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 637:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 638:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 639:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 640:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 641:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
 642:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 643:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 644:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 645:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 646:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 647:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 648:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 649:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 650:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 651:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 652:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 653:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 654:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 655:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } SysTick_Type;
 656:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 657:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SysTick Control / Status Register Definitions */
 658:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 659:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 660:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 661:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 662:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 663:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 664:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 665:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 666:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 667:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 668:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 669:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 670:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SysTick Reload Register Definitions */
 671:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 672:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 673:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 674:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SysTick Current Register Definitions */
 675:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 676:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 677:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 678:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* SysTick Calibration Register Definitions */
 679:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 680:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 681:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 682:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 683:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 684:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 685:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 686:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 687:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 688:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_SysTick */
 689:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 690:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 691:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
 692:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 693:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 694:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 695:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 696:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 697:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 698:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 699:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 700:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 701:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __O  union
 702:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   {
 703:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 704:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 705:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 706:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 707:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED0[864];
 708:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 709:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED1[15];
 710:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 711:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED2[15];
 712:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 713:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED3[29];
 714:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 715:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 716:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 717:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED4[43];
 718:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 719:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 720:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED5[6];
 721:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 722:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 723:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 724:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 725:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 726:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 727:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 728:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 729:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 730:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 731:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 732:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 733:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } ITM_Type;
 734:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 735:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 736:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 737:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 738:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 739:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ITM Trace Control Register Definitions */
 740:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 741:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 742:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 743:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 744:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 745:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 746:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 747:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 748:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 749:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 750:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 751:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 752:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 753:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 754:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 755:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 756:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 757:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 758:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 759:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 760:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 761:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 762:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 763:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 764:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 765:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 766:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 767:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ITM Integration Write Register Definitions */
 768:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 769:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 770:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 771:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ITM Integration Read Register Definitions */
 772:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 773:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 774:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 775:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 776:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 777:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 778:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 779:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ITM Lock Status Register Definitions */
 780:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 781:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 782:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 783:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 784:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 785:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 786:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 787:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 788:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 789:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 790:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 791:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 792:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
 793:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 794:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 795:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 796:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 797:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 798:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 799:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 800:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 801:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 802:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 803:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 804:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 805:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 806:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 807:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 808:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 809:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 810:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 811:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 812:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 813:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED0[1];
 814:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 815:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 816:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 817:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED1[1];
 818:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 819:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 820:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 821:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED2[1];
 822:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 823:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 824:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 825:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } DWT_Type;
 826:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 827:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT Control Register Definitions */
 828:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 829:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 830:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 831:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 832:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 833:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 834:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 835:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 836:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 837:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 838:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 839:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 840:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 841:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 842:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 843:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 844:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 845:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 846:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 847:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 848:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 849:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 850:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 851:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 852:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 853:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 854:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 855:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 856:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 857:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 858:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 859:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 860:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 861:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 862:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 863:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 864:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 865:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 866:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 867:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 868:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 869:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 870:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 871:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 872:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 873:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 874:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 875:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 876:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 877:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 878:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 879:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 880:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 881:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 882:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT CPI Count Register Definitions */
 883:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 884:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 885:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 886:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 887:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 888:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 889:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 890:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT Sleep Count Register Definitions */
 891:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 892:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 893:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 894:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT LSU Count Register Definitions */
 895:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 896:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 897:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 898:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 899:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 900:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 901:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 902:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 903:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 904:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 905:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 906:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* DWT Comparator Function Register Definitions */
 907:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 908:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 909:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 910:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 911:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 912:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 913:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 914:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 915:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 916:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 917:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 918:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 919:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 920:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 921:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 922:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 923:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 924:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 925:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 926:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 927:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 928:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 929:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 930:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 931:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 932:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 933:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 934:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 935:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 936:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 937:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
 938:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 939:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 940:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
 941:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 942:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 943:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 944:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
 945:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
 946:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
 947:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 948:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 949:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED0[2];
 950:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 951:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED1[55];
 952:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 953:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED2[131];
 954:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 955:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 956:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 957:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED3[759];
 958:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 959:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 960:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 961:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED4[1];
 962:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 963:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 964:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 965:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED5[39];
 966:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 967:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 968:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****        uint32_t RESERVED7[8];
 969:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 970:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 971:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } TPI_Type;
 972:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 973:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 974:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 975:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
 976:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 977:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 978:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 979:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
 980:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 981:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 982:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 983:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 984:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 985:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 986:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 987:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 988:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 989:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 990:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 991:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 992:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
 993:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 994:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 995:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 996:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 997:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
 998:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 999:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1000:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1001:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI TRIGGER Register Definitions */
1002:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
1003:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1004:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1005:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1006:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1007:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1008:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1009:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1010:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1011:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1012:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1013:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1014:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1015:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1016:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1017:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1018:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
1019:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1020:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1021:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
1022:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1023:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1024:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
1025:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1026:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1027:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1028:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1029:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1030:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1031:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1032:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1033:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1034:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1035:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1036:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1037:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1038:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1039:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1040:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1041:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1042:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1043:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1044:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1045:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1046:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1047:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1048:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1049:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1050:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1051:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1052:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1053:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1054:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1055:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1056:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1057:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1058:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1059:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1060:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1061:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI DEVID Register Definitions */
1062:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1063:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1064:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1065:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1066:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1067:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1068:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1069:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1070:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1071:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1072:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1073:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1074:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1075:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1076:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1077:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1078:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1079:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1080:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1081:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1082:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1083:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1084:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1085:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1086:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1087:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1088:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1089:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1090:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if (__MPU_PRESENT == 1)
1091:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
1092:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1093:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1094:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
1095:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1096:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1097:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1098:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1099:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
1100:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1101:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1102:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1103:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1104:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1105:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1106:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1107:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1108:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1109:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1110:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1111:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1112:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } MPU_Type;
1113:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1114:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* MPU Type Register */
1115:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1116:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1117:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1118:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1119:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1120:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1121:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1122:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1123:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1124:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* MPU Control Register */
1125:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1126:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1127:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1128:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1129:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1130:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1131:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1132:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1133:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1134:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* MPU Region Number Register */
1135:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1136:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1137:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1138:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* MPU Region Base Address Register */
1139:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1140:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1141:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1142:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1143:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1144:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1145:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1146:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1147:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1148:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* MPU Region Attribute and Size Register */
1149:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1150:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1151:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1152:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1153:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1154:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1155:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1156:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1157:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1158:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1159:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1160:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1161:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1162:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1163:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1164:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1165:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1166:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1167:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1168:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1169:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1170:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1171:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1172:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1173:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1174:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1175:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1176:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1177:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1178:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1179:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_MPU */
1180:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
1181:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1182:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1183:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_core_register
1184:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1185:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1186:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
1187:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1188:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1189:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1190:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1191:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** typedef struct
1192:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1193:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1194:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1195:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1196:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1197:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** } CoreDebug_Type;
1198:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1199:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Debug Halting Control and Status Register */
1200:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1201:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1202:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1203:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1204:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1205:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1206:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1207:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1208:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1209:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1210:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1211:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1212:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1213:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1214:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1215:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1216:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1217:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1218:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1219:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1220:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1221:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1222:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1223:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1224:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1225:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1226:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1227:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1228:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1229:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1230:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1231:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1232:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1233:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1234:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1235:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1236:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Debug Core Register Selector Register */
1237:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1238:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1239:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1240:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1241:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1242:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1243:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Debug Exception and Monitor Control Register */
1244:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1245:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1246:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1247:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1248:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1249:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1250:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1251:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1252:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1253:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1254:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1255:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1256:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1257:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1258:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1259:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1260:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1261:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1262:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1263:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1264:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1265:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1266:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1267:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1268:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1269:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1270:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1271:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1272:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1273:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1274:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1275:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1276:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1277:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1278:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1279:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1280:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1281:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1282:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1283:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1284:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1285:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1286:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup    CMSIS_core_register
1287:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1288:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1289:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   @{
1290:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1291:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1292:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1293:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1294:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1295:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1296:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1297:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1298:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1299:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1300:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1301:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1302:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1303:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1304:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1305:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1306:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1307:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1308:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1309:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1310:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1311:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #if (__MPU_PRESENT == 1)
1312:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1313:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1314:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** #endif
1315:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1316:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*@} */
1317:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1318:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1319:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1320:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /*******************************************************************************
1321:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  *                Hardware Abstraction Layer
1322:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   Core Function Interface contains:
1323:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core NVIC Functions
1324:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core SysTick Functions
1325:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core Debug Functions
1326:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   - Core Register Access Functions
1327:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  ******************************************************************************/
1328:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1329:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** */
1330:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1331:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1332:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1333:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1334:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1335:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1336:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1337:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     @{
1338:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1339:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1340:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Set Priority Grouping
1341:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1342:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1343:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1344:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   Only values from 0..7 are used.
1345:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   In case of a conflict between priority grouping and available
1346:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1347:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1348:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1349:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1350:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1351:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1352:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   uint32_t reg_value;
1353:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1354:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1355:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1356:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear 
1357:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   reg_value  =  (reg_value                                   |
1358:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1359:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****                 (PriorityGroupTmp << 8)                       );              /* Insert write key a
1360:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   SCB->AIRCR =  reg_value;
1361:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
1362:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1363:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1364:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Get Priority Grouping
1365:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1366:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1367:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1368:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1369:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1370:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1371:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1372:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1373:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
1374:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1375:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1376:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Enable External Interrupt
1377:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1378:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1379:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1380:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1381:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1382:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1383:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
  26              		.loc 1 1383 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1384:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  32              		.loc 1 1384 0
  33 0000 4109     		lsrs	r1, r0, #5
  34 0002 0123     		movs	r3, #1
  35 0004 00F01F00 		and	r0, r0, #31
  36              	.LVL1:
  37 0008 024A     		ldr	r2, .L2
  38 000a 8340     		lsls	r3, r3, r0
  39 000c 42F82130 		str	r3, [r2, r1, lsl #2]
  40 0010 7047     		bx	lr
  41              	.L3:
  42 0012 00BF     		.align	2
  43              	.L2:
  44 0014 00E100E0 		.word	-536813312
  45              		.cfi_endproc
  46              	.LFE48:
  48              		.section	.text.NVIC_ClearPendingIRQ,"ax",%progbits
  49              		.align	1
  50              		.thumb
  51              		.thumb_func
  53              	NVIC_ClearPendingIRQ:
  54              	.LFB52:
1385:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
1386:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1387:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1388:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Disable External Interrupt
1389:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1390:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1391:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1392:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1393:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1394:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1395:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1396:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1397:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
1398:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1399:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1400:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Get Pending Interrupt
1401:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1402:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1403:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     for the specified interrupt.
1404:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1405:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1406:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1407:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \return             0  Interrupt status is not pending.
1408:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \return             1  Interrupt status is pending.
1409:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1410:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1411:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1412:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1413:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
1414:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1415:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1416:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Set Pending Interrupt
1417:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1418:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     The function sets the pending bit of an external interrupt.
1419:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1420:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1421:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1422:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1423:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
1424:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1425:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
1426:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1427:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1428:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** /** \brief  Clear Pending Interrupt
1429:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1430:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     The function clears the pending bit of an external interrupt.
1431:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** 
1432:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1433:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****  */
1434:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1435:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** {
  55              		.loc 1 1435 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL2:
1436:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  61              		.loc 1 1436 0
  62 0000 4309     		lsrs	r3, r0, #5
  63 0002 0122     		movs	r2, #1
  64 0004 00F01F00 		and	r0, r0, #31
  65              	.LVL3:
  66 0008 0249     		ldr	r1, .L5
  67 000a 8240     		lsls	r2, r2, r0
  68 000c 6033     		adds	r3, r3, #96
  69 000e 41F82320 		str	r2, [r1, r3, lsl #2]
  70 0012 7047     		bx	lr
  71              	.L6:
  72              		.align	2
  73              	.L5:
  74 0014 00E100E0 		.word	-536813312
  75              		.cfi_endproc
  76              	.LFE52:
  78              		.section	.text.set_bit_reg8,"ax",%progbits
  79              		.align	1
  80              		.thumb
  81              		.thumb_func
  83              	set_bit_reg8:
  84              	.LFB71:
  85              		.file 2 "../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h"
   1:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** /*******************************************************************************
   2:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * (c) Copyright 2011-2013 Microsemi SoC Products Group. All rights reserved.
   3:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *
   4:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *  SmartFusion2 Cortex Microcontroller Software Interface - Peripheral
   5:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *  Access Layer.
   6:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *
   7:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *  This file provides interfaces to perform register and register bit level 
   8:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *  read / write operations. These interfaces support bit-banding in case of 
   9:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *  Cortex-M3 CPU.
  10:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  *
  11:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * SVN $Revision: 5263 $
  12:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * SVN $Date: 2013-03-21 14:44:58 +0000 (Thu, 21 Mar 2013) $
  13:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  */
  14:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  15:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #ifndef HW_REG_IO_H_
  16:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #define HW_REG_IO_H_
  17:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  18:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #include <stdint.h>                       /* Include standard types */
  19:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  20:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #if defined ( __CC_ARM   )
  21:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****   #define __INLINE         __inline       /*!< inline keyword for ARM Compiler       */
  22:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  23:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #elif defined ( __ICCARM__ )
  24:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****   #define __INLINE        inline          /*!< inline keyword for IAR Compiler. Only avaiable in Hi
  25:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  26:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #elif defined   (  __GNUC__  )
  27:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****   #define __INLINE        inline          /*!< inline keyword for GNU Compiler       */
  28:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #endif
  29:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  30:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** /*****************************************************************************************
  31:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * Definitions for register access
  32:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  */
  33:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  34:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #define HW_REG(addr)            (*((volatile uint32_t *) (addr)))
  35:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  36:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void write_reg32(volatile uint32_t * reg, uint32_t val)
  37:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  38:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG(reg) = val;
  39:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  40:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void write_reg16(volatile uint16_t * reg, uint16_t val)
  41:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  42:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG(reg) = val;
  43:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  44:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void write_reg8(volatile uint8_t * reg, uint8_t val)
  45:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  46:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG(reg) = val;
  47:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  48:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  49:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE uint32_t read_reg32(volatile uint32_t * reg)
  50:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  51:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     return ( HW_REG(reg) );
  52:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  53:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE uint16_t read_reg16(volatile uint16_t * reg)
  54:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  55:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     return ( HW_REG(reg) );
  56:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  57:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE uint8_t read_reg8(volatile uint8_t * reg)
  58:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  59:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     return ( HW_REG(reg) );
  60:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  61:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** /*****************************************************************************************
  62:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * Definitions for register bits access using bit-band aliases for Cortex-M3 
  63:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  */
  64:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #define BITBAND(addr,bitnum)    (((uint32_t)addr & 0xF0000000)+0x02000000+(((uint32_t)addr & 0xFFFF
  65:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** #define HW_REG_BIT(reg,bitnum)  (*(volatile unsigned int *)((BITBAND(reg,bitnum))))
  66:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** 
  67:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** /*****************************************************************************************
  68:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * Functions to set a bit field in Cortex-M3 
  69:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  */
  70:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void set_bit_reg32(volatile uint32_t * reg, uint8_t bit)
  71:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  72:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG_BIT(reg,bit) = 0x1;
  73:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  74:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
  75:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  76:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG_BIT(reg,bit) = 0x1;
  77:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  78:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
  79:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  86              		.loc 2 79 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL4:
  80:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG_BIT(reg,bit) = 0x1;
  92              		.loc 2 80 0
  93 0000 00F07043 		and	r3, r0, #-268435456
  94 0004 03EB8101 		add	r1, r3, r1, lsl #2
  95              	.LVL5:
  96 0008 C0F31300 		ubfx	r0, r0, #0, #20
  97              	.LVL6:
  98 000c 01F10071 		add	r1, r1, #33554432
  99 0010 4001     		lsls	r0, r0, #5
 100 0012 0123     		movs	r3, #1
 101 0014 0B50     		str	r3, [r1, r0]
 102 0016 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE71:
 106              		.section	.text.clear_bit_reg8,"ax",%progbits
 107              		.align	1
 108              		.thumb
 109              		.thumb_func
 111              	clear_bit_reg8:
 112              	.LFB74:
  81:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  82:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** /*****************************************************************************************
  83:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * Functions to clear a bit field in Cortex-M3
  84:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  */
  85:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void clear_bit_reg32(volatile uint32_t * reg, uint8_t bit)
  86:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  87:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG_BIT(reg,bit) = 0x0;
  88:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  89:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
  90:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
  91:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG_BIT(reg,bit) = 0x0;
  92:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  93:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
  94:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
 113              		.loc 2 94 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL7:
  95:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     HW_REG_BIT(reg,bit) = 0x0;
 119              		.loc 2 95 0
 120 0000 00F07043 		and	r3, r0, #-268435456
 121 0004 03EB8101 		add	r1, r3, r1, lsl #2
 122              	.LVL8:
 123 0008 C0F31300 		ubfx	r0, r0, #0, #20
 124              	.LVL9:
 125 000c 01F10071 		add	r1, r1, #33554432
 126 0010 4001     		lsls	r0, r0, #5
 127 0012 0023     		movs	r3, #0
 128 0014 0B50     		str	r3, [r1, r0]
 129 0016 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE74:
 133              		.section	.text.read_bit_reg8,"ax",%progbits
 134              		.align	1
 135              		.thumb
 136              		.thumb_func
 138              	read_bit_reg8:
 139              	.LFB77:
  96:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
  97:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** /*****************************************************************************************
  98:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  * Functions to read a bit field in Cortex-M3
  99:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****  */
 100:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE uint8_t read_bit_reg32(volatile uint32_t * reg, uint8_t bit)
 101:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
 102:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     return (HW_REG_BIT(reg,bit));
 103:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
 104:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
 105:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
 106:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     return (HW_REG_BIT(reg,bit));
 107:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
 108:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
 109:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** {
 140              		.loc 2 109 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL10:
 110:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h ****     return (HW_REG_BIT(reg,bit));
 146              		.loc 2 110 0
 147 0000 00F07043 		and	r3, r0, #-268435456
 148 0004 03EB8101 		add	r1, r3, r1, lsl #2
 149              	.LVL11:
 150 0008 C0F31300 		ubfx	r0, r0, #0, #20
 151              	.LVL12:
 152 000c 01F10071 		add	r1, r1, #33554432
 153 0010 4001     		lsls	r0, r0, #5
 154 0012 0858     		ldr	r0, [r1, r0]
 111:../src/drivers/mss_uart/../../CMSIS/hw_reg_io.h **** }
 155              		.loc 2 111 0
 156 0014 C0B2     		uxtb	r0, r0
 157 0016 7047     		bx	lr
 158              		.cfi_endproc
 159              	.LFE77:
 161              		.section	.text.default_tx_handler,"ax",%progbits
 162              		.align	1
 163              		.thumb
 164              		.thumb_func
 166              	default_tx_handler:
 167              	.LFB126:
 168              		.file 3 "../src/drivers/mss_uart/mss_uart.c"
   1:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
   2:../src/drivers/mss_uart/mss_uart.c ****  * (c) Copyright 2011-2013 Microsemi SoC Products Group.  All rights reserved.
   3:../src/drivers/mss_uart/mss_uart.c ****  *
   4:../src/drivers/mss_uart/mss_uart.c ****  * SmartFusion2 Microcontroller Subsystem MMUART bare metal software driver
   5:../src/drivers/mss_uart/mss_uart.c ****  * implementation.
   6:../src/drivers/mss_uart/mss_uart.c ****  *
   7:../src/drivers/mss_uart/mss_uart.c ****  * SVN $Revision: 5610 $
   8:../src/drivers/mss_uart/mss_uart.c ****  * SVN $Date: 2013-04-05 18:49:30 +0530 (Fri, 05 Apr 2013) $
   9:../src/drivers/mss_uart/mss_uart.c ****  */
  10:../src/drivers/mss_uart/mss_uart.c **** #include "mss_uart.h"
  11:../src/drivers/mss_uart/mss_uart.c **** #include "mss_uart_regs.h"
  12:../src/drivers/mss_uart/mss_uart.c **** #include "../../CMSIS/mss_assert.h"
  13:../src/drivers/mss_uart/mss_uart.c **** #include "../../CMSIS/hw_reg_io.h"
  14:../src/drivers/mss_uart/mss_uart.c **** #include "../../CMSIS/system_m2sxxx.h"
  15:../src/drivers/mss_uart/mss_uart.c **** 
  16:../src/drivers/mss_uart/mss_uart.c **** #ifdef __cplusplus
  17:../src/drivers/mss_uart/mss_uart.c **** extern "C" {
  18:../src/drivers/mss_uart/mss_uart.c **** #endif 
  19:../src/drivers/mss_uart/mss_uart.c **** 
  20:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  21:../src/drivers/mss_uart/mss_uart.c ****  * Defines
  22:../src/drivers/mss_uart/mss_uart.c ****  */
  23:../src/drivers/mss_uart/mss_uart.c **** #define TX_COMPLETE            0u
  24:../src/drivers/mss_uart/mss_uart.c **** #define TX_FIFO_SIZE           16u
  25:../src/drivers/mss_uart/mss_uart.c **** 
  26:../src/drivers/mss_uart/mss_uart.c **** #define FCR_TRIG_LEVEL_MASK    0xC0u
  27:../src/drivers/mss_uart/mss_uart.c **** 
  28:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_MASK              0x0Fu
  29:../src/drivers/mss_uart/mss_uart.c **** 
  30:../src/drivers/mss_uart/mss_uart.c **** #define INVALID_INTERRUPT      0u
  31:../src/drivers/mss_uart/mss_uart.c **** #define INVALID_IRQ_HANDLER    ((mss_uart_irq_handler_t) 0)
  32:../src/drivers/mss_uart/mss_uart.c **** #define NULL_HANDLER           ((mss_uart_irq_handler_t) 0)
  33:../src/drivers/mss_uart/mss_uart.c **** 
  34:../src/drivers/mss_uart/mss_uart.c **** #define MSS_UART_DATA_READY    ((uint8_t) 0x01)
  35:../src/drivers/mss_uart/mss_uart.c **** 
  36:../src/drivers/mss_uart/mss_uart.c **** #define SYNC_ASYNC_MODE_MASK   (0x7u)
  37:../src/drivers/mss_uart/mss_uart.c **** 
  38:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  39:../src/drivers/mss_uart/mss_uart.c ****  * Possible values for Interrupt Identification Register Field.
  40:../src/drivers/mss_uart/mss_uart.c ****  */
  41:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_MODEM_STATUS   0x00u
  42:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_THRE           0x02u
  43:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_MMI            0x03u
  44:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_RX_DATA        0x04u
  45:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_RX_LINE_STATUS 0x06u
  46:../src/drivers/mss_uart/mss_uart.c **** #define IIRF_DATA_TIMEOUT   0x0Cu
  47:../src/drivers/mss_uart/mss_uart.c **** 
  48:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  49:../src/drivers/mss_uart/mss_uart.c ****  * Receiver error status mask.
  50:../src/drivers/mss_uart/mss_uart.c ****  */
  51:../src/drivers/mss_uart/mss_uart.c **** #define STATUS_ERROR_MASK    ( MSS_UART_OVERUN_ERROR | MSS_UART_PARITY_ERROR | \
  52:../src/drivers/mss_uart/mss_uart.c ****                                MSS_UART_FRAMING_ERROR  | MSS_UART_BREAK_ERROR | \
  53:../src/drivers/mss_uart/mss_uart.c ****                                MSS_UART_FIFO_ERROR)
  54:../src/drivers/mss_uart/mss_uart.c **** 
  55:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  56:../src/drivers/mss_uart/mss_uart.c ****  * Cortex-M3 interrupt handler functions implemented as part of the MSS UART
  57:../src/drivers/mss_uart/mss_uart.c ****  * driver.
  58:../src/drivers/mss_uart/mss_uart.c ****  */
  59:../src/drivers/mss_uart/mss_uart.c **** #if defined(__GNUC__)
  60:../src/drivers/mss_uart/mss_uart.c **** __attribute__((__interrupt__)) void UART0_IRQHandler(void);
  61:../src/drivers/mss_uart/mss_uart.c **** #else
  62:../src/drivers/mss_uart/mss_uart.c **** void UART0_IRQHandler(void);
  63:../src/drivers/mss_uart/mss_uart.c **** #endif
  64:../src/drivers/mss_uart/mss_uart.c **** 
  65:../src/drivers/mss_uart/mss_uart.c **** #if defined(__GNUC__)
  66:../src/drivers/mss_uart/mss_uart.c **** __attribute__((__interrupt__)) void UART1_IRQHandler(void);
  67:../src/drivers/mss_uart/mss_uart.c **** #else
  68:../src/drivers/mss_uart/mss_uart.c **** void UART1_IRQHandler(void);
  69:../src/drivers/mss_uart/mss_uart.c **** #endif
  70:../src/drivers/mss_uart/mss_uart.c **** 
  71:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  72:../src/drivers/mss_uart/mss_uart.c ****  * Local functions.
  73:../src/drivers/mss_uart/mss_uart.c ****  */
  74:../src/drivers/mss_uart/mss_uart.c **** static void global_init(mss_uart_instance_t * this_uart, uint32_t baud_rate, 
  75:../src/drivers/mss_uart/mss_uart.c ****                         uint8_t line_config);
  76:../src/drivers/mss_uart/mss_uart.c **** static void MSS_UART_isr(mss_uart_instance_t * this_uart);
  77:../src/drivers/mss_uart/mss_uart.c **** static void default_tx_handler(mss_uart_instance_t * this_uart);
  78:../src/drivers/mss_uart/mss_uart.c **** 
  79:../src/drivers/mss_uart/mss_uart.c **** static void config_baud_divisors
  80:../src/drivers/mss_uart/mss_uart.c **** (
  81:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
  82:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baudrate    
  83:../src/drivers/mss_uart/mss_uart.c **** );
  84:../src/drivers/mss_uart/mss_uart.c **** 
  85:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  86:../src/drivers/mss_uart/mss_uart.c ****  * Instance definitions
  87:../src/drivers/mss_uart/mss_uart.c ****  */
  88:../src/drivers/mss_uart/mss_uart.c **** mss_uart_instance_t g_mss_uart0;
  89:../src/drivers/mss_uart/mss_uart.c **** mss_uart_instance_t g_mss_uart1;
  90:../src/drivers/mss_uart/mss_uart.c **** 
  91:../src/drivers/mss_uart/mss_uart.c **** 
  92:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
  93:../src/drivers/mss_uart/mss_uart.c ****  * Public Functions
  94:../src/drivers/mss_uart/mss_uart.c ****  *******************************************************************************/
  95:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
  96:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
  97:../src/drivers/mss_uart/mss_uart.c ****  */
  98:../src/drivers/mss_uart/mss_uart.c **** void 
  99:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_init
 100:../src/drivers/mss_uart/mss_uart.c **** (
 101:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t* this_uart, 
 102:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baud_rate,
 103:../src/drivers/mss_uart/mss_uart.c ****     uint8_t line_config
 104:../src/drivers/mss_uart/mss_uart.c **** )
 105:../src/drivers/mss_uart/mss_uart.c **** {
 106:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 107:../src/drivers/mss_uart/mss_uart.c ****      * mss_uart_instance_t instances used to identify UART0 and UART1. */
 108:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 109:../src/drivers/mss_uart/mss_uart.c **** 
 110:../src/drivers/mss_uart/mss_uart.c ****     /* Perform generic initialization */
 111:../src/drivers/mss_uart/mss_uart.c ****     global_init(this_uart, baud_rate, line_config);
 112:../src/drivers/mss_uart/mss_uart.c **** 
 113:../src/drivers/mss_uart/mss_uart.c ****     /* Disable LIN mode */
 114:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
 115:../src/drivers/mss_uart/mss_uart.c **** 
 116:../src/drivers/mss_uart/mss_uart.c ****     /* Disable IrDA mode */
 117:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
 118:../src/drivers/mss_uart/mss_uart.c **** 
 119:../src/drivers/mss_uart/mss_uart.c ****     /* Disable SmartCard Mode */
 120:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
 121:../src/drivers/mss_uart/mss_uart.c **** 
 122:../src/drivers/mss_uart/mss_uart.c ****     /* set default tx handler for automated TX using interrupt in USART mode */
 123:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_handler = default_tx_handler;
 124:../src/drivers/mss_uart/mss_uart.c **** }
 125:../src/drivers/mss_uart/mss_uart.c **** 
 126:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 127:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 128:../src/drivers/mss_uart/mss_uart.c ****  */
 129:../src/drivers/mss_uart/mss_uart.c **** void MSS_UART_lin_init
 130:../src/drivers/mss_uart/mss_uart.c **** (
 131:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t* this_uart, 
 132:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baud_rate,
 133:../src/drivers/mss_uart/mss_uart.c ****     uint8_t line_config
 134:../src/drivers/mss_uart/mss_uart.c **** )
 135:../src/drivers/mss_uart/mss_uart.c **** {
 136:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 137:../src/drivers/mss_uart/mss_uart.c ****      * mss_uart_instance_t instances used to identify UART0 and UART1. */
 138:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 139:../src/drivers/mss_uart/mss_uart.c **** 
 140:../src/drivers/mss_uart/mss_uart.c ****     /* Perform generic initialization */
 141:../src/drivers/mss_uart/mss_uart.c ****     global_init(this_uart, baud_rate, line_config);
 142:../src/drivers/mss_uart/mss_uart.c **** 
 143:../src/drivers/mss_uart/mss_uart.c ****      /* Enable LIN mode */
 144:../src/drivers/mss_uart/mss_uart.c ****     set_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
 145:../src/drivers/mss_uart/mss_uart.c **** 
 146:../src/drivers/mss_uart/mss_uart.c ****     /* Disable IrDA mode */
 147:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
 148:../src/drivers/mss_uart/mss_uart.c **** 
 149:../src/drivers/mss_uart/mss_uart.c ****     /* Disable SmartCard Mode */
 150:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
 151:../src/drivers/mss_uart/mss_uart.c **** }
 152:../src/drivers/mss_uart/mss_uart.c **** 
 153:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 154:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 155:../src/drivers/mss_uart/mss_uart.c ****  */
 156:../src/drivers/mss_uart/mss_uart.c **** void 
 157:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_irda_init
 158:../src/drivers/mss_uart/mss_uart.c **** (
 159:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t* this_uart, 
 160:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baud_rate,
 161:../src/drivers/mss_uart/mss_uart.c ****     uint8_t line_config,
 162:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_rzi_polarity_t rxpol,
 163:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_rzi_polarity_t txpol,
 164:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_rzi_pulsewidth_t pw
 165:../src/drivers/mss_uart/mss_uart.c **** )
 166:../src/drivers/mss_uart/mss_uart.c **** {
 167:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 168:../src/drivers/mss_uart/mss_uart.c ****      * mss_uart_instance_t instances used to identify UART0 and UART1. */
 169:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 170:../src/drivers/mss_uart/mss_uart.c **** 
 171:../src/drivers/mss_uart/mss_uart.c ****     /* Perform generic initialization */
 172:../src/drivers/mss_uart/mss_uart.c ****     global_init(this_uart, baud_rate, line_config);
 173:../src/drivers/mss_uart/mss_uart.c **** 
 174:../src/drivers/mss_uart/mss_uart.c ****      /* Enable LIN mode */
 175:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
 176:../src/drivers/mss_uart/mss_uart.c **** 
 177:../src/drivers/mss_uart/mss_uart.c ****     /* Disable IrDA mode */
 178:../src/drivers/mss_uart/mss_uart.c ****     set_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
 179:../src/drivers/mss_uart/mss_uart.c ****     ((rxpol == MSS_UART_ACTIVE_LOW) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EIRX) : 
 180:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EIRX));
 181:../src/drivers/mss_uart/mss_uart.c ****                                       
 182:../src/drivers/mss_uart/mss_uart.c ****     ((txpol == MSS_UART_ACTIVE_LOW) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITX) : 
 183:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EITX));
 184:../src/drivers/mss_uart/mss_uart.c ****                                       
 185:../src/drivers/mss_uart/mss_uart.c ****     ((pw == MSS_UART_3_BY_16) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITP) : 
 186:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EITP));
 187:../src/drivers/mss_uart/mss_uart.c ****     /* Disable SmartCard Mode */
 188:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
 189:../src/drivers/mss_uart/mss_uart.c **** }
 190:../src/drivers/mss_uart/mss_uart.c **** 
 191:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 192:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 193:../src/drivers/mss_uart/mss_uart.c ****  */
 194:../src/drivers/mss_uart/mss_uart.c **** void 
 195:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_smartcard_init
 196:../src/drivers/mss_uart/mss_uart.c **** (
 197:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t* this_uart, 
 198:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baud_rate,
 199:../src/drivers/mss_uart/mss_uart.c ****     uint8_t line_config
 200:../src/drivers/mss_uart/mss_uart.c **** )
 201:../src/drivers/mss_uart/mss_uart.c **** {
 202:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 203:../src/drivers/mss_uart/mss_uart.c ****      * mss_uart_instance_t instances used to identify UART0 and UART1. */
 204:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 205:../src/drivers/mss_uart/mss_uart.c **** 
 206:../src/drivers/mss_uart/mss_uart.c ****     /* Perform generic initialization */
 207:../src/drivers/mss_uart/mss_uart.c ****     global_init(this_uart, baud_rate, line_config);
 208:../src/drivers/mss_uart/mss_uart.c ****     
 209:../src/drivers/mss_uart/mss_uart.c ****     /* Disable LIN mode */
 210:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
 211:../src/drivers/mss_uart/mss_uart.c **** 
 212:../src/drivers/mss_uart/mss_uart.c ****     /* Disable IrDA mode */
 213:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
 214:../src/drivers/mss_uart/mss_uart.c **** 
 215:../src/drivers/mss_uart/mss_uart.c ****     /* Enable SmartCard Mode : Only when data is 8-bit and 2 stop bits*/
 216:../src/drivers/mss_uart/mss_uart.c ****     if( ( MSS_UART_DATA_8_BITS | MSS_UART_TWO_STOP_BITS) == 
 217:../src/drivers/mss_uart/mss_uart.c ****         (line_config & (MSS_UART_DATA_8_BITS | MSS_UART_TWO_STOP_BITS)))
 218:../src/drivers/mss_uart/mss_uart.c ****     {
 219:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM2, EERR);    
 220:../src/drivers/mss_uart/mss_uart.c ****         /* Enable single wire half-duplex mode */
 221:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
 222:../src/drivers/mss_uart/mss_uart.c ****     }
 223:../src/drivers/mss_uart/mss_uart.c **** }
 224:../src/drivers/mss_uart/mss_uart.c **** 
 225:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 226:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 227:../src/drivers/mss_uart/mss_uart.c ****  */
 228:../src/drivers/mss_uart/mss_uart.c **** void
 229:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_polled_tx
 230:../src/drivers/mss_uart/mss_uart.c **** (
 231:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 232:../src/drivers/mss_uart/mss_uart.c ****     const uint8_t * pbuff,
 233:../src/drivers/mss_uart/mss_uart.c ****     uint32_t tx_size
 234:../src/drivers/mss_uart/mss_uart.c **** )
 235:../src/drivers/mss_uart/mss_uart.c **** {
 236:../src/drivers/mss_uart/mss_uart.c ****     uint32_t char_idx = 0u;
 237:../src/drivers/mss_uart/mss_uart.c ****     uint32_t size_sent;
 238:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status;
 239:../src/drivers/mss_uart/mss_uart.c **** 
 240:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 241:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ( (uint8_t *)0));
 242:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0u);
 243:../src/drivers/mss_uart/mss_uart.c **** 
 244:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 245:../src/drivers/mss_uart/mss_uart.c ****         (pbuff != ((uint8_t *)0)) && (tx_size > 0u))
 246:../src/drivers/mss_uart/mss_uart.c ****     {
 247:../src/drivers/mss_uart/mss_uart.c ****          /* Remain in this loop until the entire input buffer
 248:../src/drivers/mss_uart/mss_uart.c ****           * has been transferred to the UART.
 249:../src/drivers/mss_uart/mss_uart.c ****           */
 250:../src/drivers/mss_uart/mss_uart.c ****         do {
 251:../src/drivers/mss_uart/mss_uart.c ****             /* Read the Line Status Register and update the sticky record */
 252:../src/drivers/mss_uart/mss_uart.c ****             status = this_uart->hw_reg->LSR;
 253:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 254:../src/drivers/mss_uart/mss_uart.c **** 
 255:../src/drivers/mss_uart/mss_uart.c ****             /* Check if TX FIFO is empty. */
 256:../src/drivers/mss_uart/mss_uart.c ****             if(status & MSS_UART_THRE)
 257:../src/drivers/mss_uart/mss_uart.c ****             {
 258:../src/drivers/mss_uart/mss_uart.c ****                 uint32_t fill_size = TX_FIFO_SIZE;
 259:../src/drivers/mss_uart/mss_uart.c **** 
 260:../src/drivers/mss_uart/mss_uart.c ****                 /* Calculate the number of bytes to transmit. */
 261:../src/drivers/mss_uart/mss_uart.c ****                 if(tx_size < TX_FIFO_SIZE)
 262:../src/drivers/mss_uart/mss_uart.c ****                 {
 263:../src/drivers/mss_uart/mss_uart.c ****                     fill_size = tx_size;
 264:../src/drivers/mss_uart/mss_uart.c ****                 }
 265:../src/drivers/mss_uart/mss_uart.c **** 
 266:../src/drivers/mss_uart/mss_uart.c ****                 /* Fill the TX FIFO with the calculated the number of bytes. */
 267:../src/drivers/mss_uart/mss_uart.c ****                 for(size_sent = 0u; size_sent < fill_size; ++size_sent)
 268:../src/drivers/mss_uart/mss_uart.c ****                 {
 269:../src/drivers/mss_uart/mss_uart.c ****                     /* Send next character in the buffer. */
 270:../src/drivers/mss_uart/mss_uart.c ****                     this_uart->hw_reg->THR = pbuff[char_idx];
 271:../src/drivers/mss_uart/mss_uart.c ****                     char_idx++;
 272:../src/drivers/mss_uart/mss_uart.c ****                 }
 273:../src/drivers/mss_uart/mss_uart.c **** 
 274:../src/drivers/mss_uart/mss_uart.c ****                 /* Calculate the number of untransmitted bytes remaining. */
 275:../src/drivers/mss_uart/mss_uart.c ****                 tx_size -= size_sent;
 276:../src/drivers/mss_uart/mss_uart.c ****             }
 277:../src/drivers/mss_uart/mss_uart.c ****         } while(tx_size);
 278:../src/drivers/mss_uart/mss_uart.c ****     }
 279:../src/drivers/mss_uart/mss_uart.c **** }
 280:../src/drivers/mss_uart/mss_uart.c **** 
 281:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 282:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 283:../src/drivers/mss_uart/mss_uart.c ****  */
 284:../src/drivers/mss_uart/mss_uart.c **** void
 285:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_polled_tx_string
 286:../src/drivers/mss_uart/mss_uart.c **** (
 287:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 288:../src/drivers/mss_uart/mss_uart.c ****     const uint8_t * p_sz_string
 289:../src/drivers/mss_uart/mss_uart.c **** )
 290:../src/drivers/mss_uart/mss_uart.c **** {
 291:../src/drivers/mss_uart/mss_uart.c ****     uint32_t char_idx = 0u;
 292:../src/drivers/mss_uart/mss_uart.c ****     uint32_t fill_size;
 293:../src/drivers/mss_uart/mss_uart.c ****     uint8_t data_byte;
 294:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status;
 295:../src/drivers/mss_uart/mss_uart.c **** 
 296:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 297:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(p_sz_string != ((uint8_t *)0));
 298:../src/drivers/mss_uart/mss_uart.c **** 
 299:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 300:../src/drivers/mss_uart/mss_uart.c ****        (p_sz_string != ((uint8_t *)0)))
 301:../src/drivers/mss_uart/mss_uart.c ****     {
 302:../src/drivers/mss_uart/mss_uart.c ****         /* Get the first data byte from the input buffer */
 303:../src/drivers/mss_uart/mss_uart.c ****         data_byte = p_sz_string[char_idx];
 304:../src/drivers/mss_uart/mss_uart.c **** 
 305:../src/drivers/mss_uart/mss_uart.c ****         /* First check for the NULL terminator byte.
 306:../src/drivers/mss_uart/mss_uart.c ****          * Then remain in this loop until the entire string in the input buffer
 307:../src/drivers/mss_uart/mss_uart.c ****          * has been transferred to the UART.
 308:../src/drivers/mss_uart/mss_uart.c ****          */
 309:../src/drivers/mss_uart/mss_uart.c ****         while(0u != data_byte)
 310:../src/drivers/mss_uart/mss_uart.c ****         {
 311:../src/drivers/mss_uart/mss_uart.c ****             /* Wait until TX FIFO is empty. */
 312:../src/drivers/mss_uart/mss_uart.c ****             do {
 313:../src/drivers/mss_uart/mss_uart.c ****                 status = this_uart->hw_reg->LSR;
 314:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->status |= status;
 315:../src/drivers/mss_uart/mss_uart.c ****             } while (0u == (status & MSS_UART_THRE));
 316:../src/drivers/mss_uart/mss_uart.c **** 
 317:../src/drivers/mss_uart/mss_uart.c ****             /* Send bytes from the input buffer until the TX FIFO is full
 318:../src/drivers/mss_uart/mss_uart.c ****              * or we reach the NULL terminator byte.
 319:../src/drivers/mss_uart/mss_uart.c ****              */
 320:../src/drivers/mss_uart/mss_uart.c ****             fill_size = 0u;
 321:../src/drivers/mss_uart/mss_uart.c ****             while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
 322:../src/drivers/mss_uart/mss_uart.c ****             {
 323:../src/drivers/mss_uart/mss_uart.c ****                 /* Send the data byte */
 324:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->THR = data_byte;
 325:../src/drivers/mss_uart/mss_uart.c ****                 ++fill_size;
 326:../src/drivers/mss_uart/mss_uart.c ****                 char_idx++;
 327:../src/drivers/mss_uart/mss_uart.c ****                 /* Get the next data byte from the input buffer */
 328:../src/drivers/mss_uart/mss_uart.c ****                 data_byte = p_sz_string[char_idx];
 329:../src/drivers/mss_uart/mss_uart.c ****             }
 330:../src/drivers/mss_uart/mss_uart.c ****         }
 331:../src/drivers/mss_uart/mss_uart.c ****     }
 332:../src/drivers/mss_uart/mss_uart.c **** }
 333:../src/drivers/mss_uart/mss_uart.c **** 
 334:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 335:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 336:../src/drivers/mss_uart/mss_uart.c ****  */
 337:../src/drivers/mss_uart/mss_uart.c **** void
 338:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_irq_tx
 339:../src/drivers/mss_uart/mss_uart.c **** (
 340:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 341:../src/drivers/mss_uart/mss_uart.c ****     const uint8_t * pbuff,
 342:../src/drivers/mss_uart/mss_uart.c ****     uint32_t tx_size
 343:../src/drivers/mss_uart/mss_uart.c **** )
 344:../src/drivers/mss_uart/mss_uart.c **** {
 345:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 346:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ((uint8_t *)0));
 347:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0u);
 348:../src/drivers/mss_uart/mss_uart.c **** 
 349:../src/drivers/mss_uart/mss_uart.c ****     if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
 350:../src/drivers/mss_uart/mss_uart.c ****       ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
 351:../src/drivers/mss_uart/mss_uart.c ****     {
 352:../src/drivers/mss_uart/mss_uart.c ****         /*Initialise the transmit info for the UART instance with the arguments.*/
 353:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buffer = pbuff;
 354:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buff_size = tx_size;
 355:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_idx = (uint16_t)0;
 356:../src/drivers/mss_uart/mss_uart.c **** 
 357:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 358:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 359:../src/drivers/mss_uart/mss_uart.c **** 
 360:../src/drivers/mss_uart/mss_uart.c ****         /* assign default handler for data transfer */
 361:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_handler = default_tx_handler;
 362:../src/drivers/mss_uart/mss_uart.c **** 
 363:../src/drivers/mss_uart/mss_uart.c ****         /* enables TX interrupt */
 364:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
 365:../src/drivers/mss_uart/mss_uart.c **** 
 366:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 367:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 368:../src/drivers/mss_uart/mss_uart.c ****     }
 369:../src/drivers/mss_uart/mss_uart.c **** }
 370:../src/drivers/mss_uart/mss_uart.c **** 
 371:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 372:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 373:../src/drivers/mss_uart/mss_uart.c ****  */
 374:../src/drivers/mss_uart/mss_uart.c **** int8_t
 375:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_tx_complete
 376:../src/drivers/mss_uart/mss_uart.c **** (
 377:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
 378:../src/drivers/mss_uart/mss_uart.c **** )
 379:../src/drivers/mss_uart/mss_uart.c **** {
 380:../src/drivers/mss_uart/mss_uart.c ****     int8_t ret_value = 0;
 381:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 382:../src/drivers/mss_uart/mss_uart.c **** 
 383:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 384:../src/drivers/mss_uart/mss_uart.c **** 
 385:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 386:../src/drivers/mss_uart/mss_uart.c ****     {
 387:../src/drivers/mss_uart/mss_uart.c ****         /* Read the Line Status Register and update the sticky record. */
 388:../src/drivers/mss_uart/mss_uart.c ****         status = this_uart->hw_reg->LSR;
 389:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 390:../src/drivers/mss_uart/mss_uart.c **** 
 391:../src/drivers/mss_uart/mss_uart.c ****         if((TX_COMPLETE == this_uart->tx_buff_size) &&
 392:../src/drivers/mss_uart/mss_uart.c ****            ((status & MSS_UART_TEMT) != 0u))
 393:../src/drivers/mss_uart/mss_uart.c ****         {
 394:../src/drivers/mss_uart/mss_uart.c ****             ret_value = (int8_t)1;
 395:../src/drivers/mss_uart/mss_uart.c ****         }
 396:../src/drivers/mss_uart/mss_uart.c ****     }
 397:../src/drivers/mss_uart/mss_uart.c ****     return ret_value;
 398:../src/drivers/mss_uart/mss_uart.c **** }
 399:../src/drivers/mss_uart/mss_uart.c **** 
 400:../src/drivers/mss_uart/mss_uart.c **** 
 401:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 402:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 403:../src/drivers/mss_uart/mss_uart.c ****  */
 404:../src/drivers/mss_uart/mss_uart.c **** size_t
 405:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_get_rx
 406:../src/drivers/mss_uart/mss_uart.c **** (
 407:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 408:../src/drivers/mss_uart/mss_uart.c ****     uint8_t * rx_buff,
 409:../src/drivers/mss_uart/mss_uart.c ****     size_t buff_size
 410:../src/drivers/mss_uart/mss_uart.c **** )
 411:../src/drivers/mss_uart/mss_uart.c **** {
 412:../src/drivers/mss_uart/mss_uart.c ****     size_t rx_size = 0u;
 413:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 414:../src/drivers/mss_uart/mss_uart.c **** 
 415:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 416:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(rx_buff != ((uint8_t *)0));
 417:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(buff_size > 0u);
 418:../src/drivers/mss_uart/mss_uart.c **** 
 419:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 420:../src/drivers/mss_uart/mss_uart.c ****        (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
 421:../src/drivers/mss_uart/mss_uart.c ****     {
 422:../src/drivers/mss_uart/mss_uart.c ****         status = this_uart->hw_reg->LSR;
 423:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 424:../src/drivers/mss_uart/mss_uart.c **** 
 425:../src/drivers/mss_uart/mss_uart.c ****         while(((status & MSS_UART_DATA_READY) != 0u) &&
 426:../src/drivers/mss_uart/mss_uart.c ****               (rx_size < buff_size))
 427:../src/drivers/mss_uart/mss_uart.c ****         {
 428:../src/drivers/mss_uart/mss_uart.c ****             rx_buff[rx_size] = this_uart->hw_reg->RBR;
 429:../src/drivers/mss_uart/mss_uart.c ****             ++rx_size;
 430:../src/drivers/mss_uart/mss_uart.c ****             status = this_uart->hw_reg->LSR;
 431:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 432:../src/drivers/mss_uart/mss_uart.c ****         }
 433:../src/drivers/mss_uart/mss_uart.c ****     }
 434:../src/drivers/mss_uart/mss_uart.c ****     return rx_size;
 435:../src/drivers/mss_uart/mss_uart.c **** }
 436:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 437:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 438:../src/drivers/mss_uart/mss_uart.c ****  */
 439:../src/drivers/mss_uart/mss_uart.c **** void
 440:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_enable_irq
 441:../src/drivers/mss_uart/mss_uart.c **** (
 442:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 443:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_t irq_mask
 444:../src/drivers/mss_uart/mss_uart.c **** )
 445:../src/drivers/mss_uart/mss_uart.c **** {
 446:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 447:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_IRQ > irq_mask);
 448:../src/drivers/mss_uart/mss_uart.c **** 
 449:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) && 
 450:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_IRQ > irq_mask))
 451:../src/drivers/mss_uart/mss_uart.c ****     {
 452:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 453:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 454:../src/drivers/mss_uart/mss_uart.c **** 
 455:../src/drivers/mss_uart/mss_uart.c ****         /* irq_mask encoding: 1- enable
 456:../src/drivers/mss_uart/mss_uart.c ****          * bit 0 - Receive Data Available Interrupt
 457:../src/drivers/mss_uart/mss_uart.c ****          * bit 1 - Transmitter Holding  Register Empty Interrupt
 458:../src/drivers/mss_uart/mss_uart.c ****          * bit 2 - Receiver Line Status Interrupt
 459:../src/drivers/mss_uart/mss_uart.c ****          * bit 3 - Modem Status Interrupt
 460:../src/drivers/mss_uart/mss_uart.c ****          */
 461:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->IER |= (uint8_t)irq_mask & IIRF_MASK;
 462:../src/drivers/mss_uart/mss_uart.c **** 
 463:../src/drivers/mss_uart/mss_uart.c ****         /* 
 464:../src/drivers/mss_uart/mss_uart.c ****          * bit 4 - Receiver time-out interrupt
 465:../src/drivers/mss_uart/mss_uart.c ****          * bit 5 - NACK / ERR signal interrupt
 466:../src/drivers/mss_uart/mss_uart.c ****          * bit 6 - PID parity error interrupt 
 467:../src/drivers/mss_uart/mss_uart.c ****          * bit 7 - LIN break detection interrupt
 468:../src/drivers/mss_uart/mss_uart.c ****          * bit 8 - LIN Sync detection interrupt
 469:../src/drivers/mss_uart/mss_uart.c ****          */
 470:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->IEM |= (uint8_t)(((uint32_t)irq_mask & ~((uint32_t)IIRF_MASK)) >> 4u);
 471:../src/drivers/mss_uart/mss_uart.c **** 
 472:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 473:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 474:../src/drivers/mss_uart/mss_uart.c ****     }
 475:../src/drivers/mss_uart/mss_uart.c **** }
 476:../src/drivers/mss_uart/mss_uart.c **** 
 477:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 478:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 479:../src/drivers/mss_uart/mss_uart.c ****  */
 480:../src/drivers/mss_uart/mss_uart.c **** void
 481:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_disable_irq
 482:../src/drivers/mss_uart/mss_uart.c **** (
 483:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 484:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_t irq_mask
 485:../src/drivers/mss_uart/mss_uart.c **** )
 486:../src/drivers/mss_uart/mss_uart.c **** {
 487:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 488:../src/drivers/mss_uart/mss_uart.c **** 
 489:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 490:../src/drivers/mss_uart/mss_uart.c ****     {
 491:../src/drivers/mss_uart/mss_uart.c ****         /* irq_mask encoding: 1 - disable
 492:../src/drivers/mss_uart/mss_uart.c ****          * bit 0 - Receive Data Available Interrupt
 493:../src/drivers/mss_uart/mss_uart.c ****          * bit 1 - Transmitter Holding  Register Empty Interrupt
 494:../src/drivers/mss_uart/mss_uart.c ****          * bit 2 - Receiver Line Status Interrupt
 495:../src/drivers/mss_uart/mss_uart.c ****          * bit 3 - Modem Status Interrupt
 496:../src/drivers/mss_uart/mss_uart.c ****          */
 497:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->IER &= ((uint8_t)(~((uint32_t)irq_mask & (uint32_t)IIRF_MASK)));
 498:../src/drivers/mss_uart/mss_uart.c **** 
 499:../src/drivers/mss_uart/mss_uart.c ****         /* 
 500:../src/drivers/mss_uart/mss_uart.c ****          * bit 4 - Receiver time-out interrupt
 501:../src/drivers/mss_uart/mss_uart.c ****          * bit 5 - NACK / ERR signal interrupt
 502:../src/drivers/mss_uart/mss_uart.c ****          * bit 6 - PID parity error interrupt 
 503:../src/drivers/mss_uart/mss_uart.c ****          * bit 7 - LIN break detection interrupt
 504:../src/drivers/mss_uart/mss_uart.c ****          * bit 8 - LIN Sync detection interrupt
 505:../src/drivers/mss_uart/mss_uart.c ****          */
 506:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->IEM |= (uint8_t)(~(((uint32_t)irq_mask & ~((uint32_t)IIRF_MASK)) >> 8u))
 507:../src/drivers/mss_uart/mss_uart.c **** 
 508:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 509:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 510:../src/drivers/mss_uart/mss_uart.c **** 
 511:../src/drivers/mss_uart/mss_uart.c ****         if(irq_mask == IIRF_MASK)
 512:../src/drivers/mss_uart/mss_uart.c ****         {
 513:../src/drivers/mss_uart/mss_uart.c ****             /* Disable UART instance interrupt in Cortex-M3 NVIC. */
 514:../src/drivers/mss_uart/mss_uart.c ****             NVIC_DisableIRQ(this_uart->irqn);
 515:../src/drivers/mss_uart/mss_uart.c **** 
 516:../src/drivers/mss_uart/mss_uart.c ****         }
 517:../src/drivers/mss_uart/mss_uart.c ****     }
 518:../src/drivers/mss_uart/mss_uart.c **** }
 519:../src/drivers/mss_uart/mss_uart.c **** 
 520:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 521:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 522:../src/drivers/mss_uart/mss_uart.c ****  */
 523:../src/drivers/mss_uart/mss_uart.c **** void
 524:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_rx_handler
 525:../src/drivers/mss_uart/mss_uart.c **** (
 526:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t *       this_uart,
 527:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t      handler,
 528:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_rx_trig_level_t    trigger_level
 529:../src/drivers/mss_uart/mss_uart.c **** )
 530:../src/drivers/mss_uart/mss_uart.c **** {
 531:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 532:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER );
 533:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
 534:../src/drivers/mss_uart/mss_uart.c **** 
 535:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 536:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER) &&
 537:../src/drivers/mss_uart/mss_uart.c ****        (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
 538:../src/drivers/mss_uart/mss_uart.c ****     {
 539:../src/drivers/mss_uart/mss_uart.c ****         this_uart->rx_handler = handler;
 540:../src/drivers/mss_uart/mss_uart.c **** 
 541:../src/drivers/mss_uart/mss_uart.c ****         /* Set the receive interrupt trigger level. */
 542:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
 543:../src/drivers/mss_uart/mss_uart.c ****                                  (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
 544:../src/drivers/mss_uart/mss_uart.c ****                                  (uint8_t)trigger_level;
 545:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 546:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 547:../src/drivers/mss_uart/mss_uart.c **** 
 548:../src/drivers/mss_uart/mss_uart.c ****         /* Enable receive interrupt. */
 549:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
 550:../src/drivers/mss_uart/mss_uart.c **** 
 551:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 552:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 553:../src/drivers/mss_uart/mss_uart.c ****     }
 554:../src/drivers/mss_uart/mss_uart.c **** }
 555:../src/drivers/mss_uart/mss_uart.c **** 
 556:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 557:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 558:../src/drivers/mss_uart/mss_uart.c ****  */
 559:../src/drivers/mss_uart/mss_uart.c **** void
 560:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_loopback
 561:../src/drivers/mss_uart/mss_uart.c **** (
 562:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t *   this_uart,
 563:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_loopback_t     loopback
 564:../src/drivers/mss_uart/mss_uart.c **** )
 565:../src/drivers/mss_uart/mss_uart.c **** {
 566:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 567:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_LOOPBACK > loopback);
 568:../src/drivers/mss_uart/mss_uart.c **** 
 569:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) ||
 570:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_LOOPBACK > loopback))
 571:../src/drivers/mss_uart/mss_uart.c ****     {
 572:../src/drivers/mss_uart/mss_uart.c ****         switch(loopback)
 573:../src/drivers/mss_uart/mss_uart.c ****         {
 574:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_LOCAL_LOOPBACK_OFF:
 575:../src/drivers/mss_uart/mss_uart.c ****                 /* Disable local loopback */
 576:../src/drivers/mss_uart/mss_uart.c ****                 clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
 577:../src/drivers/mss_uart/mss_uart.c ****                 break;
 578:../src/drivers/mss_uart/mss_uart.c ****                 
 579:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_LOCAL_LOOPBACK_ON:
 580:../src/drivers/mss_uart/mss_uart.c ****                 /* Enable local loopback */
 581:../src/drivers/mss_uart/mss_uart.c ****                 set_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
 582:../src/drivers/mss_uart/mss_uart.c ****                 break;
 583:../src/drivers/mss_uart/mss_uart.c ****             
 584:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_REMOTE_LOOPBACK_OFF:
 585:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_AUTO_ECHO_OFF:
 586:../src/drivers/mss_uart/mss_uart.c ****                 /* Disable remote loopback & automatic echo*/
 587:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->MCR &= ~RLOOP_MASK;
 588:../src/drivers/mss_uart/mss_uart.c ****                 break;
 589:../src/drivers/mss_uart/mss_uart.c ****             
 590:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_REMOTE_LOOPBACK_ON:
 591:../src/drivers/mss_uart/mss_uart.c ****                 /* Enable remote loopback */
 592:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->MCR |= (1u << RLOOP);
 593:../src/drivers/mss_uart/mss_uart.c ****                 break;
 594:../src/drivers/mss_uart/mss_uart.c ****                 
 595:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_AUTO_ECHO_ON:
 596:../src/drivers/mss_uart/mss_uart.c ****                 /* Enable automatic echo */
 597:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->MCR |= (1u << ECHO);
 598:../src/drivers/mss_uart/mss_uart.c ****                 break;
 599:../src/drivers/mss_uart/mss_uart.c ****                 
 600:../src/drivers/mss_uart/mss_uart.c ****             case MSS_UART_INVALID_LOOPBACK:
 601:../src/drivers/mss_uart/mss_uart.c ****                 /* Fall through to default. */
 602:../src/drivers/mss_uart/mss_uart.c ****             default:
 603:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(0);
 604:../src/drivers/mss_uart/mss_uart.c ****                 break;
 605:../src/drivers/mss_uart/mss_uart.c ****         }
 606:../src/drivers/mss_uart/mss_uart.c ****     }
 607:../src/drivers/mss_uart/mss_uart.c **** }
 608:../src/drivers/mss_uart/mss_uart.c **** 
 609:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 610:../src/drivers/mss_uart/mss_uart.c ****  * UART0 interrupt service routine.
 611:../src/drivers/mss_uart/mss_uart.c ****  * UART0_IRQHandler is included within the Cortex-M3 vector table as part of the
 612:../src/drivers/mss_uart/mss_uart.c ****  * Fusion 2 CMSIS.
 613:../src/drivers/mss_uart/mss_uart.c ****  */
 614:../src/drivers/mss_uart/mss_uart.c **** #if defined(__GNUC__)
 615:../src/drivers/mss_uart/mss_uart.c **** __attribute__((__interrupt__)) void UART0_IRQHandler(void)
 616:../src/drivers/mss_uart/mss_uart.c **** #else
 617:../src/drivers/mss_uart/mss_uart.c **** void UART0_IRQHandler(void)
 618:../src/drivers/mss_uart/mss_uart.c **** #endif
 619:../src/drivers/mss_uart/mss_uart.c **** {
 620:../src/drivers/mss_uart/mss_uart.c ****     MSS_UART_isr(&g_mss_uart0);
 621:../src/drivers/mss_uart/mss_uart.c **** }
 622:../src/drivers/mss_uart/mss_uart.c **** 
 623:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 624:../src/drivers/mss_uart/mss_uart.c ****  * UART1 interrupt service routine.
 625:../src/drivers/mss_uart/mss_uart.c ****  * UART2_IRQHandler is included within the Cortex-M3 vector table as part of the
 626:../src/drivers/mss_uart/mss_uart.c ****  * Fusion 2 CMSIS.
 627:../src/drivers/mss_uart/mss_uart.c ****  */
 628:../src/drivers/mss_uart/mss_uart.c **** #if defined(__GNUC__)
 629:../src/drivers/mss_uart/mss_uart.c **** __attribute__((__interrupt__)) void UART1_IRQHandler(void)
 630:../src/drivers/mss_uart/mss_uart.c **** #else
 631:../src/drivers/mss_uart/mss_uart.c **** void UART1_IRQHandler(void)
 632:../src/drivers/mss_uart/mss_uart.c **** #endif
 633:../src/drivers/mss_uart/mss_uart.c **** {
 634:../src/drivers/mss_uart/mss_uart.c ****     MSS_UART_isr(&g_mss_uart1);
 635:../src/drivers/mss_uart/mss_uart.c **** }
 636:../src/drivers/mss_uart/mss_uart.c **** 
 637:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 638:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 639:../src/drivers/mss_uart/mss_uart.c ****  */
 640:../src/drivers/mss_uart/mss_uart.c **** void
 641:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_rxstatus_handler
 642:../src/drivers/mss_uart/mss_uart.c **** (
 643:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 644:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 645:../src/drivers/mss_uart/mss_uart.c **** )
 646:../src/drivers/mss_uart/mss_uart.c **** {
 647:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 648:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 649:../src/drivers/mss_uart/mss_uart.c **** 
 650:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 651:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
 652:../src/drivers/mss_uart/mss_uart.c ****     {
 653:../src/drivers/mss_uart/mss_uart.c ****         this_uart->linests_handler = handler;
 654:../src/drivers/mss_uart/mss_uart.c **** 
 655:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 656:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 657:../src/drivers/mss_uart/mss_uart.c **** 
 658:../src/drivers/mss_uart/mss_uart.c ****         /* Enable receiver line status interrupt. */
 659:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IER,ELSI);
 660:../src/drivers/mss_uart/mss_uart.c **** 
 661:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 662:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 663:../src/drivers/mss_uart/mss_uart.c ****     }
 664:../src/drivers/mss_uart/mss_uart.c **** }
 665:../src/drivers/mss_uart/mss_uart.c **** 
 666:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 667:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 668:../src/drivers/mss_uart/mss_uart.c ****  */
 669:../src/drivers/mss_uart/mss_uart.c **** void
 670:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_tx_handler
 671:../src/drivers/mss_uart/mss_uart.c **** (
 672:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 673:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 674:../src/drivers/mss_uart/mss_uart.c **** )
 675:../src/drivers/mss_uart/mss_uart.c **** {
 676:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 677:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 678:../src/drivers/mss_uart/mss_uart.c **** 
 679:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 680:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
 681:../src/drivers/mss_uart/mss_uart.c ****     {
 682:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_handler = handler;
 683:../src/drivers/mss_uart/mss_uart.c **** 
 684:../src/drivers/mss_uart/mss_uart.c ****         /* Make TX buffer info invalid */
 685:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buffer = (const uint8_t *)0;
 686:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buff_size = 0u;
 687:../src/drivers/mss_uart/mss_uart.c **** 
 688:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 689:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 690:../src/drivers/mss_uart/mss_uart.c **** 
 691:../src/drivers/mss_uart/mss_uart.c ****         /* Enable transmitter holding register Empty interrupt. */
 692:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
 693:../src/drivers/mss_uart/mss_uart.c **** 
 694:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 695:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 696:../src/drivers/mss_uart/mss_uart.c ****     }
 697:../src/drivers/mss_uart/mss_uart.c **** }
 698:../src/drivers/mss_uart/mss_uart.c **** 
 699:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 700:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 701:../src/drivers/mss_uart/mss_uart.c ****  */
 702:../src/drivers/mss_uart/mss_uart.c **** void
 703:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_modemstatus_handler
 704:../src/drivers/mss_uart/mss_uart.c **** (
 705:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 706:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 707:../src/drivers/mss_uart/mss_uart.c **** )
 708:../src/drivers/mss_uart/mss_uart.c **** {
 709:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 710:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 711:../src/drivers/mss_uart/mss_uart.c **** 
 712:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 713:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
 714:../src/drivers/mss_uart/mss_uart.c ****     {
 715:../src/drivers/mss_uart/mss_uart.c ****         this_uart->modemsts_handler = handler;
 716:../src/drivers/mss_uart/mss_uart.c **** 
 717:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 718:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(this_uart->irqn);
 719:../src/drivers/mss_uart/mss_uart.c **** 
 720:../src/drivers/mss_uart/mss_uart.c ****         /* Enable modem status interrupt. */
 721:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IER,EDSSI);
 722:../src/drivers/mss_uart/mss_uart.c **** 
 723:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 724:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 725:../src/drivers/mss_uart/mss_uart.c ****     }
 726:../src/drivers/mss_uart/mss_uart.c **** }
 727:../src/drivers/mss_uart/mss_uart.c **** 
 728:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 729:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 730:../src/drivers/mss_uart/mss_uart.c ****  */
 731:../src/drivers/mss_uart/mss_uart.c **** size_t
 732:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_fill_tx_fifo
 733:../src/drivers/mss_uart/mss_uart.c **** (
 734:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 735:../src/drivers/mss_uart/mss_uart.c ****     const uint8_t * tx_buffer,
 736:../src/drivers/mss_uart/mss_uart.c ****     size_t tx_size
 737:../src/drivers/mss_uart/mss_uart.c **** )
 738:../src/drivers/mss_uart/mss_uart.c **** {
 739:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 740:../src/drivers/mss_uart/mss_uart.c ****     size_t size_sent = 0u;
 741:../src/drivers/mss_uart/mss_uart.c **** 
 742:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 743:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_buffer != ( (uint8_t *)0));
 744:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0);
 745:../src/drivers/mss_uart/mss_uart.c **** 
 746:../src/drivers/mss_uart/mss_uart.c ****     /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
 747:../src/drivers/mss_uart/mss_uart.c ****      * buffer has been written. */
 748:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 749:../src/drivers/mss_uart/mss_uart.c ****        (tx_buffer != ((uint8_t *)0))   &&
 750:../src/drivers/mss_uart/mss_uart.c ****        (tx_size > 0u))
 751:../src/drivers/mss_uart/mss_uart.c ****     {
 752:../src/drivers/mss_uart/mss_uart.c ****         status = this_uart->hw_reg->LSR;
 753:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 754:../src/drivers/mss_uart/mss_uart.c **** 
 755:../src/drivers/mss_uart/mss_uart.c ****         if(status & MSS_UART_THRE)
 756:../src/drivers/mss_uart/mss_uart.c ****         {
 757:../src/drivers/mss_uart/mss_uart.c ****             uint32_t fill_size = TX_FIFO_SIZE;
 758:../src/drivers/mss_uart/mss_uart.c **** 
 759:../src/drivers/mss_uart/mss_uart.c ****             if(tx_size < TX_FIFO_SIZE)
 760:../src/drivers/mss_uart/mss_uart.c ****             {
 761:../src/drivers/mss_uart/mss_uart.c ****                 fill_size = tx_size;
 762:../src/drivers/mss_uart/mss_uart.c ****             }
 763:../src/drivers/mss_uart/mss_uart.c ****             /* Fill up FIFO */
 764:../src/drivers/mss_uart/mss_uart.c ****             for(size_sent = 0u; size_sent < fill_size; ++size_sent)
 765:../src/drivers/mss_uart/mss_uart.c ****             {
 766:../src/drivers/mss_uart/mss_uart.c **** 
 767:../src/drivers/mss_uart/mss_uart.c ****                 /* Send next character in the buffer. */
 768:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->THR = tx_buffer[size_sent];
 769:../src/drivers/mss_uart/mss_uart.c ****             }
 770:../src/drivers/mss_uart/mss_uart.c ****         }
 771:../src/drivers/mss_uart/mss_uart.c ****     }
 772:../src/drivers/mss_uart/mss_uart.c ****     return size_sent;
 773:../src/drivers/mss_uart/mss_uart.c **** }
 774:../src/drivers/mss_uart/mss_uart.c **** 
 775:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 776:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 777:../src/drivers/mss_uart/mss_uart.c ****  */
 778:../src/drivers/mss_uart/mss_uart.c **** uint8_t
 779:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_get_rx_status
 780:../src/drivers/mss_uart/mss_uart.c **** (
 781:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
 782:../src/drivers/mss_uart/mss_uart.c **** )
 783:../src/drivers/mss_uart/mss_uart.c **** {
 784:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = MSS_UART_INVALID_PARAM;
 785:../src/drivers/mss_uart/mss_uart.c **** 
 786:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 787:../src/drivers/mss_uart/mss_uart.c **** 
 788:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 789:../src/drivers/mss_uart/mss_uart.c ****     {
 790:../src/drivers/mss_uart/mss_uart.c ****         /*
 791:../src/drivers/mss_uart/mss_uart.c ****          * Extract UART receive error status.
 792:../src/drivers/mss_uart/mss_uart.c ****          * Bit 1 - Overflow error status
 793:../src/drivers/mss_uart/mss_uart.c ****          * Bit 2 - Parity error status
 794:../src/drivers/mss_uart/mss_uart.c ****          * Bit 3 - Frame error status
 795:../src/drivers/mss_uart/mss_uart.c ****          * Bit 4 - Break interrupt indicator
 796:../src/drivers/mss_uart/mss_uart.c ****          * Bit 7 - FIFO data error status
 797:../src/drivers/mss_uart/mss_uart.c ****          */
 798:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= (this_uart->hw_reg->LSR);
 799:../src/drivers/mss_uart/mss_uart.c ****         status = (this_uart->status & STATUS_ERROR_MASK);
 800:../src/drivers/mss_uart/mss_uart.c ****         /* Clear the sticky status after reading */
 801:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status = 0u;
 802:../src/drivers/mss_uart/mss_uart.c ****     }
 803:../src/drivers/mss_uart/mss_uart.c ****     return status;
 804:../src/drivers/mss_uart/mss_uart.c **** }
 805:../src/drivers/mss_uart/mss_uart.c **** 
 806:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 807:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 808:../src/drivers/mss_uart/mss_uart.c ****  */
 809:../src/drivers/mss_uart/mss_uart.c **** uint8_t
 810:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_get_modem_status
 811:../src/drivers/mss_uart/mss_uart.c **** (
 812:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
 813:../src/drivers/mss_uart/mss_uart.c **** )
 814:../src/drivers/mss_uart/mss_uart.c **** {
 815:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = MSS_UART_INVALID_PARAM;
 816:../src/drivers/mss_uart/mss_uart.c **** 
 817:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 818:../src/drivers/mss_uart/mss_uart.c **** 
 819:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 820:../src/drivers/mss_uart/mss_uart.c ****     {
 821:../src/drivers/mss_uart/mss_uart.c ****         /*
 822:../src/drivers/mss_uart/mss_uart.c ****          * Extract UART modem status and place in lower bits of "status".
 823:../src/drivers/mss_uart/mss_uart.c ****          * Bit 0 - Delta Clear to Send Indicator
 824:../src/drivers/mss_uart/mss_uart.c ****          * Bit 1 - Delta Clear to Receive Indicator
 825:../src/drivers/mss_uart/mss_uart.c ****          * Bit 2 - Trailing edge of Ring Indicator detector
 826:../src/drivers/mss_uart/mss_uart.c ****          * Bit 3 - Delta Data Carrier Detect indicator
 827:../src/drivers/mss_uart/mss_uart.c ****          * Bit 4 - Clear To Send
 828:../src/drivers/mss_uart/mss_uart.c ****          * Bit 5 - Data Set Ready
 829:../src/drivers/mss_uart/mss_uart.c ****          * Bit 6 - Ring Indicator
 830:../src/drivers/mss_uart/mss_uart.c ****          * Bit 7 - Data Carrier Detect
 831:../src/drivers/mss_uart/mss_uart.c ****          */
 832:../src/drivers/mss_uart/mss_uart.c ****         status = this_uart->hw_reg->MSR;
 833:../src/drivers/mss_uart/mss_uart.c ****     }
 834:../src/drivers/mss_uart/mss_uart.c ****     return status;
 835:../src/drivers/mss_uart/mss_uart.c **** }
 836:../src/drivers/mss_uart/mss_uart.c **** 
 837:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 838:../src/drivers/mss_uart/mss_uart.c ****  * MSS_UART_get_tx_status.
 839:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 840:../src/drivers/mss_uart/mss_uart.c ****  */
 841:../src/drivers/mss_uart/mss_uart.c **** uint8_t
 842:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_get_tx_status
 843:../src/drivers/mss_uart/mss_uart.c **** (
 844:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
 845:../src/drivers/mss_uart/mss_uart.c **** )
 846:../src/drivers/mss_uart/mss_uart.c **** {
 847:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = MSS_UART_TX_BUSY;
 848:../src/drivers/mss_uart/mss_uart.c **** 
 849:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 850:../src/drivers/mss_uart/mss_uart.c **** 
 851:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 852:../src/drivers/mss_uart/mss_uart.c ****     {
 853:../src/drivers/mss_uart/mss_uart.c ****         /* Read the Line Status Register and update the sticky record. */
 854:../src/drivers/mss_uart/mss_uart.c ****         status = this_uart->hw_reg->LSR;
 855:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 856:../src/drivers/mss_uart/mss_uart.c ****         /*
 857:../src/drivers/mss_uart/mss_uart.c ****          * Extract the transmit status bits from the UART's Line Status Register.
 858:../src/drivers/mss_uart/mss_uart.c ****          * Bit 5 - Transmitter Holding Register/FIFO Empty (THRE) status. (If = 1, TX FIFO is empty
 859:../src/drivers/mss_uart/mss_uart.c ****          * Bit 6 - Transmitter Empty (TEMT) status. (If = 1, both TX FIFO and shift register are em
 860:../src/drivers/mss_uart/mss_uart.c ****          */
 861:../src/drivers/mss_uart/mss_uart.c ****         status &= (MSS_UART_THRE | MSS_UART_TEMT);
 862:../src/drivers/mss_uart/mss_uart.c ****     }
 863:../src/drivers/mss_uart/mss_uart.c ****     return status;
 864:../src/drivers/mss_uart/mss_uart.c **** }
 865:../src/drivers/mss_uart/mss_uart.c **** 
 866:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 867:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 868:../src/drivers/mss_uart/mss_uart.c ****  */
 869:../src/drivers/mss_uart/mss_uart.c **** void
 870:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_break
 871:../src/drivers/mss_uart/mss_uart.c **** (
 872:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
 873:../src/drivers/mss_uart/mss_uart.c **** )
 874:../src/drivers/mss_uart/mss_uart.c **** {
 875:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 876:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 877:../src/drivers/mss_uart/mss_uart.c ****     {
 878:../src/drivers/mss_uart/mss_uart.c ****         /* set break charecter on Tx line */
 879:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->LCR,SB);
 880:../src/drivers/mss_uart/mss_uart.c ****     }
 881:../src/drivers/mss_uart/mss_uart.c **** }
 882:../src/drivers/mss_uart/mss_uart.c **** 
 883:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 884:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 885:../src/drivers/mss_uart/mss_uart.c ****  */
 886:../src/drivers/mss_uart/mss_uart.c **** void
 887:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_clear_break
 888:../src/drivers/mss_uart/mss_uart.c **** (
 889:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
 890:../src/drivers/mss_uart/mss_uart.c **** )
 891:../src/drivers/mss_uart/mss_uart.c **** {
 892:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 893:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 894:../src/drivers/mss_uart/mss_uart.c ****     {
 895:../src/drivers/mss_uart/mss_uart.c ****         /* remove break charecter from Tx line */
 896:../src/drivers/mss_uart/mss_uart.c ****         clear_bit_reg8(&this_uart->hw_reg->LCR,SB);
 897:../src/drivers/mss_uart/mss_uart.c ****     }
 898:../src/drivers/mss_uart/mss_uart.c **** }
 899:../src/drivers/mss_uart/mss_uart.c **** 
 900:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 901:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 902:../src/drivers/mss_uart/mss_uart.c ****  */
 903:../src/drivers/mss_uart/mss_uart.c **** void
 904:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_pidpei_handler
 905:../src/drivers/mss_uart/mss_uart.c **** (
 906:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 907:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 908:../src/drivers/mss_uart/mss_uart.c **** )
 909:../src/drivers/mss_uart/mss_uart.c **** {
 910:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 911:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 912:../src/drivers/mss_uart/mss_uart.c **** 
 913:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 914:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
 915:../src/drivers/mss_uart/mss_uart.c ****     {
 916:../src/drivers/mss_uart/mss_uart.c ****         this_uart->pid_pei_handler = handler;
 917:../src/drivers/mss_uart/mss_uart.c **** 
 918:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 919:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ( this_uart->irqn );
 920:../src/drivers/mss_uart/mss_uart.c **** 
 921:../src/drivers/mss_uart/mss_uart.c ****         /* Enable PID parity error interrupt. */
 922:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IEM,EPID_PEI);
 923:../src/drivers/mss_uart/mss_uart.c **** 
 924:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 925:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 926:../src/drivers/mss_uart/mss_uart.c ****     }
 927:../src/drivers/mss_uart/mss_uart.c **** }
 928:../src/drivers/mss_uart/mss_uart.c **** 
 929:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 930:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 931:../src/drivers/mss_uart/mss_uart.c ****  */
 932:../src/drivers/mss_uart/mss_uart.c **** void
 933:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_linbreak_handler
 934:../src/drivers/mss_uart/mss_uart.c **** (
 935:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 936:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 937:../src/drivers/mss_uart/mss_uart.c **** )
 938:../src/drivers/mss_uart/mss_uart.c **** {
 939:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 940:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 941:../src/drivers/mss_uart/mss_uart.c **** 
 942:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 943:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
 944:../src/drivers/mss_uart/mss_uart.c ****     {
 945:../src/drivers/mss_uart/mss_uart.c ****         this_uart->break_handler = handler;
 946:../src/drivers/mss_uart/mss_uart.c **** 
 947:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 948:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ( this_uart->irqn );
 949:../src/drivers/mss_uart/mss_uart.c **** 
 950:../src/drivers/mss_uart/mss_uart.c ****         /* Enable LIN break detection interrupt. */
 951:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IEM,ELINBI);
 952:../src/drivers/mss_uart/mss_uart.c **** 
 953:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 954:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 955:../src/drivers/mss_uart/mss_uart.c ****     }
 956:../src/drivers/mss_uart/mss_uart.c **** }
 957:../src/drivers/mss_uart/mss_uart.c **** 
 958:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 959:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 960:../src/drivers/mss_uart/mss_uart.c ****  */
 961:../src/drivers/mss_uart/mss_uart.c **** void
 962:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_linsync_handler
 963:../src/drivers/mss_uart/mss_uart.c **** (
 964:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 965:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 966:../src/drivers/mss_uart/mss_uart.c **** )
 967:../src/drivers/mss_uart/mss_uart.c **** {
 968:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 969:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 970:../src/drivers/mss_uart/mss_uart.c **** 
 971:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 972:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
 973:../src/drivers/mss_uart/mss_uart.c ****     {
 974:../src/drivers/mss_uart/mss_uart.c ****         this_uart->sync_handler = handler;
 975:../src/drivers/mss_uart/mss_uart.c **** 
 976:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
 977:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ( this_uart->irqn );
 978:../src/drivers/mss_uart/mss_uart.c **** 
 979:../src/drivers/mss_uart/mss_uart.c ****         /* Enable LIN sync detection interrupt. */
 980:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IEM,ELINSI);
 981:../src/drivers/mss_uart/mss_uart.c **** 
 982:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
 983:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
 984:../src/drivers/mss_uart/mss_uart.c ****     }
 985:../src/drivers/mss_uart/mss_uart.c **** }
 986:../src/drivers/mss_uart/mss_uart.c **** 
 987:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 988:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
 989:../src/drivers/mss_uart/mss_uart.c ****  */
 990:../src/drivers/mss_uart/mss_uart.c **** void
 991:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_nack_handler
 992:../src/drivers/mss_uart/mss_uart.c **** (
 993:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
 994:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
 995:../src/drivers/mss_uart/mss_uart.c **** )
 996:../src/drivers/mss_uart/mss_uart.c **** {
 997:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 998:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 999:../src/drivers/mss_uart/mss_uart.c **** 
1000:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
1001:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
1002:../src/drivers/mss_uart/mss_uart.c ****     {
1003:../src/drivers/mss_uart/mss_uart.c ****         this_uart->nack_handler = handler;
1004:../src/drivers/mss_uart/mss_uart.c **** 
1005:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
1006:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ( this_uart->irqn );
1007:../src/drivers/mss_uart/mss_uart.c **** 
1008:../src/drivers/mss_uart/mss_uart.c ****         /* Enable LIN sync detection interrupt. */
1009:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IEM,ENACKI);
1010:../src/drivers/mss_uart/mss_uart.c **** 
1011:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
1012:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
1013:../src/drivers/mss_uart/mss_uart.c ****     }
1014:../src/drivers/mss_uart/mss_uart.c **** }
1015:../src/drivers/mss_uart/mss_uart.c **** 
1016:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1017:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1018:../src/drivers/mss_uart/mss_uart.c ****  */
1019:../src/drivers/mss_uart/mss_uart.c **** void
1020:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_rx_timeout_handler
1021:../src/drivers/mss_uart/mss_uart.c **** (
1022:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1023:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_irq_handler_t handler
1024:../src/drivers/mss_uart/mss_uart.c **** )
1025:../src/drivers/mss_uart/mss_uart.c **** {
1026:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1027:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
1028:../src/drivers/mss_uart/mss_uart.c **** 
1029:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
1030:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER))
1031:../src/drivers/mss_uart/mss_uart.c ****     {
1032:../src/drivers/mss_uart/mss_uart.c ****         this_uart->rto_handler = handler;
1033:../src/drivers/mss_uart/mss_uart.c **** 
1034:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended interrupts */
1035:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ( this_uart->irqn );
1036:../src/drivers/mss_uart/mss_uart.c **** 
1037:../src/drivers/mss_uart/mss_uart.c ****         /* Enable receiver timeout interrupt. */
1038:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->IEM,ERTOI);
1039:../src/drivers/mss_uart/mss_uart.c **** 
1040:../src/drivers/mss_uart/mss_uart.c ****         /* Enable UART instance interrupt in Cortex-M3 NVIC. */
1041:../src/drivers/mss_uart/mss_uart.c ****         NVIC_EnableIRQ(this_uart->irqn);
1042:../src/drivers/mss_uart/mss_uart.c ****     }
1043:../src/drivers/mss_uart/mss_uart.c **** }
1044:../src/drivers/mss_uart/mss_uart.c **** 
1045:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1046:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1047:../src/drivers/mss_uart/mss_uart.c ****  */
1048:../src/drivers/mss_uart/mss_uart.c **** void 
1049:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_enable_half_duplex
1050:../src/drivers/mss_uart/mss_uart.c **** (
1051:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
1052:../src/drivers/mss_uart/mss_uart.c **** )
1053:../src/drivers/mss_uart/mss_uart.c **** {
1054:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1055:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1056:../src/drivers/mss_uart/mss_uart.c ****     {
1057:../src/drivers/mss_uart/mss_uart.c ****         /* enable single wire half-duplex mode */
1058:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
1059:../src/drivers/mss_uart/mss_uart.c ****     }
1060:../src/drivers/mss_uart/mss_uart.c **** }
1061:../src/drivers/mss_uart/mss_uart.c **** 
1062:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1063:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1064:../src/drivers/mss_uart/mss_uart.c ****  */
1065:../src/drivers/mss_uart/mss_uart.c **** void 
1066:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_disable_half_duplex
1067:../src/drivers/mss_uart/mss_uart.c **** (
1068:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
1069:../src/drivers/mss_uart/mss_uart.c **** )
1070:../src/drivers/mss_uart/mss_uart.c **** {
1071:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1072:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1073:../src/drivers/mss_uart/mss_uart.c ****     {
1074:../src/drivers/mss_uart/mss_uart.c ****         /* enable single wire half-duplex mode */
1075:../src/drivers/mss_uart/mss_uart.c ****         clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
1076:../src/drivers/mss_uart/mss_uart.c ****     }
1077:../src/drivers/mss_uart/mss_uart.c **** }
1078:../src/drivers/mss_uart/mss_uart.c **** 
1079:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1080:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1081:../src/drivers/mss_uart/mss_uart.c ****  */
1082:../src/drivers/mss_uart/mss_uart.c **** void
1083:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_rx_endian
1084:../src/drivers/mss_uart/mss_uart.c **** (
1085:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1086:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_endian_t endian    
1087:../src/drivers/mss_uart/mss_uart.c **** )
1088:../src/drivers/mss_uart/mss_uart.c **** {
1089:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1090:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
1091:../src/drivers/mss_uart/mss_uart.c **** 
1092:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) && 
1093:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
1094:../src/drivers/mss_uart/mss_uart.c ****     {
1095:../src/drivers/mss_uart/mss_uart.c ****         /* Configure MSB first / LSB first for receiver */
1096:../src/drivers/mss_uart/mss_uart.c ****         ((MSS_UART_LITTLEEND == endian) ? (clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX)) :
1097:../src/drivers/mss_uart/mss_uart.c ****                                           (set_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX)));
1098:../src/drivers/mss_uart/mss_uart.c ****     }
1099:../src/drivers/mss_uart/mss_uart.c **** }
1100:../src/drivers/mss_uart/mss_uart.c **** 
1101:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1102:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1103:../src/drivers/mss_uart/mss_uart.c ****  */
1104:../src/drivers/mss_uart/mss_uart.c **** void
1105:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_tx_endian
1106:../src/drivers/mss_uart/mss_uart.c **** (
1107:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1108:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_endian_t endian    
1109:../src/drivers/mss_uart/mss_uart.c **** )
1110:../src/drivers/mss_uart/mss_uart.c **** {
1111:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1112:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
1113:../src/drivers/mss_uart/mss_uart.c **** 
1114:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) && 
1115:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
1116:../src/drivers/mss_uart/mss_uart.c ****     {
1117:../src/drivers/mss_uart/mss_uart.c ****         /* Configure MSB first / LSB first for transmitter */
1118:../src/drivers/mss_uart/mss_uart.c ****         ((MSS_UART_LITTLEEND == endian) ? (clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX)) :
1119:../src/drivers/mss_uart/mss_uart.c ****                                           (set_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX)) ) ;
1120:../src/drivers/mss_uart/mss_uart.c ****     }
1121:../src/drivers/mss_uart/mss_uart.c **** }
1122:../src/drivers/mss_uart/mss_uart.c **** 
1123:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1124:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1125:../src/drivers/mss_uart/mss_uart.c ****  */
1126:../src/drivers/mss_uart/mss_uart.c **** void
1127:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_filter_length
1128:../src/drivers/mss_uart/mss_uart.c **** (
1129:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1130:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_filter_length_t length
1131:../src/drivers/mss_uart/mss_uart.c **** )
1132:../src/drivers/mss_uart/mss_uart.c **** {
1133:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1134:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_FILTER_LENGTH > length);
1135:../src/drivers/mss_uart/mss_uart.c ****     
1136:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) && 
1137:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_FILTER_LENGTH > length))
1138:../src/drivers/mss_uart/mss_uart.c ****     {
1139:../src/drivers/mss_uart/mss_uart.c ****         /* Configure glitch filter length */
1140:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->GFR = (uint8_t)length;
1141:../src/drivers/mss_uart/mss_uart.c ****     }
1142:../src/drivers/mss_uart/mss_uart.c **** }
1143:../src/drivers/mss_uart/mss_uart.c **** 
1144:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1145:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1146:../src/drivers/mss_uart/mss_uart.c ****  */
1147:../src/drivers/mss_uart/mss_uart.c **** void
1148:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_enable_afm
1149:../src/drivers/mss_uart/mss_uart.c **** (
1150:../src/drivers/mss_uart/mss_uart.c ****      mss_uart_instance_t * this_uart
1151:../src/drivers/mss_uart/mss_uart.c **** )
1152:../src/drivers/mss_uart/mss_uart.c **** {
1153:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1154:../src/drivers/mss_uart/mss_uart.c **** 
1155:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1156:../src/drivers/mss_uart/mss_uart.c ****     {
1157:../src/drivers/mss_uart/mss_uart.c ****         /* Disable RX FIFO till address flag with correct address is received */
1158:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
1159:../src/drivers/mss_uart/mss_uart.c ****     }
1160:../src/drivers/mss_uart/mss_uart.c **** }
1161:../src/drivers/mss_uart/mss_uart.c **** 
1162:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1163:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1164:../src/drivers/mss_uart/mss_uart.c ****  */
1165:../src/drivers/mss_uart/mss_uart.c **** void
1166:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_disable_afm
1167:../src/drivers/mss_uart/mss_uart.c **** (
1168:../src/drivers/mss_uart/mss_uart.c ****      mss_uart_instance_t * this_uart
1169:../src/drivers/mss_uart/mss_uart.c **** )
1170:../src/drivers/mss_uart/mss_uart.c **** {
1171:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1172:../src/drivers/mss_uart/mss_uart.c **** 
1173:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1174:../src/drivers/mss_uart/mss_uart.c ****     {
1175:../src/drivers/mss_uart/mss_uart.c ****         /* Enable RX FIFO irrespective of address flag and
1176:../src/drivers/mss_uart/mss_uart.c ****            correct address is received */
1177:../src/drivers/mss_uart/mss_uart.c ****         clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
1178:../src/drivers/mss_uart/mss_uart.c ****     }
1179:../src/drivers/mss_uart/mss_uart.c **** }
1180:../src/drivers/mss_uart/mss_uart.c **** 
1181:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1182:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1183:../src/drivers/mss_uart/mss_uart.c ****  */
1184:../src/drivers/mss_uart/mss_uart.c **** void
1185:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_enable_afclear
1186:../src/drivers/mss_uart/mss_uart.c **** (
1187:../src/drivers/mss_uart/mss_uart.c ****      mss_uart_instance_t * this_uart
1188:../src/drivers/mss_uart/mss_uart.c **** )
1189:../src/drivers/mss_uart/mss_uart.c **** {
1190:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1191:../src/drivers/mss_uart/mss_uart.c **** 
1192:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1193:../src/drivers/mss_uart/mss_uart.c ****     {
1194:../src/drivers/mss_uart/mss_uart.c ****         /* Enable address flag clearing */
1195:../src/drivers/mss_uart/mss_uart.c ****         /* Disable RX FIFO till another address flag with 
1196:../src/drivers/mss_uart/mss_uart.c ****            correct address is received */
1197:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM2,EAFC);
1198:../src/drivers/mss_uart/mss_uart.c ****     }
1199:../src/drivers/mss_uart/mss_uart.c **** }
1200:../src/drivers/mss_uart/mss_uart.c **** 
1201:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1202:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1203:../src/drivers/mss_uart/mss_uart.c ****  */
1204:../src/drivers/mss_uart/mss_uart.c **** void
1205:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_disable_afclear
1206:../src/drivers/mss_uart/mss_uart.c **** (
1207:../src/drivers/mss_uart/mss_uart.c ****      mss_uart_instance_t * this_uart
1208:../src/drivers/mss_uart/mss_uart.c **** )
1209:../src/drivers/mss_uart/mss_uart.c **** {
1210:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1211:../src/drivers/mss_uart/mss_uart.c **** 
1212:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1213:../src/drivers/mss_uart/mss_uart.c ****     {
1214:../src/drivers/mss_uart/mss_uart.c ****         /* Disable address flag clearing */
1215:../src/drivers/mss_uart/mss_uart.c ****         clear_bit_reg8(&this_uart->hw_reg->MM2,EAFC);
1216:../src/drivers/mss_uart/mss_uart.c ****     }
1217:../src/drivers/mss_uart/mss_uart.c **** }
1218:../src/drivers/mss_uart/mss_uart.c **** 
1219:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1220:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1221:../src/drivers/mss_uart/mss_uart.c ****  */
1222:../src/drivers/mss_uart/mss_uart.c **** void 
1223:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_enable_rx_timeout
1224:../src/drivers/mss_uart/mss_uart.c **** (
1225:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1226:../src/drivers/mss_uart/mss_uart.c ****     uint8_t timeout
1227:../src/drivers/mss_uart/mss_uart.c **** )
1228:../src/drivers/mss_uart/mss_uart.c **** {
1229:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1230:../src/drivers/mss_uart/mss_uart.c **** 
1231:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1232:../src/drivers/mss_uart/mss_uart.c ****     {
1233:../src/drivers/mss_uart/mss_uart.c ****         /* Load the receive timeout value */
1234:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->RTO = timeout;
1235:../src/drivers/mss_uart/mss_uart.c ****         /*Enable receiver time-out */
1236:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
1237:../src/drivers/mss_uart/mss_uart.c ****     }
1238:../src/drivers/mss_uart/mss_uart.c **** }
1239:../src/drivers/mss_uart/mss_uart.c **** 
1240:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1241:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1242:../src/drivers/mss_uart/mss_uart.c ****  */
1243:../src/drivers/mss_uart/mss_uart.c **** void 
1244:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_disable_rx_timeout
1245:../src/drivers/mss_uart/mss_uart.c **** (
1246:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
1247:../src/drivers/mss_uart/mss_uart.c **** )
1248:../src/drivers/mss_uart/mss_uart.c **** {
1249:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1250:../src/drivers/mss_uart/mss_uart.c **** 
1251:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1252:../src/drivers/mss_uart/mss_uart.c ****     {
1253:../src/drivers/mss_uart/mss_uart.c ****         /*Disable receiver time-out */
1254:../src/drivers/mss_uart/mss_uart.c ****         clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
1255:../src/drivers/mss_uart/mss_uart.c ****     }
1256:../src/drivers/mss_uart/mss_uart.c **** }
1257:../src/drivers/mss_uart/mss_uart.c **** 
1258:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1259:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1260:../src/drivers/mss_uart/mss_uart.c ****  */
1261:../src/drivers/mss_uart/mss_uart.c **** void 
1262:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_enable_tx_time_guard
1263:../src/drivers/mss_uart/mss_uart.c **** (
1264:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1265:../src/drivers/mss_uart/mss_uart.c ****     uint8_t timeguard
1266:../src/drivers/mss_uart/mss_uart.c **** )
1267:../src/drivers/mss_uart/mss_uart.c **** {
1268:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1269:../src/drivers/mss_uart/mss_uart.c **** 
1270:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1271:../src/drivers/mss_uart/mss_uart.c ****     {
1272:../src/drivers/mss_uart/mss_uart.c ****         /* Load the transmitter time guard value */
1273:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->TTG = timeguard;
1274:../src/drivers/mss_uart/mss_uart.c ****         /*Enable transmitter time guard */
1275:../src/drivers/mss_uart/mss_uart.c ****         set_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
1276:../src/drivers/mss_uart/mss_uart.c ****     }
1277:../src/drivers/mss_uart/mss_uart.c **** }
1278:../src/drivers/mss_uart/mss_uart.c **** 
1279:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1280:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1281:../src/drivers/mss_uart/mss_uart.c ****  */
1282:../src/drivers/mss_uart/mss_uart.c **** void 
1283:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_disable_tx_time_guard
1284:../src/drivers/mss_uart/mss_uart.c **** (
1285:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
1286:../src/drivers/mss_uart/mss_uart.c **** )
1287:../src/drivers/mss_uart/mss_uart.c **** {
1288:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1289:../src/drivers/mss_uart/mss_uart.c **** 
1290:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1291:../src/drivers/mss_uart/mss_uart.c ****     {
1292:../src/drivers/mss_uart/mss_uart.c ****         /*Disable transmitter time guard */
1293:../src/drivers/mss_uart/mss_uart.c ****         clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
1294:../src/drivers/mss_uart/mss_uart.c ****     }
1295:../src/drivers/mss_uart/mss_uart.c **** }
1296:../src/drivers/mss_uart/mss_uart.c **** 
1297:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1298:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1299:../src/drivers/mss_uart/mss_uart.c ****  */
1300:../src/drivers/mss_uart/mss_uart.c **** void
1301:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_address
1302:../src/drivers/mss_uart/mss_uart.c **** (
1303:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1304:../src/drivers/mss_uart/mss_uart.c ****     uint8_t address
1305:../src/drivers/mss_uart/mss_uart.c **** )
1306:../src/drivers/mss_uart/mss_uart.c **** {
1307:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1308:../src/drivers/mss_uart/mss_uart.c **** 
1309:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1310:../src/drivers/mss_uart/mss_uart.c ****     {
1311:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->ADR = address;
1312:../src/drivers/mss_uart/mss_uart.c ****     }
1313:../src/drivers/mss_uart/mss_uart.c **** }
1314:../src/drivers/mss_uart/mss_uart.c **** 
1315:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1316:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1317:../src/drivers/mss_uart/mss_uart.c ****  */
1318:../src/drivers/mss_uart/mss_uart.c **** void 
1319:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_ready_mode
1320:../src/drivers/mss_uart/mss_uart.c **** (
1321:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1322:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_ready_mode_t mode    
1323:../src/drivers/mss_uart/mss_uart.c **** )
1324:../src/drivers/mss_uart/mss_uart.c **** {
1325:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1326:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_READY_MODE > mode);
1327:../src/drivers/mss_uart/mss_uart.c **** 
1328:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
1329:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_READY_MODE > mode ) )
1330:../src/drivers/mss_uart/mss_uart.c ****     {
1331:../src/drivers/mss_uart/mss_uart.c ****         /* Configure mode 0 or mode 1 for TXRDY and RXRDY */
1332:../src/drivers/mss_uart/mss_uart.c ****         ((MSS_UART_READY_MODE0 == mode) ? clear_bit_reg8(&this_uart->hw_reg->FCR,RDYMODE) :
1333:../src/drivers/mss_uart/mss_uart.c ****                                  set_bit_reg8(&this_uart->hw_reg->FCR,RDYMODE) );    
1334:../src/drivers/mss_uart/mss_uart.c ****     }
1335:../src/drivers/mss_uart/mss_uart.c **** }
1336:../src/drivers/mss_uart/mss_uart.c **** 
1337:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1338:../src/drivers/mss_uart/mss_uart.c ****  * Configure baud divisors using fractional baud rate if possible.
1339:../src/drivers/mss_uart/mss_uart.c ****  */
1340:../src/drivers/mss_uart/mss_uart.c **** static void
1341:../src/drivers/mss_uart/mss_uart.c **** config_baud_divisors
1342:../src/drivers/mss_uart/mss_uart.c **** (
1343:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1344:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baudrate    
1345:../src/drivers/mss_uart/mss_uart.c **** )
1346:../src/drivers/mss_uart/mss_uart.c **** {
1347:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1348:../src/drivers/mss_uart/mss_uart.c ****     
1349:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1350:../src/drivers/mss_uart/mss_uart.c ****     {
1351:../src/drivers/mss_uart/mss_uart.c ****         uint32_t baud_value;
1352:../src/drivers/mss_uart/mss_uart.c ****         uint32_t baud_value_by_64;
1353:../src/drivers/mss_uart/mss_uart.c ****         uint32_t baud_value_by_128;
1354:../src/drivers/mss_uart/mss_uart.c ****         uint32_t fractional_baud_value;
1355:../src/drivers/mss_uart/mss_uart.c ****         uint32_t pclk_freq;
1356:../src/drivers/mss_uart/mss_uart.c **** 
1357:../src/drivers/mss_uart/mss_uart.c ****         this_uart->baudrate = baudrate;
1358:../src/drivers/mss_uart/mss_uart.c **** 
1359:../src/drivers/mss_uart/mss_uart.c ****         /* Force the value of the CMSIS global variables holding the various system
1360:../src/drivers/mss_uart/mss_uart.c ****           * clock frequencies to be updated. */
1361:../src/drivers/mss_uart/mss_uart.c ****         SystemCoreClockUpdate();
1362:../src/drivers/mss_uart/mss_uart.c ****         if(this_uart == &g_mss_uart0)
1363:../src/drivers/mss_uart/mss_uart.c ****         {
1364:../src/drivers/mss_uart/mss_uart.c ****             pclk_freq = g_FrequencyPCLK0;
1365:../src/drivers/mss_uart/mss_uart.c ****         }
1366:../src/drivers/mss_uart/mss_uart.c ****         else
1367:../src/drivers/mss_uart/mss_uart.c ****         {
1368:../src/drivers/mss_uart/mss_uart.c ****             pclk_freq = g_FrequencyPCLK1;
1369:../src/drivers/mss_uart/mss_uart.c ****         }
1370:../src/drivers/mss_uart/mss_uart.c **** 
1371:../src/drivers/mss_uart/mss_uart.c ****         /*
1372:../src/drivers/mss_uart/mss_uart.c ****          * Compute baud value based on requested baud rate and PCLK frequency.
1373:../src/drivers/mss_uart/mss_uart.c ****          * The baud value is computed using the following equation:
1374:../src/drivers/mss_uart/mss_uart.c ****          *      baud_value = PCLK_Frequency / (baud_rate * 16)
1375:../src/drivers/mss_uart/mss_uart.c ****          */
1376:../src/drivers/mss_uart/mss_uart.c ****         baud_value_by_128 = (8u * pclk_freq) / baudrate;
1377:../src/drivers/mss_uart/mss_uart.c ****         baud_value_by_64 = baud_value_by_128 / 2u;
1378:../src/drivers/mss_uart/mss_uart.c ****         baud_value = baud_value_by_64 / 64u;
1379:../src/drivers/mss_uart/mss_uart.c ****         fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
1380:../src/drivers/mss_uart/mss_uart.c ****         fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value
1381:../src/drivers/mss_uart/mss_uart.c ****         
1382:../src/drivers/mss_uart/mss_uart.c ****         /* Assert if integer baud value fits in 16-bit. */
1383:../src/drivers/mss_uart/mss_uart.c ****         ASSERT(baud_value <= UINT16_MAX);
1384:../src/drivers/mss_uart/mss_uart.c ****     
1385:../src/drivers/mss_uart/mss_uart.c ****         if(baud_value <= (uint32_t)UINT16_MAX)
1386:../src/drivers/mss_uart/mss_uart.c ****         {
1387:../src/drivers/mss_uart/mss_uart.c ****             if(baud_value > 1u)
1388:../src/drivers/mss_uart/mss_uart.c ****             {
1389:../src/drivers/mss_uart/mss_uart.c ****                 /* 
1390:../src/drivers/mss_uart/mss_uart.c ****                  * Use Frational baud rate divisors
1391:../src/drivers/mss_uart/mss_uart.c ****                  */
1392:../src/drivers/mss_uart/mss_uart.c ****                 /* set divisor latch */
1393:../src/drivers/mss_uart/mss_uart.c ****                 set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
1394:../src/drivers/mss_uart/mss_uart.c ****             
1395:../src/drivers/mss_uart/mss_uart.c ****                 /* msb of baud value */
1396:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
1397:../src/drivers/mss_uart/mss_uart.c ****                 /* lsb of baud value */
1398:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->DLR = (uint8_t)baud_value;
1399:../src/drivers/mss_uart/mss_uart.c ****             
1400:../src/drivers/mss_uart/mss_uart.c ****                 /* reset divisor latch */
1401:../src/drivers/mss_uart/mss_uart.c ****                 clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
1402:../src/drivers/mss_uart/mss_uart.c ****         
1403:../src/drivers/mss_uart/mss_uart.c ****                 /* Enable Fractional baud rate */
1404:../src/drivers/mss_uart/mss_uart.c ****                 set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
1405:../src/drivers/mss_uart/mss_uart.c ****         
1406:../src/drivers/mss_uart/mss_uart.c ****                 /* Load the fractional baud rate register */
1407:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
1408:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
1409:../src/drivers/mss_uart/mss_uart.c ****             }
1410:../src/drivers/mss_uart/mss_uart.c ****             else
1411:../src/drivers/mss_uart/mss_uart.c ****             {
1412:../src/drivers/mss_uart/mss_uart.c ****                 /*
1413:../src/drivers/mss_uart/mss_uart.c ****                  * Do NOT use Frational baud rate divisors.
1414:../src/drivers/mss_uart/mss_uart.c ****                  */
1415:../src/drivers/mss_uart/mss_uart.c ****                 /* set divisor latch */
1416:../src/drivers/mss_uart/mss_uart.c ****                 set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
1417:../src/drivers/mss_uart/mss_uart.c ****             
1418:../src/drivers/mss_uart/mss_uart.c ****                 /* msb of baud value */
1419:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
1420:../src/drivers/mss_uart/mss_uart.c ****                 /* lsb of baud value */
1421:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->DLR = (uint8_t)baud_value;
1422:../src/drivers/mss_uart/mss_uart.c ****             
1423:../src/drivers/mss_uart/mss_uart.c ****                 /* reset divisor latch */
1424:../src/drivers/mss_uart/mss_uart.c ****                 clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
1425:../src/drivers/mss_uart/mss_uart.c ****                 
1426:../src/drivers/mss_uart/mss_uart.c ****                 /* Disable Fractional baud rate */
1427:../src/drivers/mss_uart/mss_uart.c ****                 clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
1428:../src/drivers/mss_uart/mss_uart.c ****             }
1429:../src/drivers/mss_uart/mss_uart.c ****         }
1430:../src/drivers/mss_uart/mss_uart.c ****     }
1431:../src/drivers/mss_uart/mss_uart.c **** }
1432:../src/drivers/mss_uart/mss_uart.c **** 
1433:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1434:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1435:../src/drivers/mss_uart/mss_uart.c ****  */
1436:../src/drivers/mss_uart/mss_uart.c **** void 
1437:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_set_usart_mode
1438:../src/drivers/mss_uart/mss_uart.c **** (
1439:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1440:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_usart_mode_t mode
1441:../src/drivers/mss_uart/mss_uart.c **** )
1442:../src/drivers/mss_uart/mss_uart.c **** {
1443:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1444:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_SYNC_MODE > mode);
1445:../src/drivers/mss_uart/mss_uart.c **** 
1446:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
1447:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_SYNC_MODE > mode))
1448:../src/drivers/mss_uart/mss_uart.c ****     {
1449:../src/drivers/mss_uart/mss_uart.c ****         /* Nothing to do for the baudrate: operates at PCLK / 2 + glitch filter length */
1450:../src/drivers/mss_uart/mss_uart.c ****         /* Clear the ESYN bits 2:0 */
1451:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->MM0 &= ~SYNC_ASYNC_MODE_MASK;
1452:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->MM0 |= (uint8_t)mode;
1453:../src/drivers/mss_uart/mss_uart.c ****     }
1454:../src/drivers/mss_uart/mss_uart.c **** }
1455:../src/drivers/mss_uart/mss_uart.c **** 
1456:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
1457:../src/drivers/mss_uart/mss_uart.c ****  * Local Functions
1458:../src/drivers/mss_uart/mss_uart.c ****  *******************************************************************************/
1459:../src/drivers/mss_uart/mss_uart.c **** /*******************************************************************************
1460:../src/drivers/mss_uart/mss_uart.c ****  * Global initialization for all modes
1461:../src/drivers/mss_uart/mss_uart.c ****  */
1462:../src/drivers/mss_uart/mss_uart.c **** static void global_init
1463:../src/drivers/mss_uart/mss_uart.c **** (
1464:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart,
1465:../src/drivers/mss_uart/mss_uart.c ****     uint32_t baud_rate,
1466:../src/drivers/mss_uart/mss_uart.c ****     uint8_t line_config
1467:../src/drivers/mss_uart/mss_uart.c **** )
1468:../src/drivers/mss_uart/mss_uart.c **** {
1469:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
1470:../src/drivers/mss_uart/mss_uart.c ****      * mss_uart_instance_t instances used to identify UART0 and UART1. */
1471:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1472:../src/drivers/mss_uart/mss_uart.c **** 
1473:../src/drivers/mss_uart/mss_uart.c ****     if(this_uart == &g_mss_uart0)
1474:../src/drivers/mss_uart/mss_uart.c ****     {
1475:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg = UART0;
1476:../src/drivers/mss_uart/mss_uart.c ****         this_uart->irqn = UART0_IRQn;
1477:../src/drivers/mss_uart/mss_uart.c ****         /* reset UART0 */
1478:../src/drivers/mss_uart/mss_uart.c ****         SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
1479:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended UART0 interrupt */
1480:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(UART0_IRQn);
1481:../src/drivers/mss_uart/mss_uart.c ****         /* Take UART0 out of reset. */
1482:../src/drivers/mss_uart/mss_uart.c ****         SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
1483:../src/drivers/mss_uart/mss_uart.c ****     }
1484:../src/drivers/mss_uart/mss_uart.c ****     else
1485:../src/drivers/mss_uart/mss_uart.c ****     {
1486:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg = UART1;
1487:../src/drivers/mss_uart/mss_uart.c ****         this_uart->irqn = UART1_IRQn;
1488:../src/drivers/mss_uart/mss_uart.c ****         /* Reset UART1 */
1489:../src/drivers/mss_uart/mss_uart.c ****         SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
1490:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended UART1 interrupt */
1491:../src/drivers/mss_uart/mss_uart.c ****         NVIC_ClearPendingIRQ(UART1_IRQn);
1492:../src/drivers/mss_uart/mss_uart.c ****         /* Take UART1 out of reset. */
1493:../src/drivers/mss_uart/mss_uart.c ****         SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
1494:../src/drivers/mss_uart/mss_uart.c ****     }
1495:../src/drivers/mss_uart/mss_uart.c **** 
1496:../src/drivers/mss_uart/mss_uart.c ****     /* disable interrupts */
1497:../src/drivers/mss_uart/mss_uart.c ****     this_uart->hw_reg->IER = 0u;
1498:../src/drivers/mss_uart/mss_uart.c **** 
1499:../src/drivers/mss_uart/mss_uart.c ****     /* FIFO configuration */
1500:../src/drivers/mss_uart/mss_uart.c ****     this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
1501:../src/drivers/mss_uart/mss_uart.c ****     /* clear receiver FIFO */
1502:../src/drivers/mss_uart/mss_uart.c ****     set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
1503:../src/drivers/mss_uart/mss_uart.c ****     /* clear transmitter FIFO */
1504:../src/drivers/mss_uart/mss_uart.c ****     set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
1505:../src/drivers/mss_uart/mss_uart.c **** 
1506:../src/drivers/mss_uart/mss_uart.c ****     /* set default READY mode : Mode 0*/
1507:../src/drivers/mss_uart/mss_uart.c ****     /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
1508:../src/drivers/mss_uart/mss_uart.c ****      * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
1509:../src/drivers/mss_uart/mss_uart.c ****     set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
1510:../src/drivers/mss_uart/mss_uart.c **** 
1511:../src/drivers/mss_uart/mss_uart.c ****     /* disable loopback : local * remote */
1512:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
1513:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
1514:../src/drivers/mss_uart/mss_uart.c **** 
1515:../src/drivers/mss_uart/mss_uart.c ****     /* set default TX endian */
1516:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
1517:../src/drivers/mss_uart/mss_uart.c ****     /* set default RX endian */
1518:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
1519:../src/drivers/mss_uart/mss_uart.c **** 
1520:../src/drivers/mss_uart/mss_uart.c ****     /* default AFM : disabled */
1521:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
1522:../src/drivers/mss_uart/mss_uart.c **** 
1523:../src/drivers/mss_uart/mss_uart.c ****     /* disable TX time gaurd */
1524:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG); 
1525:../src/drivers/mss_uart/mss_uart.c **** 
1526:../src/drivers/mss_uart/mss_uart.c ****     /* set default RX timeout */
1527:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO); 
1528:../src/drivers/mss_uart/mss_uart.c **** 
1529:../src/drivers/mss_uart/mss_uart.c ****     /* disable fractional baud-rate */
1530:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR); 
1531:../src/drivers/mss_uart/mss_uart.c **** 
1532:../src/drivers/mss_uart/mss_uart.c ****     /* disable single wire mode */
1533:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
1534:../src/drivers/mss_uart/mss_uart.c **** 
1535:../src/drivers/mss_uart/mss_uart.c ****     /* set filter to minimum value */
1536:../src/drivers/mss_uart/mss_uart.c ****     this_uart->hw_reg->GFR = 0u;
1537:../src/drivers/mss_uart/mss_uart.c ****     /* set default TX time gaurd */
1538:../src/drivers/mss_uart/mss_uart.c ****     this_uart->hw_reg->TTG = 0u;
1539:../src/drivers/mss_uart/mss_uart.c ****     /* set default RX timeout */
1540:../src/drivers/mss_uart/mss_uart.c ****     this_uart->hw_reg->RTO = 0u;
1541:../src/drivers/mss_uart/mss_uart.c ****     
1542:../src/drivers/mss_uart/mss_uart.c ****     /* 
1543:../src/drivers/mss_uart/mss_uart.c ****      * Configure baud rate divisors. This uses the frational baud rate divisor
1544:../src/drivers/mss_uart/mss_uart.c ****      * where possible to provide the most accurate baud rat possible.
1545:../src/drivers/mss_uart/mss_uart.c ****      */
1546:../src/drivers/mss_uart/mss_uart.c ****     config_baud_divisors(this_uart, baud_rate);
1547:../src/drivers/mss_uart/mss_uart.c **** 
1548:../src/drivers/mss_uart/mss_uart.c ****     /* set the line control register (bit length, stop bits, parity) */
1549:../src/drivers/mss_uart/mss_uart.c ****     this_uart->hw_reg->LCR = line_config;
1550:../src/drivers/mss_uart/mss_uart.c **** 
1551:../src/drivers/mss_uart/mss_uart.c ****     /* Instance setup */
1552:../src/drivers/mss_uart/mss_uart.c ****     this_uart->baudrate = baud_rate;
1553:../src/drivers/mss_uart/mss_uart.c ****     this_uart->lineconfig = line_config;
1554:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_buff_size = TX_COMPLETE;
1555:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_buffer = (const uint8_t *)0;
1556:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_idx = 0u;
1557:../src/drivers/mss_uart/mss_uart.c **** 
1558:../src/drivers/mss_uart/mss_uart.c ****     /* Default handlers for MSS UART interrupts */
1559:../src/drivers/mss_uart/mss_uart.c ****     this_uart->rx_handler       = NULL_HANDLER;
1560:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_handler       = NULL_HANDLER;
1561:../src/drivers/mss_uart/mss_uart.c ****     this_uart->linests_handler  = NULL_HANDLER;
1562:../src/drivers/mss_uart/mss_uart.c ****     this_uart->modemsts_handler = NULL_HANDLER;
1563:../src/drivers/mss_uart/mss_uart.c ****     this_uart->rto_handler      = NULL_HANDLER;    
1564:../src/drivers/mss_uart/mss_uart.c ****     this_uart->nack_handler     = NULL_HANDLER;   
1565:../src/drivers/mss_uart/mss_uart.c ****     this_uart->pid_pei_handler  = NULL_HANDLER;
1566:../src/drivers/mss_uart/mss_uart.c ****     this_uart->break_handler    = NULL_HANDLER;    
1567:../src/drivers/mss_uart/mss_uart.c ****     this_uart->sync_handler     = NULL_HANDLER;   
1568:../src/drivers/mss_uart/mss_uart.c **** 
1569:../src/drivers/mss_uart/mss_uart.c ****     /* Initialize the sticky status */
1570:../src/drivers/mss_uart/mss_uart.c ****     this_uart->status = 0u;
1571:../src/drivers/mss_uart/mss_uart.c **** }
1572:../src/drivers/mss_uart/mss_uart.c **** 
1573:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1574:../src/drivers/mss_uart/mss_uart.c ****  * Interrupt service routine triggered by any MSS UART interrupt. This routine
1575:../src/drivers/mss_uart/mss_uart.c ****  * will call the handler function appropriate to the interrupt from the
1576:../src/drivers/mss_uart/mss_uart.c ****  * handlers previously registered with the driver through calls to the
1577:../src/drivers/mss_uart/mss_uart.c ****  * MSS_UART_set_*_handler() functions, or it will call the default_tx_handler()
1578:../src/drivers/mss_uart/mss_uart.c ****  * function in response to transmit interrupts if MSS_UART_irq_tx() is used to
1579:../src/drivers/mss_uart/mss_uart.c ****  * transmit data.
1580:../src/drivers/mss_uart/mss_uart.c ****  */
1581:../src/drivers/mss_uart/mss_uart.c **** static void
1582:../src/drivers/mss_uart/mss_uart.c **** MSS_UART_isr
1583:../src/drivers/mss_uart/mss_uart.c **** (
1584:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
1585:../src/drivers/mss_uart/mss_uart.c **** )
1586:../src/drivers/mss_uart/mss_uart.c **** {
1587:../src/drivers/mss_uart/mss_uart.c ****     uint8_t iirf;
1588:../src/drivers/mss_uart/mss_uart.c **** 
1589:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
1590:../src/drivers/mss_uart/mss_uart.c **** 
1591:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
1592:../src/drivers/mss_uart/mss_uart.c ****     {
1593:../src/drivers/mss_uart/mss_uart.c ****         iirf = this_uart->hw_reg->IIR & IIRF_MASK;
1594:../src/drivers/mss_uart/mss_uart.c **** 
1595:../src/drivers/mss_uart/mss_uart.c ****         switch (iirf)
1596:../src/drivers/mss_uart/mss_uart.c ****         {
1597:../src/drivers/mss_uart/mss_uart.c ****             case IIRF_MODEM_STATUS:  /* Modem status interrupt */
1598:../src/drivers/mss_uart/mss_uart.c ****             {
1599:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
1600:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->modemsts_handler)
1601:../src/drivers/mss_uart/mss_uart.c ****                 {
1602:../src/drivers/mss_uart/mss_uart.c ****                    (*(this_uart->modemsts_handler))(this_uart);
1603:../src/drivers/mss_uart/mss_uart.c ****                 }
1604:../src/drivers/mss_uart/mss_uart.c ****             }
1605:../src/drivers/mss_uart/mss_uart.c ****             break;
1606:../src/drivers/mss_uart/mss_uart.c **** 
1607:../src/drivers/mss_uart/mss_uart.c ****             case IIRF_THRE: /* Transmitter Holding Register Empty */
1608:../src/drivers/mss_uart/mss_uart.c ****             {
1609:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(NULL_HANDLER != this_uart->tx_handler);
1610:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->tx_handler)
1611:../src/drivers/mss_uart/mss_uart.c ****                 {
1612:../src/drivers/mss_uart/mss_uart.c ****                     (*(this_uart->tx_handler))(this_uart);
1613:../src/drivers/mss_uart/mss_uart.c ****                 }
1614:../src/drivers/mss_uart/mss_uart.c ****             }
1615:../src/drivers/mss_uart/mss_uart.c ****             break;
1616:../src/drivers/mss_uart/mss_uart.c **** 
1617:../src/drivers/mss_uart/mss_uart.c ****             case IIRF_RX_DATA:      /* Received Data Available */
1618:../src/drivers/mss_uart/mss_uart.c ****             case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
1619:../src/drivers/mss_uart/mss_uart.c ****             {
1620:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(NULL_HANDLER != this_uart->rx_handler);
1621:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->rx_handler)
1622:../src/drivers/mss_uart/mss_uart.c ****                 {
1623:../src/drivers/mss_uart/mss_uart.c ****                     (*(this_uart->rx_handler))(this_uart);
1624:../src/drivers/mss_uart/mss_uart.c ****                 }
1625:../src/drivers/mss_uart/mss_uart.c ****             }
1626:../src/drivers/mss_uart/mss_uart.c ****             break;
1627:../src/drivers/mss_uart/mss_uart.c **** 
1628:../src/drivers/mss_uart/mss_uart.c ****             case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
1629:../src/drivers/mss_uart/mss_uart.c ****             {
1630:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(NULL_HANDLER != this_uart->linests_handler);
1631:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->linests_handler)
1632:../src/drivers/mss_uart/mss_uart.c ****                 {
1633:../src/drivers/mss_uart/mss_uart.c ****                    (*(this_uart->linests_handler))(this_uart);
1634:../src/drivers/mss_uart/mss_uart.c ****                 }
1635:../src/drivers/mss_uart/mss_uart.c ****             }
1636:../src/drivers/mss_uart/mss_uart.c ****             break;
1637:../src/drivers/mss_uart/mss_uart.c **** 
1638:../src/drivers/mss_uart/mss_uart.c ****             case IIRF_MMI:
1639:../src/drivers/mss_uart/mss_uart.c ****             {
1640:../src/drivers/mss_uart/mss_uart.c ****                 /* Identify multimode interrupts and handle */
1641:../src/drivers/mss_uart/mss_uart.c **** 
1642:../src/drivers/mss_uart/mss_uart.c ****                 /* Receiver time-out interrupt */
1643:../src/drivers/mss_uart/mss_uart.c ****                 if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
1644:../src/drivers/mss_uart/mss_uart.c ****                 {
1645:../src/drivers/mss_uart/mss_uart.c ****                     ASSERT(NULL_HANDLER != this_uart->rto_handler);
1646:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->rto_handler)
1647:../src/drivers/mss_uart/mss_uart.c ****                     {
1648:../src/drivers/mss_uart/mss_uart.c ****                         (*(this_uart->rto_handler))(this_uart);
1649:../src/drivers/mss_uart/mss_uart.c ****                     }
1650:../src/drivers/mss_uart/mss_uart.c ****                 }
1651:../src/drivers/mss_uart/mss_uart.c ****                 /* NACK interrupt */
1652:../src/drivers/mss_uart/mss_uart.c ****                 if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
1653:../src/drivers/mss_uart/mss_uart.c ****                 {
1654:../src/drivers/mss_uart/mss_uart.c ****                     ASSERT(NULL_HANDLER != this_uart->nack_handler);
1655:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->nack_handler)
1656:../src/drivers/mss_uart/mss_uart.c ****                     {
1657:../src/drivers/mss_uart/mss_uart.c ****                         (*(this_uart->nack_handler))(this_uart);
1658:../src/drivers/mss_uart/mss_uart.c ****                     }
1659:../src/drivers/mss_uart/mss_uart.c ****                 }
1660:../src/drivers/mss_uart/mss_uart.c **** 
1661:../src/drivers/mss_uart/mss_uart.c ****                 /* PID parity error interrupt */
1662:../src/drivers/mss_uart/mss_uart.c ****                 if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
1663:../src/drivers/mss_uart/mss_uart.c ****                 {
1664:../src/drivers/mss_uart/mss_uart.c ****                     ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
1665:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->pid_pei_handler)
1666:../src/drivers/mss_uart/mss_uart.c ****                     {
1667:../src/drivers/mss_uart/mss_uart.c ****                         (*(this_uart->pid_pei_handler))(this_uart);
1668:../src/drivers/mss_uart/mss_uart.c ****                     }
1669:../src/drivers/mss_uart/mss_uart.c ****                 }
1670:../src/drivers/mss_uart/mss_uart.c **** 
1671:../src/drivers/mss_uart/mss_uart.c ****                 /* LIN break detection interrupt */
1672:../src/drivers/mss_uart/mss_uart.c ****                 if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
1673:../src/drivers/mss_uart/mss_uart.c ****                 {
1674:../src/drivers/mss_uart/mss_uart.c ****                     ASSERT(NULL_HANDLER != this_uart->break_handler);
1675:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->break_handler)
1676:../src/drivers/mss_uart/mss_uart.c ****                     {
1677:../src/drivers/mss_uart/mss_uart.c ****                         (*(this_uart->break_handler))(this_uart);
1678:../src/drivers/mss_uart/mss_uart.c ****                     }
1679:../src/drivers/mss_uart/mss_uart.c ****                 }
1680:../src/drivers/mss_uart/mss_uart.c **** 
1681:../src/drivers/mss_uart/mss_uart.c ****                 /* LIN Sync detection interrupt */
1682:../src/drivers/mss_uart/mss_uart.c ****                 if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
1683:../src/drivers/mss_uart/mss_uart.c ****                 {
1684:../src/drivers/mss_uart/mss_uart.c ****                     ASSERT(NULL_HANDLER != this_uart->sync_handler);
1685:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->sync_handler)
1686:../src/drivers/mss_uart/mss_uart.c ****                     {
1687:../src/drivers/mss_uart/mss_uart.c ****                         (*(this_uart->sync_handler))(this_uart);
1688:../src/drivers/mss_uart/mss_uart.c ****                     }
1689:../src/drivers/mss_uart/mss_uart.c ****                 }
1690:../src/drivers/mss_uart/mss_uart.c ****                 break;
1691:../src/drivers/mss_uart/mss_uart.c ****             }
1692:../src/drivers/mss_uart/mss_uart.c **** 
1693:../src/drivers/mss_uart/mss_uart.c ****             default:
1694:../src/drivers/mss_uart/mss_uart.c ****             {
1695:../src/drivers/mss_uart/mss_uart.c ****                 ASSERT(INVALID_INTERRUPT);
1696:../src/drivers/mss_uart/mss_uart.c ****             }
1697:../src/drivers/mss_uart/mss_uart.c ****             break;
1698:../src/drivers/mss_uart/mss_uart.c ****         }
1699:../src/drivers/mss_uart/mss_uart.c ****     }
1700:../src/drivers/mss_uart/mss_uart.c **** }
1701:../src/drivers/mss_uart/mss_uart.c **** 
1702:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
1703:../src/drivers/mss_uart/mss_uart.c ****  * See mss_uart.h for details of how to use this function.
1704:../src/drivers/mss_uart/mss_uart.c ****  */
1705:../src/drivers/mss_uart/mss_uart.c **** static void
1706:../src/drivers/mss_uart/mss_uart.c **** default_tx_handler
1707:../src/drivers/mss_uart/mss_uart.c **** (
1708:../src/drivers/mss_uart/mss_uart.c ****     mss_uart_instance_t * this_uart
1709:../src/drivers/mss_uart/mss_uart.c **** )
1710:../src/drivers/mss_uart/mss_uart.c **** {
 169              		.loc 3 1710 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL13:
1711:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status;
1712:../src/drivers/mss_uart/mss_uart.c **** 
1713:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 174              		.loc 3 1713 0
 175 0000 1E4B     		ldr	r3, .L31
1710:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status;
 176              		.loc 3 1710 0
 177 0002 30B5     		push	{r4, r5, lr}
 178              		.cfi_def_cfa_offset 12
 179              		.cfi_offset 4, -12
 180              		.cfi_offset 5, -8
 181              		.cfi_offset 14, -4
 182              		.loc 3 1713 0
 183 0004 9842     		cmp	r0, r3
 184 0006 1A46     		mov	r2, r3
 185 0008 03D0     		beq	.L11
 186              		.loc 3 1713 0 is_stmt 0 discriminator 1
 187 000a 1D4B     		ldr	r3, .L31+4
 188 000c 9842     		cmp	r0, r3
 189 000e 00D0     		beq	.L11
 190              		.loc 3 1713 0 discriminator 2
 191              	@ 1713 "../src/drivers/mss_uart/mss_uart.c" 1
 192 0010 00BE     		BKPT
 193              		
 194              	@ 0 "" 2
 195              		.thumb
 196              	.L11:
1714:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
 197              		.loc 3 1714 0 is_stmt 1
 198 0012 0169     		ldr	r1, [r0, #16]
 199 0014 01B9     		cbnz	r1, .L12
 200              		.loc 3 1714 0 is_stmt 0 discriminator 1
 201              	@ 1714 "../src/drivers/mss_uart/mss_uart.c" 1
 202 0016 00BE     		BKPT
 203              		
 204              	@ 0 "" 2
 205              		.thumb
 206              	.L12:
1715:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(0u < this_uart->tx_buff_size);
 207              		.loc 3 1715 0 is_stmt 1
 208 0018 4369     		ldr	r3, [r0, #20]
 209 001a 03B9     		cbnz	r3, .L13
 210              		.loc 3 1715 0 is_stmt 0 discriminator 1
 211              	@ 1715 "../src/drivers/mss_uart/mss_uart.c" 1
 212 001c 00BE     		BKPT
 213              		
 214              	@ 0 "" 2
 215              		.thumb
 216              	.L13:
1716:../src/drivers/mss_uart/mss_uart.c **** 
1717:../src/drivers/mss_uart/mss_uart.c ****     if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
 217              		.loc 3 1717 0 is_stmt 1
 218 001e 9042     		cmp	r0, r2
 219 0020 02D0     		beq	.L14
 220              		.loc 3 1717 0 is_stmt 0 discriminator 2
 221 0022 174A     		ldr	r2, .L31+4
 222 0024 9042     		cmp	r0, r2
 223 0026 28D1     		bne	.L10
 224              	.L14:
 225              		.loc 3 1717 0 discriminator 3
 226 0028 39B3     		cbz	r1, .L10
1718:../src/drivers/mss_uart/mss_uart.c ****        (((uint8_t *)0 ) != this_uart->tx_buffer) &&
 227              		.loc 3 1718 0 is_stmt 1
 228 002a 33B3     		cbz	r3, .L10
1719:../src/drivers/mss_uart/mss_uart.c ****        (0u < this_uart->tx_buff_size))
1720:../src/drivers/mss_uart/mss_uart.c ****     {
1721:../src/drivers/mss_uart/mss_uart.c ****         /* Read the Line Status Register and update the sticky record. */
1722:../src/drivers/mss_uart/mss_uart.c ****         status = this_uart->hw_reg->LSR;
 229              		.loc 3 1722 0
 230 002c 0268     		ldr	r2, [r0]
1723:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 231              		.loc 3 1723 0
 232 002e 417B     		ldrb	r1, [r0, #13]	@ zero_extendqisi2
1722:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 233              		.loc 3 1722 0
 234 0030 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
 235 0032 D2B2     		uxtb	r2, r2
 236              	.LVL14:
 237              		.loc 3 1723 0
 238 0034 1143     		orrs	r1, r1, r2
1724:../src/drivers/mss_uart/mss_uart.c **** 
1725:../src/drivers/mss_uart/mss_uart.c ****         /*
1726:../src/drivers/mss_uart/mss_uart.c ****          * This function should only be called as a result of a THRE interrupt.
1727:../src/drivers/mss_uart/mss_uart.c ****          * Verify that this is true before proceeding to transmit data.
1728:../src/drivers/mss_uart/mss_uart.c ****          */
1729:../src/drivers/mss_uart/mss_uart.c ****         if(status & MSS_UART_THRE)
 239              		.loc 3 1729 0
 240 0036 9206     		lsls	r2, r2, #26
 241              	.LVL15:
1723:../src/drivers/mss_uart/mss_uart.c **** 
 242              		.loc 3 1723 0
 243 0038 4173     		strb	r1, [r0, #13]
 244              		.loc 3 1729 0
 245 003a 0CD4     		bmi	.L17
 246              	.L22:
1730:../src/drivers/mss_uart/mss_uart.c ****         {
1731:../src/drivers/mss_uart/mss_uart.c ****             uint32_t i;
1732:../src/drivers/mss_uart/mss_uart.c ****             uint32_t fill_size = TX_FIFO_SIZE;
1733:../src/drivers/mss_uart/mss_uart.c ****             uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
1734:../src/drivers/mss_uart/mss_uart.c **** 
1735:../src/drivers/mss_uart/mss_uart.c ****             /* Calculate the number of bytes to transmit. */
1736:../src/drivers/mss_uart/mss_uart.c ****             if(tx_remain < TX_FIFO_SIZE)
1737:../src/drivers/mss_uart/mss_uart.c ****             {
1738:../src/drivers/mss_uart/mss_uart.c ****                 fill_size = tx_remain;
1739:../src/drivers/mss_uart/mss_uart.c ****             }
1740:../src/drivers/mss_uart/mss_uart.c **** 
1741:../src/drivers/mss_uart/mss_uart.c ****             /* Fill the TX FIFO with the calculated the number of bytes. */
1742:../src/drivers/mss_uart/mss_uart.c ****             for(i = 0u; i < fill_size; ++i)
1743:../src/drivers/mss_uart/mss_uart.c ****             {
1744:../src/drivers/mss_uart/mss_uart.c ****                 /* Send next character in the buffer. */
1745:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
1746:../src/drivers/mss_uart/mss_uart.c ****                 ++this_uart->tx_idx;
1747:../src/drivers/mss_uart/mss_uart.c ****             }
1748:../src/drivers/mss_uart/mss_uart.c ****         }
1749:../src/drivers/mss_uart/mss_uart.c **** 
1750:../src/drivers/mss_uart/mss_uart.c ****         /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
1751:../src/drivers/mss_uart/mss_uart.c ****         if(this_uart->tx_idx == this_uart->tx_buff_size)
 247              		.loc 3 1751 0
 248 003c 8269     		ldr	r2, [r0, #24]
 249 003e 4369     		ldr	r3, [r0, #20]
 250 0040 9A42     		cmp	r2, r3
 251 0042 1AD1     		bne	.L10
1752:../src/drivers/mss_uart/mss_uart.c ****         {
1753:../src/drivers/mss_uart/mss_uart.c ****             this_uart->tx_buff_size = TX_COMPLETE;
1754:../src/drivers/mss_uart/mss_uart.c ****             /* disables TX interrupt */
1755:../src/drivers/mss_uart/mss_uart.c ****             clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
1756:../src/drivers/mss_uart/mss_uart.c ****         }
1757:../src/drivers/mss_uart/mss_uart.c ****     }
1758:../src/drivers/mss_uart/mss_uart.c **** }
 252              		.loc 3 1758 0
 253 0044 BDE83040 		pop	{r4, r5, lr}
 254              		.cfi_remember_state
 255              		.cfi_restore 14
 256              		.cfi_restore 5
 257              		.cfi_restore 4
 258              		.cfi_def_cfa_offset 0
1753:../src/drivers/mss_uart/mss_uart.c ****             /* disables TX interrupt */
 259              		.loc 3 1753 0
 260 0048 0023     		movs	r3, #0
 261 004a 4361     		str	r3, [r0, #20]
1755:../src/drivers/mss_uart/mss_uart.c ****         }
 262              		.loc 3 1755 0
 263 004c 0068     		ldr	r0, [r0]
 264              	.LVL16:
 265 004e 0121     		movs	r1, #1
 266 0050 0430     		adds	r0, r0, #4
 267 0052 FFF7FEBF 		b	clear_bit_reg8
 268              	.LVL17:
 269              	.L17:
 270              		.cfi_restore_state
 271              	.LBB2:
1733:../src/drivers/mss_uart/mss_uart.c **** 
 272              		.loc 3 1733 0
 273 0056 8269     		ldr	r2, [r0, #24]
 274 0058 9B1A     		subs	r3, r3, r2
 275              	.LVL18:
1732:../src/drivers/mss_uart/mss_uart.c ****             uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
 276              		.loc 3 1732 0
 277 005a 102B     		cmp	r3, #16
 278 005c 28BF     		it	cs
 279 005e 1023     		movcs	r3, #16
 280              	.LVL19:
1742:../src/drivers/mss_uart/mss_uart.c ****             {
 281              		.loc 3 1742 0
 282 0060 0022     		movs	r2, #0
 283              	.LVL20:
 284              	.L20:
1742:../src/drivers/mss_uart/mss_uart.c ****             {
 285              		.loc 3 1742 0 is_stmt 0 discriminator 1
 286 0062 9A42     		cmp	r2, r3
 287 0064 EAD0     		beq	.L22
1745:../src/drivers/mss_uart/mss_uart.c ****                 ++this_uart->tx_idx;
 288              		.loc 3 1745 0 is_stmt 1 discriminator 3
 289 0066 8469     		ldr	r4, [r0, #24]
 290 0068 0569     		ldr	r5, [r0, #16]
 291 006a 0168     		ldr	r1, [r0]
 292 006c 2C5D     		ldrb	r4, [r5, r4]	@ zero_extendqisi2
1742:../src/drivers/mss_uart/mss_uart.c ****             {
 293              		.loc 3 1742 0 discriminator 3
 294 006e 0132     		adds	r2, r2, #1
 295              	.LVL21:
1745:../src/drivers/mss_uart/mss_uart.c ****                 ++this_uart->tx_idx;
 296              		.loc 3 1745 0 discriminator 3
 297 0070 0C70     		strb	r4, [r1]
1746:../src/drivers/mss_uart/mss_uart.c ****             }
 298              		.loc 3 1746 0 discriminator 3
 299 0072 8169     		ldr	r1, [r0, #24]
 300 0074 0131     		adds	r1, r1, #1
 301 0076 8161     		str	r1, [r0, #24]
 302 0078 F3E7     		b	.L20
 303              	.LVL22:
 304              	.L10:
 305 007a 30BD     		pop	{r4, r5, pc}
 306              	.L32:
 307              		.align	2
 308              	.L31:
 309 007c 00000000 		.word	g_mss_uart0
 310 0080 00000000 		.word	g_mss_uart1
 311              	.LBE2:
 312              		.cfi_endproc
 313              	.LFE126:
 315              		.section	.text.MSS_UART_isr.part.0,"ax",%progbits
 316              		.align	1
 317              		.thumb
 318              		.thumb_func
 320              	MSS_UART_isr.part.0:
 321              	.LFB127:
1582:../src/drivers/mss_uart/mss_uart.c **** (
 322              		.loc 3 1582 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL23:
 327 0000 10B5     		push	{r4, lr}
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 4, -8
 330              		.cfi_offset 14, -4
1582:../src/drivers/mss_uart/mss_uart.c **** (
 331              		.loc 3 1582 0
 332 0002 0446     		mov	r4, r0
1593:../src/drivers/mss_uart/mss_uart.c **** 
 333              		.loc 3 1593 0
 334 0004 0068     		ldr	r0, [r0]
 335              	.LVL24:
 336 0006 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 337              	.LVL25:
1595:../src/drivers/mss_uart/mss_uart.c ****         {
 338              		.loc 3 1595 0
 339 0008 03F00F03 		and	r3, r3, #15
 340              	.LVL26:
 341 000c 0C2B     		cmp	r3, #12
 342 000e 4BD8     		bhi	.L34
 343 0010 DFE803F0 		tbb	[pc, r3]
 344              	.L36:
 345 0014 07       		.byte	(.L35-.L36)/2
 346 0015 4A       		.byte	(.L34-.L36)/2
 347 0016 09       		.byte	(.L37-.L36)/2
 348 0017 0F       		.byte	(.L38-.L36)/2
 349 0018 0B       		.byte	(.L39-.L36)/2
 350 0019 4A       		.byte	(.L34-.L36)/2
 351 001a 0D       		.byte	(.L40-.L36)/2
 352 001b 4A       		.byte	(.L34-.L36)/2
 353 001c 4A       		.byte	(.L34-.L36)/2
 354 001d 4A       		.byte	(.L34-.L36)/2
 355 001e 4A       		.byte	(.L34-.L36)/2
 356 001f 4A       		.byte	(.L34-.L36)/2
 357 0020 0B       		.byte	(.L39-.L36)/2
 358 0021 00       		.p2align 1
 359              	.L35:
1599:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->modemsts_handler)
 360              		.loc 3 1599 0
 361 0022 A36A     		ldr	r3, [r4, #40]
 362 0024 3BE0     		b	.L71
 363              	.L37:
1609:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->tx_handler)
 364              		.loc 3 1609 0
 365 0026 636A     		ldr	r3, [r4, #36]
 366 0028 39E0     		b	.L71
 367              	.L39:
1620:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->rx_handler)
 368              		.loc 3 1620 0
 369 002a 236A     		ldr	r3, [r4, #32]
 370 002c 37E0     		b	.L71
 371              	.L40:
1630:../src/drivers/mss_uart/mss_uart.c ****                 if(NULL_HANDLER != this_uart->linests_handler)
 372              		.loc 3 1630 0
 373 002e E369     		ldr	r3, [r4, #28]
 374 0030 35E0     		b	.L71
 375              	.L38:
1643:../src/drivers/mss_uart/mss_uart.c ****                 {
 376              		.loc 3 1643 0
 377 0032 2830     		adds	r0, r0, #40
 378 0034 0021     		movs	r1, #0
 379 0036 FFF7FEFF 		bl	read_bit_reg8
 380              	.LVL27:
 381 003a 28B1     		cbz	r0, .L46
1645:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->rto_handler)
 382              		.loc 3 1645 0
 383 003c E36A     		ldr	r3, [r4, #44]
 384 003e 0BB9     		cbnz	r3, .L47
 385              	@ 1645 "../src/drivers/mss_uart/mss_uart.c" 1
 386 0040 00BE     		BKPT
 387              		
 388              	@ 0 "" 2
 389              		.thumb
 390 0042 01E0     		b	.L46
 391              	.L47:
1648:../src/drivers/mss_uart/mss_uart.c ****                     }
 392              		.loc 3 1648 0
 393 0044 2046     		mov	r0, r4
 394 0046 9847     		blx	r3
 395              	.LVL28:
 396              	.L46:
1652:../src/drivers/mss_uart/mss_uart.c ****                 {
 397              		.loc 3 1652 0
 398 0048 2068     		ldr	r0, [r4]
 399 004a 0121     		movs	r1, #1
 400 004c 2830     		adds	r0, r0, #40
 401 004e FFF7FEFF 		bl	read_bit_reg8
 402              	.LVL29:
 403 0052 28B1     		cbz	r0, .L48
1654:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->nack_handler)
 404              		.loc 3 1654 0
 405 0054 236B     		ldr	r3, [r4, #48]
 406 0056 0BB9     		cbnz	r3, .L49
 407              	@ 1654 "../src/drivers/mss_uart/mss_uart.c" 1
 408 0058 00BE     		BKPT
 409              		
 410              	@ 0 "" 2
 411              		.thumb
 412 005a 01E0     		b	.L48
 413              	.L49:
1657:../src/drivers/mss_uart/mss_uart.c ****                     }
 414              		.loc 3 1657 0
 415 005c 2046     		mov	r0, r4
 416 005e 9847     		blx	r3
 417              	.LVL30:
 418              	.L48:
1662:../src/drivers/mss_uart/mss_uart.c ****                 {
 419              		.loc 3 1662 0
 420 0060 2068     		ldr	r0, [r4]
 421 0062 0221     		movs	r1, #2
 422 0064 2830     		adds	r0, r0, #40
 423 0066 FFF7FEFF 		bl	read_bit_reg8
 424              	.LVL31:
 425 006a 28B1     		cbz	r0, .L50
1664:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->pid_pei_handler)
 426              		.loc 3 1664 0
 427 006c 636B     		ldr	r3, [r4, #52]
 428 006e 0BB9     		cbnz	r3, .L51
 429              	@ 1664 "../src/drivers/mss_uart/mss_uart.c" 1
 430 0070 00BE     		BKPT
 431              		
 432              	@ 0 "" 2
 433              		.thumb
 434 0072 01E0     		b	.L50
 435              	.L51:
1667:../src/drivers/mss_uart/mss_uart.c ****                     }
 436              		.loc 3 1667 0
 437 0074 2046     		mov	r0, r4
 438 0076 9847     		blx	r3
 439              	.LVL32:
 440              	.L50:
1672:../src/drivers/mss_uart/mss_uart.c ****                 {
 441              		.loc 3 1672 0
 442 0078 2068     		ldr	r0, [r4]
 443 007a 0321     		movs	r1, #3
 444 007c 2830     		adds	r0, r0, #40
 445 007e FFF7FEFF 		bl	read_bit_reg8
 446              	.LVL33:
 447 0082 28B1     		cbz	r0, .L52
1674:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->break_handler)
 448              		.loc 3 1674 0
 449 0084 A36B     		ldr	r3, [r4, #56]
 450 0086 0BB9     		cbnz	r3, .L53
 451              	@ 1674 "../src/drivers/mss_uart/mss_uart.c" 1
 452 0088 00BE     		BKPT
 453              		
 454              	@ 0 "" 2
 455              		.thumb
 456 008a 01E0     		b	.L52
 457              	.L53:
1677:../src/drivers/mss_uart/mss_uart.c ****                     }
 458              		.loc 3 1677 0
 459 008c 2046     		mov	r0, r4
 460 008e 9847     		blx	r3
 461              	.LVL34:
 462              	.L52:
1682:../src/drivers/mss_uart/mss_uart.c ****                 {
 463              		.loc 3 1682 0
 464 0090 2068     		ldr	r0, [r4]
 465 0092 0421     		movs	r1, #4
 466 0094 2830     		adds	r0, r0, #40
 467 0096 FFF7FEFF 		bl	read_bit_reg8
 468              	.LVL35:
 469 009a 30B1     		cbz	r0, .L33
1684:../src/drivers/mss_uart/mss_uart.c ****                     if(NULL_HANDLER != this_uart->sync_handler)
 470              		.loc 3 1684 0
 471 009c E36B     		ldr	r3, [r4, #60]
 472              	.L71:
 473 009e 1BB1     		cbz	r3, .L34
1687:../src/drivers/mss_uart/mss_uart.c ****                     }
 474              		.loc 3 1687 0
 475 00a0 2046     		mov	r0, r4
1700:../src/drivers/mss_uart/mss_uart.c **** 
 476              		.loc 3 1700 0
 477 00a2 BDE81040 		pop	{r4, lr}
 478              		.cfi_remember_state
 479              		.cfi_restore 14
 480              		.cfi_restore 4
 481              		.cfi_def_cfa_offset 0
 482              	.LVL36:
1687:../src/drivers/mss_uart/mss_uart.c ****                     }
 483              		.loc 3 1687 0
 484 00a6 1847     		bx	r3	@ indirect register sibling call
 485              	.LVL37:
 486              	.L34:
 487              		.cfi_restore_state
1695:../src/drivers/mss_uart/mss_uart.c ****             }
 488              		.loc 3 1695 0
 489              	@ 1695 "../src/drivers/mss_uart/mss_uart.c" 1
 490 00a8 00BE     		BKPT
 491              		
 492              	@ 0 "" 2
 493              		.thumb
 494              	.L33:
 495 00aa 10BD     		pop	{r4, pc}
 496              		.cfi_endproc
 497              	.LFE127:
 499              		.section	.text.global_init,"ax",%progbits
 500              		.align	1
 501              		.thumb
 502              		.thumb_func
 504              	global_init:
 505              	.LFB124:
1468:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 506              		.loc 3 1468 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              	.LVL38:
 511 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 512              		.cfi_def_cfa_offset 32
 513              		.cfi_offset 3, -32
 514              		.cfi_offset 4, -28
 515              		.cfi_offset 5, -24
 516              		.cfi_offset 6, -20
 517              		.cfi_offset 7, -16
 518              		.cfi_offset 8, -12
 519              		.cfi_offset 9, -8
 520              		.cfi_offset 14, -4
1471:../src/drivers/mss_uart/mss_uart.c **** 
 521              		.loc 3 1471 0
 522 0004 714B     		ldr	r3, .L89
1468:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 523              		.loc 3 1468 0
 524 0006 0446     		mov	r4, r0
1471:../src/drivers/mss_uart/mss_uart.c **** 
 525              		.loc 3 1471 0
 526 0008 9842     		cmp	r0, r3
 527 000a 9846     		mov	r8, r3
1468:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 528              		.loc 3 1468 0
 529 000c 0E46     		mov	r6, r1
 530 000e 1746     		mov	r7, r2
 531 0010 6F4B     		ldr	r3, .L89+4
1471:../src/drivers/mss_uart/mss_uart.c **** 
 532              		.loc 3 1471 0
 533 0012 04D0     		beq	.L76
1471:../src/drivers/mss_uart/mss_uart.c **** 
 534              		.loc 3 1471 0 is_stmt 0 discriminator 1
 535 0014 6F4A     		ldr	r2, .L89+8
 536              	.LVL39:
 537 0016 9042     		cmp	r0, r2
 538 0018 13D0     		beq	.L77
1471:../src/drivers/mss_uart/mss_uart.c **** 
 539              		.loc 3 1471 0 discriminator 2
 540              	@ 1471 "../src/drivers/mss_uart/mss_uart.c" 1
 541 001a 00BE     		BKPT
 542              		
 543              	@ 0 "" 2
 544              		.thumb
 545 001c 11E0     		b	.L77
 546              	.LVL40:
 547              	.L76:
1475:../src/drivers/mss_uart/mss_uart.c ****         this_uart->irqn = UART0_IRQn;
 548              		.loc 3 1475 0 is_stmt 1
 549 001e 4FF08042 		mov	r2, #1073741824
 550              	.LVL41:
 551 0022 0260     		str	r2, [r0]
1476:../src/drivers/mss_uart/mss_uart.c ****         /* reset UART0 */
 552              		.loc 3 1476 0
 553 0024 0A22     		movs	r2, #10
 554 0026 0271     		strb	r2, [r0, #4]
1478:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended UART0 interrupt */
 555              		.loc 3 1478 0
 556 0028 9A6C     		ldr	r2, [r3, #72]
 557              	.LBB10:
 558              	.LBB11:
 559              		.loc 1 1436 0
 560 002a 4FF48061 		mov	r1, #1024
 561              	.LVL42:
 562              	.LBE11:
 563              	.LBE10:
1478:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended UART0 interrupt */
 564              		.loc 3 1478 0
 565 002e 42F08002 		orr	r2, r2, #128
 566 0032 9A64     		str	r2, [r3, #72]
 567              	.LVL43:
 568              	.LBB13:
 569              	.LBB12:
 570              		.loc 1 1436 0
 571 0034 684A     		ldr	r2, .L89+12
 572 0036 C2F88011 		str	r1, [r2, #384]
 573              	.LBE12:
 574              	.LBE13:
1482:../src/drivers/mss_uart/mss_uart.c ****     }
 575              		.loc 3 1482 0
 576 003a 9A6C     		ldr	r2, [r3, #72]
 577 003c 22F08002 		bic	r2, r2, #128
 578 0040 0FE0     		b	.L86
 579              	.LVL44:
 580              	.L77:
1486:../src/drivers/mss_uart/mss_uart.c ****         this_uart->irqn = UART1_IRQn;
 581              		.loc 3 1486 0
 582 0042 664A     		ldr	r2, .L89+16
 583              	.LBB14:
 584              	.LBB15:
 585              		.loc 1 1436 0
 586 0044 4FF40061 		mov	r1, #2048
 587              	.LVL45:
 588              	.LBE15:
 589              	.LBE14:
1486:../src/drivers/mss_uart/mss_uart.c ****         this_uart->irqn = UART1_IRQn;
 590              		.loc 3 1486 0
 591 0048 2260     		str	r2, [r4]
1487:../src/drivers/mss_uart/mss_uart.c ****         /* Reset UART1 */
 592              		.loc 3 1487 0
 593 004a 0B22     		movs	r2, #11
 594 004c 2271     		strb	r2, [r4, #4]
1489:../src/drivers/mss_uart/mss_uart.c ****         /* Clear any previously pended UART1 interrupt */
 595              		.loc 3 1489 0
 596 004e 9A6C     		ldr	r2, [r3, #72]
 597 0050 42F48072 		orr	r2, r2, #256
 598 0054 9A64     		str	r2, [r3, #72]
 599              	.LVL46:
 600              	.LBB17:
 601              	.LBB16:
 602              		.loc 1 1436 0
 603 0056 604A     		ldr	r2, .L89+12
 604 0058 C2F88011 		str	r1, [r2, #384]
 605              	.LBE16:
 606              	.LBE17:
1493:../src/drivers/mss_uart/mss_uart.c ****     }
 607              		.loc 3 1493 0
 608 005c 9A6C     		ldr	r2, [r3, #72]
 609 005e 22F48072 		bic	r2, r2, #256
 610              	.LVL47:
 611              	.L86:
 612 0062 9A64     		str	r2, [r3, #72]
1497:../src/drivers/mss_uart/mss_uart.c **** 
 613              		.loc 3 1497 0
 614 0064 2368     		ldr	r3, [r4]
 615 0066 0025     		movs	r5, #0
 616 0068 1D71     		strb	r5, [r3, #4]
1500:../src/drivers/mss_uart/mss_uart.c ****     /* clear receiver FIFO */
 617              		.loc 3 1500 0
 618 006a 2368     		ldr	r3, [r4]
1502:../src/drivers/mss_uart/mss_uart.c ****     /* clear transmitter FIFO */
 619              		.loc 3 1502 0
 620 006c 0121     		movs	r1, #1
1500:../src/drivers/mss_uart/mss_uart.c ****     /* clear receiver FIFO */
 621              		.loc 3 1500 0
 622 006e 1D72     		strb	r5, [r3, #8]
1502:../src/drivers/mss_uart/mss_uart.c ****     /* clear transmitter FIFO */
 623              		.loc 3 1502 0
 624 0070 2068     		ldr	r0, [r4]
 625              	.LVL48:
 626 0072 0830     		adds	r0, r0, #8
 627 0074 FFF7FEFF 		bl	set_bit_reg8
 628              	.LVL49:
1504:../src/drivers/mss_uart/mss_uart.c **** 
 629              		.loc 3 1504 0
 630 0078 2068     		ldr	r0, [r4]
 631 007a 0221     		movs	r1, #2
 632 007c 0830     		adds	r0, r0, #8
 633 007e FFF7FEFF 		bl	set_bit_reg8
 634              	.LVL50:
1509:../src/drivers/mss_uart/mss_uart.c **** 
 635              		.loc 3 1509 0
 636 0082 2068     		ldr	r0, [r4]
 637 0084 2946     		mov	r1, r5
 638 0086 0830     		adds	r0, r0, #8
 639 0088 FFF7FEFF 		bl	set_bit_reg8
 640              	.LVL51:
1512:../src/drivers/mss_uart/mss_uart.c ****     clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
 641              		.loc 3 1512 0
 642 008c 2068     		ldr	r0, [r4]
 643 008e 0421     		movs	r1, #4
 644 0090 1030     		adds	r0, r0, #16
 645 0092 FFF7FEFF 		bl	clear_bit_reg8
 646              	.LVL52:
1513:../src/drivers/mss_uart/mss_uart.c **** 
 647              		.loc 3 1513 0
 648 0096 2068     		ldr	r0, [r4]
 649 0098 0521     		movs	r1, #5
 650 009a 1030     		adds	r0, r0, #16
 651 009c FFF7FEFF 		bl	clear_bit_reg8
 652              	.LVL53:
1516:../src/drivers/mss_uart/mss_uart.c ****     /* set default RX endian */
 653              		.loc 3 1516 0
 654 00a0 2068     		ldr	r0, [r4]
 655 00a2 0121     		movs	r1, #1
 656 00a4 3430     		adds	r0, r0, #52
 657 00a6 FFF7FEFF 		bl	clear_bit_reg8
 658              	.LVL54:
1518:../src/drivers/mss_uart/mss_uart.c **** 
 659              		.loc 3 1518 0
 660 00aa 2068     		ldr	r0, [r4]
 661 00ac 2946     		mov	r1, r5
 662 00ae 3430     		adds	r0, r0, #52
 663 00b0 FFF7FEFF 		bl	clear_bit_reg8
 664              	.LVL55:
1521:../src/drivers/mss_uart/mss_uart.c **** 
 665              		.loc 3 1521 0
 666 00b4 2068     		ldr	r0, [r4]
 667 00b6 0121     		movs	r1, #1
 668 00b8 3830     		adds	r0, r0, #56
 669 00ba FFF7FEFF 		bl	clear_bit_reg8
 670              	.LVL56:
1524:../src/drivers/mss_uart/mss_uart.c **** 
 671              		.loc 3 1524 0
 672 00be 2068     		ldr	r0, [r4]
 673 00c0 0521     		movs	r1, #5
 674 00c2 3030     		adds	r0, r0, #48
 675 00c4 FFF7FEFF 		bl	clear_bit_reg8
 676              	.LVL57:
1527:../src/drivers/mss_uart/mss_uart.c **** 
 677              		.loc 3 1527 0
 678 00c8 2068     		ldr	r0, [r4]
 679 00ca 0621     		movs	r1, #6
 680 00cc 3030     		adds	r0, r0, #48
 681 00ce FFF7FEFF 		bl	clear_bit_reg8
 682              	.LVL58:
1530:../src/drivers/mss_uart/mss_uart.c **** 
 683              		.loc 3 1530 0
 684 00d2 2068     		ldr	r0, [r4]
 685 00d4 0721     		movs	r1, #7
 686 00d6 3030     		adds	r0, r0, #48
 687 00d8 FFF7FEFF 		bl	clear_bit_reg8
 688              	.LVL59:
1533:../src/drivers/mss_uart/mss_uart.c **** 
 689              		.loc 3 1533 0
 690 00dc 2068     		ldr	r0, [r4]
 691 00de 0321     		movs	r1, #3
 692 00e0 3830     		adds	r0, r0, #56
 693 00e2 FFF7FEFF 		bl	clear_bit_reg8
 694              	.LVL60:
1536:../src/drivers/mss_uart/mss_uart.c ****     /* set default TX time gaurd */
 695              		.loc 3 1536 0
 696 00e6 2368     		ldr	r3, [r4]
 697              	.LBB18:
 698              	.LBB19:
1347:../src/drivers/mss_uart/mss_uart.c ****     
 699              		.loc 3 1347 0
 700 00e8 4445     		cmp	r4, r8
 701              	.LBE19:
 702              	.LBE18:
1536:../src/drivers/mss_uart/mss_uart.c ****     /* set default TX time gaurd */
 703              		.loc 3 1536 0
 704 00ea 83F84450 		strb	r5, [r3, #68]
1538:../src/drivers/mss_uart/mss_uart.c ****     /* set default RX timeout */
 705              		.loc 3 1538 0
 706 00ee 2368     		ldr	r3, [r4]
 707 00f0 83F84850 		strb	r5, [r3, #72]
1540:../src/drivers/mss_uart/mss_uart.c ****     
 708              		.loc 3 1540 0
 709 00f4 2368     		ldr	r3, [r4]
 710 00f6 83F84C50 		strb	r5, [r3, #76]
 711              	.LVL61:
 712              	.LBB22:
 713              	.LBB21:
1347:../src/drivers/mss_uart/mss_uart.c ****     
 714              		.loc 3 1347 0
 715 00fa 02D0     		beq	.L79
 716 00fc 354B     		ldr	r3, .L89+8
 717 00fe 9C42     		cmp	r4, r3
 718 0100 11D1     		bne	.L88
 719              	.L79:
 720              	.LBB20:
1357:../src/drivers/mss_uart/mss_uart.c **** 
 721              		.loc 3 1357 0
 722 0102 A660     		str	r6, [r4, #8]
1361:../src/drivers/mss_uart/mss_uart.c ****         if(this_uart == &g_mss_uart0)
 723              		.loc 3 1361 0
 724 0104 FFF7FEFF 		bl	SystemCoreClockUpdate
 725              	.LVL62:
1362:../src/drivers/mss_uart/mss_uart.c ****         {
 726              		.loc 3 1362 0
 727 0108 4445     		cmp	r4, r8
1364:../src/drivers/mss_uart/mss_uart.c ****         }
 728              		.loc 3 1364 0
 729 010a 0CBF     		ite	eq
 730 010c 344B     		ldreq	r3, .L89+20
1368:../src/drivers/mss_uart/mss_uart.c ****         }
 731              		.loc 3 1368 0
 732 010e 354B     		ldrne	r3, .L89+24
 733 0110 1B68     		ldr	r3, [r3]
 734              	.LVL63:
1376:../src/drivers/mss_uart/mss_uart.c ****         baud_value_by_64 = baud_value_by_128 / 2u;
 735              		.loc 3 1376 0
 736 0112 DB00     		lsls	r3, r3, #3
 737              	.LVL64:
 738 0114 B3FBF6F9 		udiv	r9, r3, r6
 739              	.LVL65:
1378:../src/drivers/mss_uart/mss_uart.c ****         fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
 740              		.loc 3 1378 0
 741 0118 4FEAD913 		lsr	r3, r9, #7
1383:../src/drivers/mss_uart/mss_uart.c ****     
 742              		.loc 3 1383 0
 743 011c B3F5803F 		cmp	r3, #65536
1377:../src/drivers/mss_uart/mss_uart.c ****         baud_value = baud_value_by_64 / 64u;
 744              		.loc 3 1377 0
 745 0120 4FEA5905 		lsr	r5, r9, #1
 746              	.LVL66:
1383:../src/drivers/mss_uart/mss_uart.c ****     
 747              		.loc 3 1383 0
 748 0124 01D3     		bcc	.L83
 749              	.LVL67:
 750              	.L88:
 751              	@ 1383 "../src/drivers/mss_uart/mss_uart.c" 1
 752 0126 00BE     		BKPT
 753              		
 754              	@ 0 "" 2
 755              		.thumb
 756 0128 3CE0     		b	.L80
 757              	.LVL68:
 758              	.L83:
1387:../src/drivers/mss_uart/mss_uart.c ****             {
 759              		.loc 3 1387 0
 760 012a 012B     		cmp	r3, #1
 761 012c 2068     		ldr	r0, [r4]
 762 012e 5FFA83F8 		uxtb	r8, r3
 763 0132 23D9     		bls	.L84
1379:../src/drivers/mss_uart/mss_uart.c ****         fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value
 764              		.loc 3 1379 0
 765 0134 A5EB8315 		sub	r5, r5, r3, lsl #6
 766              	.LVL69:
 767 0138 A5EBC313 		sub	r3, r5, r3, lsl #7
 768              	.LVL70:
 769 013c 4B44     		add	r3, r3, r9
1393:../src/drivers/mss_uart/mss_uart.c ****             
 770              		.loc 3 1393 0
 771 013e 0C30     		adds	r0, r0, #12
 772 0140 0721     		movs	r1, #7
1380:../src/drivers/mss_uart/mss_uart.c ****         
 773              		.loc 3 1380 0
 774 0142 A3EB4505 		sub	r5, r3, r5, lsl #1
1393:../src/drivers/mss_uart/mss_uart.c ****             
 775              		.loc 3 1393 0
 776 0146 FFF7FEFF 		bl	set_bit_reg8
 777              	.LVL71:
1396:../src/drivers/mss_uart/mss_uart.c ****                 /* lsb of baud value */
 778              		.loc 3 1396 0
 779 014a 2268     		ldr	r2, [r4]
 780 014c C9F3C733 		ubfx	r3, r9, #15, #8
 781 0150 1371     		strb	r3, [r2, #4]
1398:../src/drivers/mss_uart/mss_uart.c ****             
 782              		.loc 3 1398 0
 783 0152 2368     		ldr	r3, [r4]
1401:../src/drivers/mss_uart/mss_uart.c ****         
 784              		.loc 3 1401 0
 785 0154 0721     		movs	r1, #7
1398:../src/drivers/mss_uart/mss_uart.c ****             
 786              		.loc 3 1398 0
 787 0156 83F80080 		strb	r8, [r3]
1401:../src/drivers/mss_uart/mss_uart.c ****         
 788              		.loc 3 1401 0
 789 015a 2068     		ldr	r0, [r4]
 790 015c 0C30     		adds	r0, r0, #12
 791 015e FFF7FEFF 		bl	clear_bit_reg8
 792              	.LVL72:
1404:../src/drivers/mss_uart/mss_uart.c ****         
 793              		.loc 3 1404 0
 794 0162 2068     		ldr	r0, [r4]
 795 0164 0721     		movs	r1, #7
 796 0166 3030     		adds	r0, r0, #48
 797 0168 FFF7FEFF 		bl	set_bit_reg8
 798              	.LVL73:
1407:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
 799              		.loc 3 1407 0
 800 016c FF2D     		cmp	r5, #255
 801 016e 00D9     		bls	.L85
 802              	@ 1407 "../src/drivers/mss_uart/mss_uart.c" 1
 803 0170 00BE     		BKPT
 804              		
 805              	@ 0 "" 2
 806              		.thumb
 807              	.L85:
1408:../src/drivers/mss_uart/mss_uart.c ****             }
 808              		.loc 3 1408 0
 809 0172 2368     		ldr	r3, [r4]
 810 0174 EDB2     		uxtb	r5, r5
 811 0176 83F83C50 		strb	r5, [r3, #60]
 812 017a 13E0     		b	.L80
 813              	.LVL74:
 814              	.L84:
1416:../src/drivers/mss_uart/mss_uart.c ****             
 815              		.loc 3 1416 0
 816 017c 0C30     		adds	r0, r0, #12
 817 017e 0721     		movs	r1, #7
 818 0180 FFF7FEFF 		bl	set_bit_reg8
 819              	.LVL75:
1419:../src/drivers/mss_uart/mss_uart.c ****                 /* lsb of baud value */
 820              		.loc 3 1419 0
 821 0184 2368     		ldr	r3, [r4]
 822 0186 0022     		movs	r2, #0
 823 0188 1A71     		strb	r2, [r3, #4]
1421:../src/drivers/mss_uart/mss_uart.c ****             
 824              		.loc 3 1421 0
 825 018a 2368     		ldr	r3, [r4]
1424:../src/drivers/mss_uart/mss_uart.c ****                 
 826              		.loc 3 1424 0
 827 018c 0721     		movs	r1, #7
1421:../src/drivers/mss_uart/mss_uart.c ****             
 828              		.loc 3 1421 0
 829 018e 83F80080 		strb	r8, [r3]
1424:../src/drivers/mss_uart/mss_uart.c ****                 
 830              		.loc 3 1424 0
 831 0192 2068     		ldr	r0, [r4]
 832 0194 0C30     		adds	r0, r0, #12
 833 0196 FFF7FEFF 		bl	clear_bit_reg8
 834              	.LVL76:
1427:../src/drivers/mss_uart/mss_uart.c ****             }
 835              		.loc 3 1427 0
 836 019a 2068     		ldr	r0, [r4]
 837 019c 0721     		movs	r1, #7
 838 019e 3030     		adds	r0, r0, #48
 839 01a0 FFF7FEFF 		bl	clear_bit_reg8
 840              	.LVL77:
 841              	.L80:
 842              	.LBE20:
 843              	.LBE21:
 844              	.LBE22:
1549:../src/drivers/mss_uart/mss_uart.c **** 
 845              		.loc 3 1549 0
 846 01a4 2368     		ldr	r3, [r4]
 847 01a6 1F73     		strb	r7, [r3, #12]
1554:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_buffer = (const uint8_t *)0;
 848              		.loc 3 1554 0
 849 01a8 0023     		movs	r3, #0
1553:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_buff_size = TX_COMPLETE;
 850              		.loc 3 1553 0
 851 01aa 2773     		strb	r7, [r4, #12]
1570:../src/drivers/mss_uart/mss_uart.c **** }
 852              		.loc 3 1570 0
 853 01ac 6373     		strb	r3, [r4, #13]
1552:../src/drivers/mss_uart/mss_uart.c ****     this_uart->lineconfig = line_config;
 854              		.loc 3 1552 0
 855 01ae A660     		str	r6, [r4, #8]
1554:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_buffer = (const uint8_t *)0;
 856              		.loc 3 1554 0
 857 01b0 6361     		str	r3, [r4, #20]
1555:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_idx = 0u;
 858              		.loc 3 1555 0
 859 01b2 2361     		str	r3, [r4, #16]
1556:../src/drivers/mss_uart/mss_uart.c **** 
 860              		.loc 3 1556 0
 861 01b4 A361     		str	r3, [r4, #24]
1559:../src/drivers/mss_uart/mss_uart.c ****     this_uart->tx_handler       = NULL_HANDLER;
 862              		.loc 3 1559 0
 863 01b6 2362     		str	r3, [r4, #32]
1560:../src/drivers/mss_uart/mss_uart.c ****     this_uart->linests_handler  = NULL_HANDLER;
 864              		.loc 3 1560 0
 865 01b8 6362     		str	r3, [r4, #36]
1561:../src/drivers/mss_uart/mss_uart.c ****     this_uart->modemsts_handler = NULL_HANDLER;
 866              		.loc 3 1561 0
 867 01ba E361     		str	r3, [r4, #28]
1562:../src/drivers/mss_uart/mss_uart.c ****     this_uart->rto_handler      = NULL_HANDLER;    
 868              		.loc 3 1562 0
 869 01bc A362     		str	r3, [r4, #40]
1563:../src/drivers/mss_uart/mss_uart.c ****     this_uart->nack_handler     = NULL_HANDLER;   
 870              		.loc 3 1563 0
 871 01be E362     		str	r3, [r4, #44]
1564:../src/drivers/mss_uart/mss_uart.c ****     this_uart->pid_pei_handler  = NULL_HANDLER;
 872              		.loc 3 1564 0
 873 01c0 2363     		str	r3, [r4, #48]
1565:../src/drivers/mss_uart/mss_uart.c ****     this_uart->break_handler    = NULL_HANDLER;    
 874              		.loc 3 1565 0
 875 01c2 6363     		str	r3, [r4, #52]
1566:../src/drivers/mss_uart/mss_uart.c ****     this_uart->sync_handler     = NULL_HANDLER;   
 876              		.loc 3 1566 0
 877 01c4 A363     		str	r3, [r4, #56]
1567:../src/drivers/mss_uart/mss_uart.c **** 
 878              		.loc 3 1567 0
 879 01c6 E363     		str	r3, [r4, #60]
1570:../src/drivers/mss_uart/mss_uart.c **** }
 880              		.loc 3 1570 0
 881 01c8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 882              	.LVL78:
 883              	.L90:
 884              		.align	2
 885              	.L89:
 886 01cc 00000000 		.word	g_mss_uart0
 887 01d0 00800340 		.word	1073971200
 888 01d4 00000000 		.word	g_mss_uart1
 889 01d8 00E100E0 		.word	-536813312
 890 01dc 00000140 		.word	1073807360
 891 01e0 00000000 		.word	g_FrequencyPCLK0
 892 01e4 00000000 		.word	g_FrequencyPCLK1
 893              		.cfi_endproc
 894              	.LFE124:
 896              		.section	.text.MSS_UART_init,"ax",%progbits
 897              		.align	1
 898              		.global	MSS_UART_init
 899              		.thumb
 900              		.thumb_func
 902              	MSS_UART_init:
 903              	.LFB78:
 105:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 904              		.loc 3 105 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 0
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908              	.LVL79:
 108:../src/drivers/mss_uart/mss_uart.c **** 
 909              		.loc 3 108 0
 910 0000 0E4B     		ldr	r3, .L93
 105:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 911              		.loc 3 105 0
 912 0002 10B5     		push	{r4, lr}
 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 4, -8
 915              		.cfi_offset 14, -4
 108:../src/drivers/mss_uart/mss_uart.c **** 
 916              		.loc 3 108 0
 917 0004 9842     		cmp	r0, r3
 105:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 918              		.loc 3 105 0
 919 0006 0446     		mov	r4, r0
 108:../src/drivers/mss_uart/mss_uart.c **** 
 920              		.loc 3 108 0
 921 0008 03D0     		beq	.L92
 108:../src/drivers/mss_uart/mss_uart.c **** 
 922              		.loc 3 108 0 is_stmt 0 discriminator 1
 923 000a 0D4B     		ldr	r3, .L93+4
 924 000c 9842     		cmp	r0, r3
 925 000e 00D0     		beq	.L92
 108:../src/drivers/mss_uart/mss_uart.c **** 
 926              		.loc 3 108 0 discriminator 2
 927              	@ 108 "../src/drivers/mss_uart/mss_uart.c" 1
 928 0010 00BE     		BKPT
 929              		
 930              	@ 0 "" 2
 931              		.thumb
 932              	.L92:
 111:../src/drivers/mss_uart/mss_uart.c **** 
 933              		.loc 3 111 0 is_stmt 1
 934 0012 2046     		mov	r0, r4
 935              	.LVL80:
 936 0014 FFF7FEFF 		bl	global_init
 937              	.LVL81:
 114:../src/drivers/mss_uart/mss_uart.c **** 
 938              		.loc 3 114 0
 939 0018 2068     		ldr	r0, [r4]
 940 001a 0321     		movs	r1, #3
 941 001c 3030     		adds	r0, r0, #48
 942 001e FFF7FEFF 		bl	clear_bit_reg8
 943              	.LVL82:
 117:../src/drivers/mss_uart/mss_uart.c **** 
 944              		.loc 3 117 0
 945 0022 2068     		ldr	r0, [r4]
 946 0024 0221     		movs	r1, #2
 947 0026 3430     		adds	r0, r0, #52
 948 0028 FFF7FEFF 		bl	clear_bit_reg8
 949              	.LVL83:
 120:../src/drivers/mss_uart/mss_uart.c **** 
 950              		.loc 3 120 0
 951 002c 2068     		ldr	r0, [r4]
 952 002e 0021     		movs	r1, #0
 953 0030 3830     		adds	r0, r0, #56
 954 0032 FFF7FEFF 		bl	clear_bit_reg8
 955              	.LVL84:
 123:../src/drivers/mss_uart/mss_uart.c **** }
 956              		.loc 3 123 0
 957 0036 034B     		ldr	r3, .L93+8
 958 0038 6362     		str	r3, [r4, #36]
 959 003a 10BD     		pop	{r4, pc}
 960              	.LVL85:
 961              	.L94:
 962              		.align	2
 963              	.L93:
 964 003c 00000000 		.word	g_mss_uart0
 965 0040 00000000 		.word	g_mss_uart1
 966 0044 00000000 		.word	default_tx_handler
 967              		.cfi_endproc
 968              	.LFE78:
 970              		.section	.text.MSS_UART_lin_init,"ax",%progbits
 971              		.align	1
 972              		.global	MSS_UART_lin_init
 973              		.thumb
 974              		.thumb_func
 976              	MSS_UART_lin_init:
 977              	.LFB79:
 135:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 978              		.loc 3 135 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              	.LVL86:
 138:../src/drivers/mss_uart/mss_uart.c **** 
 983              		.loc 3 138 0
 984 0000 0E4B     		ldr	r3, .L97
 135:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 985              		.loc 3 135 0
 986 0002 10B5     		push	{r4, lr}
 987              		.cfi_def_cfa_offset 8
 988              		.cfi_offset 4, -8
 989              		.cfi_offset 14, -4
 138:../src/drivers/mss_uart/mss_uart.c **** 
 990              		.loc 3 138 0
 991 0004 9842     		cmp	r0, r3
 135:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 992              		.loc 3 135 0
 993 0006 0446     		mov	r4, r0
 138:../src/drivers/mss_uart/mss_uart.c **** 
 994              		.loc 3 138 0
 995 0008 03D0     		beq	.L96
 138:../src/drivers/mss_uart/mss_uart.c **** 
 996              		.loc 3 138 0 is_stmt 0 discriminator 1
 997 000a 0D4B     		ldr	r3, .L97+4
 998 000c 9842     		cmp	r0, r3
 999 000e 00D0     		beq	.L96
 138:../src/drivers/mss_uart/mss_uart.c **** 
 1000              		.loc 3 138 0 discriminator 2
 1001              	@ 138 "../src/drivers/mss_uart/mss_uart.c" 1
 1002 0010 00BE     		BKPT
 1003              		
 1004              	@ 0 "" 2
 1005              		.thumb
 1006              	.L96:
 141:../src/drivers/mss_uart/mss_uart.c **** 
 1007              		.loc 3 141 0 is_stmt 1
 1008 0012 2046     		mov	r0, r4
 1009              	.LVL87:
 1010 0014 FFF7FEFF 		bl	global_init
 1011              	.LVL88:
 144:../src/drivers/mss_uart/mss_uart.c **** 
 1012              		.loc 3 144 0
 1013 0018 2068     		ldr	r0, [r4]
 1014 001a 0321     		movs	r1, #3
 1015 001c 3030     		adds	r0, r0, #48
 1016 001e FFF7FEFF 		bl	set_bit_reg8
 1017              	.LVL89:
 147:../src/drivers/mss_uart/mss_uart.c **** 
 1018              		.loc 3 147 0
 1019 0022 2068     		ldr	r0, [r4]
 1020 0024 0221     		movs	r1, #2
 1021 0026 3430     		adds	r0, r0, #52
 1022 0028 FFF7FEFF 		bl	clear_bit_reg8
 1023              	.LVL90:
 150:../src/drivers/mss_uart/mss_uart.c **** }
 1024              		.loc 3 150 0
 1025 002c 2068     		ldr	r0, [r4]
 1026 002e 0021     		movs	r1, #0
 1027 0030 3830     		adds	r0, r0, #56
 151:../src/drivers/mss_uart/mss_uart.c **** 
 1028              		.loc 3 151 0
 1029 0032 BDE81040 		pop	{r4, lr}
 1030              		.cfi_restore 14
 1031              		.cfi_restore 4
 1032              		.cfi_def_cfa_offset 0
 1033              	.LVL91:
 150:../src/drivers/mss_uart/mss_uart.c **** }
 1034              		.loc 3 150 0
 1035 0036 FFF7FEBF 		b	clear_bit_reg8
 1036              	.LVL92:
 1037              	.L98:
 1038 003a 00BF     		.align	2
 1039              	.L97:
 1040 003c 00000000 		.word	g_mss_uart0
 1041 0040 00000000 		.word	g_mss_uart1
 1042              		.cfi_endproc
 1043              	.LFE79:
 1045              		.section	.text.MSS_UART_irda_init,"ax",%progbits
 1046              		.align	1
 1047              		.global	MSS_UART_irda_init
 1048              		.thumb
 1049              		.thumb_func
 1051              	MSS_UART_irda_init:
 1052              	.LFB80:
 166:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1053              		.loc 3 166 0
 1054              		.cfi_startproc
 1055              		@ args = 8, pretend = 0, frame = 0
 1056              		@ frame_needed = 0, uses_anonymous_args = 0
 1057              	.LVL93:
 1058 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1059              		.cfi_def_cfa_offset 24
 1060              		.cfi_offset 3, -24
 1061              		.cfi_offset 4, -20
 1062              		.cfi_offset 5, -16
 1063              		.cfi_offset 6, -12
 1064              		.cfi_offset 7, -8
 1065              		.cfi_offset 14, -4
 166:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1066              		.loc 3 166 0
 1067 0002 1F46     		mov	r7, r3
 169:../src/drivers/mss_uart/mss_uart.c **** 
 1068              		.loc 3 169 0
 1069 0004 1D4B     		ldr	r3, .L107
 1070              	.LVL94:
 166:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1071              		.loc 3 166 0
 1072 0006 0446     		mov	r4, r0
 169:../src/drivers/mss_uart/mss_uart.c **** 
 1073              		.loc 3 169 0
 1074 0008 9842     		cmp	r0, r3
 166:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1075              		.loc 3 166 0
 1076 000a 9DF81860 		ldrb	r6, [sp, #24]	@ zero_extendqisi2
 1077 000e 9DF81C50 		ldrb	r5, [sp, #28]	@ zero_extendqisi2
 169:../src/drivers/mss_uart/mss_uart.c **** 
 1078              		.loc 3 169 0
 1079 0012 03D0     		beq	.L100
 169:../src/drivers/mss_uart/mss_uart.c **** 
 1080              		.loc 3 169 0 is_stmt 0 discriminator 1
 1081 0014 1A4B     		ldr	r3, .L107+4
 1082 0016 9842     		cmp	r0, r3
 1083 0018 00D0     		beq	.L100
 169:../src/drivers/mss_uart/mss_uart.c **** 
 1084              		.loc 3 169 0 discriminator 2
 1085              	@ 169 "../src/drivers/mss_uart/mss_uart.c" 1
 1086 001a 00BE     		BKPT
 1087              		
 1088              	@ 0 "" 2
 1089              		.thumb
 1090              	.L100:
 172:../src/drivers/mss_uart/mss_uart.c **** 
 1091              		.loc 3 172 0 is_stmt 1
 1092 001c 2046     		mov	r0, r4
 1093              	.LVL95:
 1094 001e FFF7FEFF 		bl	global_init
 1095              	.LVL96:
 175:../src/drivers/mss_uart/mss_uart.c **** 
 1096              		.loc 3 175 0
 1097 0022 2068     		ldr	r0, [r4]
 1098 0024 0321     		movs	r1, #3
 1099 0026 3030     		adds	r0, r0, #48
 1100 0028 FFF7FEFF 		bl	clear_bit_reg8
 1101              	.LVL97:
 178:../src/drivers/mss_uart/mss_uart.c ****     ((rxpol == MSS_UART_ACTIVE_LOW) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EIRX) : 
 1102              		.loc 3 178 0
 1103 002c 2068     		ldr	r0, [r4]
 1104 002e 0221     		movs	r1, #2
 1105 0030 3430     		adds	r0, r0, #52
 1106 0032 FFF7FEFF 		bl	set_bit_reg8
 1107              	.LVL98:
 1108 0036 2068     		ldr	r0, [r4]
 179:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EIRX));
 1109              		.loc 3 179 0
 1110 0038 0321     		movs	r1, #3
 1111 003a 3430     		adds	r0, r0, #52
 1112 003c 17B9     		cbnz	r7, .L101
 179:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EIRX));
 1113              		.loc 3 179 0 is_stmt 0 discriminator 1
 1114 003e FFF7FEFF 		bl	clear_bit_reg8
 1115              	.LVL99:
 1116 0042 01E0     		b	.L102
 1117              	.L101:
 180:../src/drivers/mss_uart/mss_uart.c ****                                       
 1118              		.loc 3 180 0 is_stmt 1
 1119 0044 FFF7FEFF 		bl	set_bit_reg8
 1120              	.LVL100:
 1121              	.L102:
 1122 0048 2068     		ldr	r0, [r4]
 182:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EITX));
 1123              		.loc 3 182 0
 1124 004a 0421     		movs	r1, #4
 1125 004c 3430     		adds	r0, r0, #52
 1126 004e 16B9     		cbnz	r6, .L103
 182:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EITX));
 1127              		.loc 3 182 0 is_stmt 0 discriminator 1
 1128 0050 FFF7FEFF 		bl	clear_bit_reg8
 1129              	.LVL101:
 1130 0054 01E0     		b	.L104
 1131              	.L103:
 183:../src/drivers/mss_uart/mss_uart.c ****                                       
 1132              		.loc 3 183 0 is_stmt 1
 1133 0056 FFF7FEFF 		bl	set_bit_reg8
 1134              	.LVL102:
 1135              	.L104:
 1136 005a 2068     		ldr	r0, [r4]
 185:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EITP));
 1137              		.loc 3 185 0
 1138 005c 0521     		movs	r1, #5
 1139 005e 3430     		adds	r0, r0, #52
 1140 0060 15B9     		cbnz	r5, .L105
 185:../src/drivers/mss_uart/mss_uart.c ****                                       set_bit_reg8(&this_uart->hw_reg->MM1,EITP));
 1141              		.loc 3 185 0 is_stmt 0 discriminator 1
 1142 0062 FFF7FEFF 		bl	clear_bit_reg8
 1143              	.LVL103:
 1144 0066 01E0     		b	.L106
 1145              	.L105:
 186:../src/drivers/mss_uart/mss_uart.c ****     /* Disable SmartCard Mode */
 1146              		.loc 3 186 0 is_stmt 1
 1147 0068 FFF7FEFF 		bl	set_bit_reg8
 1148              	.LVL104:
 1149              	.L106:
 188:../src/drivers/mss_uart/mss_uart.c **** }
 1150              		.loc 3 188 0
 1151 006c 2068     		ldr	r0, [r4]
 1152 006e 0021     		movs	r1, #0
 1153 0070 3830     		adds	r0, r0, #56
 189:../src/drivers/mss_uart/mss_uart.c **** 
 1154              		.loc 3 189 0
 1155 0072 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1156              		.cfi_restore 14
 1157              		.cfi_restore 7
 1158              		.cfi_restore 6
 1159              		.cfi_restore 5
 1160              		.cfi_restore 4
 1161              		.cfi_restore 3
 1162              		.cfi_def_cfa_offset 0
 1163              	.LVL105:
 188:../src/drivers/mss_uart/mss_uart.c **** }
 1164              		.loc 3 188 0
 1165 0076 FFF7FEBF 		b	clear_bit_reg8
 1166              	.LVL106:
 1167              	.L108:
 1168 007a 00BF     		.align	2
 1169              	.L107:
 1170 007c 00000000 		.word	g_mss_uart0
 1171 0080 00000000 		.word	g_mss_uart1
 1172              		.cfi_endproc
 1173              	.LFE80:
 1175              		.section	.text.MSS_UART_smartcard_init,"ax",%progbits
 1176              		.align	1
 1177              		.global	MSS_UART_smartcard_init
 1178              		.thumb
 1179              		.thumb_func
 1181              	MSS_UART_smartcard_init:
 1182              	.LFB81:
 201:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1183              		.loc 3 201 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              	.LVL107:
 1188 0000 38B5     		push	{r3, r4, r5, lr}
 1189              		.cfi_def_cfa_offset 16
 1190              		.cfi_offset 3, -16
 1191              		.cfi_offset 4, -12
 1192              		.cfi_offset 5, -8
 1193              		.cfi_offset 14, -4
 204:../src/drivers/mss_uart/mss_uart.c **** 
 1194              		.loc 3 204 0
 1195 0002 144B     		ldr	r3, .L112
 201:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1196              		.loc 3 201 0
 1197 0004 0446     		mov	r4, r0
 204:../src/drivers/mss_uart/mss_uart.c **** 
 1198              		.loc 3 204 0
 1199 0006 9842     		cmp	r0, r3
 201:../src/drivers/mss_uart/mss_uart.c ****     /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
 1200              		.loc 3 201 0
 1201 0008 1546     		mov	r5, r2
 204:../src/drivers/mss_uart/mss_uart.c **** 
 1202              		.loc 3 204 0
 1203 000a 03D0     		beq	.L110
 204:../src/drivers/mss_uart/mss_uart.c **** 
 1204              		.loc 3 204 0 is_stmt 0 discriminator 1
 1205 000c 124B     		ldr	r3, .L112+4
 1206 000e 9842     		cmp	r0, r3
 1207 0010 00D0     		beq	.L110
 204:../src/drivers/mss_uart/mss_uart.c **** 
 1208              		.loc 3 204 0 discriminator 2
 1209              	@ 204 "../src/drivers/mss_uart/mss_uart.c" 1
 1210 0012 00BE     		BKPT
 1211              		
 1212              	@ 0 "" 2
 1213              		.thumb
 1214              	.L110:
 207:../src/drivers/mss_uart/mss_uart.c ****     
 1215              		.loc 3 207 0 is_stmt 1
 1216 0014 2A46     		mov	r2, r5
 1217              	.LVL108:
 1218 0016 2046     		mov	r0, r4
 1219              	.LVL109:
 1220 0018 FFF7FEFF 		bl	global_init
 1221              	.LVL110:
 210:../src/drivers/mss_uart/mss_uart.c **** 
 1222              		.loc 3 210 0
 1223 001c 2068     		ldr	r0, [r4]
 1224 001e 0321     		movs	r1, #3
 1225 0020 3030     		adds	r0, r0, #48
 1226 0022 FFF7FEFF 		bl	clear_bit_reg8
 1227              	.LVL111:
 213:../src/drivers/mss_uart/mss_uart.c **** 
 1228              		.loc 3 213 0
 1229 0026 2068     		ldr	r0, [r4]
 1230 0028 0221     		movs	r1, #2
 1231 002a 3430     		adds	r0, r0, #52
 216:../src/drivers/mss_uart/mss_uart.c ****         (line_config & (MSS_UART_DATA_8_BITS | MSS_UART_TWO_STOP_BITS)))
 1232              		.loc 3 216 0
 1233 002c 05F00705 		and	r5, r5, #7
 213:../src/drivers/mss_uart/mss_uart.c **** 
 1234              		.loc 3 213 0
 1235 0030 FFF7FEFF 		bl	clear_bit_reg8
 1236              	.LVL112:
 216:../src/drivers/mss_uart/mss_uart.c ****         (line_config & (MSS_UART_DATA_8_BITS | MSS_UART_TWO_STOP_BITS)))
 1237              		.loc 3 216 0
 1238 0034 072D     		cmp	r5, #7
 1239 0036 0BD1     		bne	.L109
 219:../src/drivers/mss_uart/mss_uart.c ****         /* Enable single wire half-duplex mode */
 1240              		.loc 3 219 0
 1241 0038 2068     		ldr	r0, [r4]
 1242 003a 0021     		movs	r1, #0
 1243 003c 3830     		adds	r0, r0, #56
 1244 003e FFF7FEFF 		bl	set_bit_reg8
 1245              	.LVL113:
 221:../src/drivers/mss_uart/mss_uart.c ****     }
 1246              		.loc 3 221 0
 1247 0042 2068     		ldr	r0, [r4]
 1248 0044 0321     		movs	r1, #3
 1249 0046 3830     		adds	r0, r0, #56
 223:../src/drivers/mss_uart/mss_uart.c **** 
 1250              		.loc 3 223 0
 1251 0048 BDE83840 		pop	{r3, r4, r5, lr}
 1252              		.cfi_remember_state
 1253              		.cfi_restore 14
 1254              		.cfi_restore 5
 1255              		.cfi_restore 4
 1256              		.cfi_restore 3
 1257              		.cfi_def_cfa_offset 0
 1258              	.LVL114:
 221:../src/drivers/mss_uart/mss_uart.c ****     }
 1259              		.loc 3 221 0
 1260 004c FFF7FEBF 		b	set_bit_reg8
 1261              	.LVL115:
 1262              	.L109:
 1263              		.cfi_restore_state
 1264 0050 38BD     		pop	{r3, r4, r5, pc}
 1265              	.LVL116:
 1266              	.L113:
 1267 0052 00BF     		.align	2
 1268              	.L112:
 1269 0054 00000000 		.word	g_mss_uart0
 1270 0058 00000000 		.word	g_mss_uart1
 1271              		.cfi_endproc
 1272              	.LFE81:
 1274              		.section	.text.MSS_UART_polled_tx,"ax",%progbits
 1275              		.align	1
 1276              		.global	MSS_UART_polled_tx
 1277              		.thumb
 1278              		.thumb_func
 1280              	MSS_UART_polled_tx:
 1281              	.LFB82:
 235:../src/drivers/mss_uart/mss_uart.c ****     uint32_t char_idx = 0u;
 1282              		.loc 3 235 0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 1286              	.LVL117:
 240:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ( (uint8_t *)0));
 1287              		.loc 3 240 0
 1288 0000 174B     		ldr	r3, .L135
 235:../src/drivers/mss_uart/mss_uart.c ****     uint32_t char_idx = 0u;
 1289              		.loc 3 235 0
 1290 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 1291              		.cfi_def_cfa_offset 20
 1292              		.cfi_offset 4, -20
 1293              		.cfi_offset 5, -16
 1294              		.cfi_offset 6, -12
 1295              		.cfi_offset 7, -8
 1296              		.cfi_offset 14, -4
 240:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ( (uint8_t *)0));
 1297              		.loc 3 240 0
 1298 0004 9842     		cmp	r0, r3
 1299 0006 03D0     		beq	.L115
 240:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ( (uint8_t *)0));
 1300              		.loc 3 240 0 is_stmt 0 discriminator 1
 1301 0008 164C     		ldr	r4, .L135+4
 1302 000a A042     		cmp	r0, r4
 1303 000c 00D0     		beq	.L115
 240:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ( (uint8_t *)0));
 1304              		.loc 3 240 0 discriminator 2
 1305              	@ 240 "../src/drivers/mss_uart/mss_uart.c" 1
 1306 000e 00BE     		BKPT
 1307              		
 1308              	@ 0 "" 2
 1309              		.thumb
 1310              	.L115:
 241:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0u);
 1311              		.loc 3 241 0 is_stmt 1
 1312 0010 01B9     		cbnz	r1, .L116
 241:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0u);
 1313              		.loc 3 241 0 is_stmt 0 discriminator 1
 1314              	@ 241 "../src/drivers/mss_uart/mss_uart.c" 1
 1315 0012 00BE     		BKPT
 1316              		
 1317              	@ 0 "" 2
 1318              		.thumb
 1319              	.L116:
 242:../src/drivers/mss_uart/mss_uart.c **** 
 1320              		.loc 3 242 0 is_stmt 1
 1321 0014 02B9     		cbnz	r2, .L117
 242:../src/drivers/mss_uart/mss_uart.c **** 
 1322              		.loc 3 242 0 is_stmt 0 discriminator 1
 1323              	@ 242 "../src/drivers/mss_uart/mss_uart.c" 1
 1324 0016 00BE     		BKPT
 1325              		
 1326              	@ 0 "" 2
 1327              		.thumb
 1328              	.L117:
 244:../src/drivers/mss_uart/mss_uart.c ****         (pbuff != ((uint8_t *)0)) && (tx_size > 0u))
 1329              		.loc 3 244 0 is_stmt 1
 1330 0018 9842     		cmp	r0, r3
 1331 001a 02D0     		beq	.L118
 244:../src/drivers/mss_uart/mss_uart.c ****         (pbuff != ((uint8_t *)0)) && (tx_size > 0u))
 1332              		.loc 3 244 0 is_stmt 0 discriminator 2
 1333 001c 114B     		ldr	r3, .L135+4
 1334 001e 9842     		cmp	r0, r3
 1335 0020 1DD1     		bne	.L114
 1336              	.L118:
 244:../src/drivers/mss_uart/mss_uart.c ****         (pbuff != ((uint8_t *)0)) && (tx_size > 0u))
 1337              		.loc 3 244 0 discriminator 3
 1338 0022 E1B1     		cbz	r1, .L114
 245:../src/drivers/mss_uart/mss_uart.c ****     {
 1339              		.loc 3 245 0 is_stmt 1
 1340 0024 DAB1     		cbz	r2, .L114
 1341 0026 0024     		movs	r4, #0
 1342              	.LVL118:
 1343              	.L120:
 252:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 1344              		.loc 3 252 0
 1345 0028 0368     		ldr	r3, [r0]
 253:../src/drivers/mss_uart/mss_uart.c **** 
 1346              		.loc 3 253 0
 1347 002a 457B     		ldrb	r5, [r0, #13]	@ zero_extendqisi2
 252:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 1348              		.loc 3 252 0
 1349 002c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1350 002e DBB2     		uxtb	r3, r3
 1351              	.LVL119:
 253:../src/drivers/mss_uart/mss_uart.c **** 
 1352              		.loc 3 253 0
 1353 0030 1D43     		orrs	r5, r5, r3
 1354 0032 4573     		strb	r5, [r0, #13]
 256:../src/drivers/mss_uart/mss_uart.c ****             {
 1355              		.loc 3 256 0
 1356 0034 9D06     		lsls	r5, r3, #26
 1357 0036 F7D5     		bpl	.L120
 1358              	.LVL120:
 1359              	.LBB23:
 261:../src/drivers/mss_uart/mss_uart.c ****                 {
 1360              		.loc 3 261 0
 1361 0038 0F2A     		cmp	r2, #15
 1362 003a 01EB0406 		add	r6, r1, r4
 1363 003e 98BF     		it	ls
 1364 0040 1346     		movls	r3, r2
 1365              	.LVL121:
 1366 0042 3546     		mov	r5, r6
 1367 0044 88BF     		it	hi
 1368 0046 1023     		movhi	r3, #16
 1369              	.LVL122:
 1370              	.L123:
 270:../src/drivers/mss_uart/mss_uart.c ****                     char_idx++;
 1371              		.loc 3 270 0 discriminator 3
 1372 0048 0768     		ldr	r7, [r0]
 1373 004a 15F801EB 		ldrb	lr, [r5], #1	@ zero_extendqisi2
 1374 004e 87F800E0 		strb	lr, [r7]
 1375 0052 AF1B     		subs	r7, r5, r6
 267:../src/drivers/mss_uart/mss_uart.c ****                 {
 1376              		.loc 3 267 0 discriminator 3
 1377 0054 9F42     		cmp	r7, r3
 1378 0056 F7D3     		bcc	.L123
 1379              	.LBE23:
 277:../src/drivers/mss_uart/mss_uart.c ****     }
 1380              		.loc 3 277 0
 1381 0058 D21A     		subs	r2, r2, r3
 1382              	.LVL123:
 1383 005a 1C44     		add	r4, r4, r3
 1384              	.LVL124:
 1385 005c E4D1     		bne	.L120
 1386              	.LVL125:
 1387              	.L114:
 1388 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1389              	.L136:
 1390              		.align	2
 1391              	.L135:
 1392 0060 00000000 		.word	g_mss_uart0
 1393 0064 00000000 		.word	g_mss_uart1
 1394              		.cfi_endproc
 1395              	.LFE82:
 1397              		.section	.text.MSS_UART_polled_tx_string,"ax",%progbits
 1398              		.align	1
 1399              		.global	MSS_UART_polled_tx_string
 1400              		.thumb
 1401              		.thumb_func
 1403              	MSS_UART_polled_tx_string:
 1404              	.LFB83:
 290:../src/drivers/mss_uart/mss_uart.c ****     uint32_t char_idx = 0u;
 1405              		.loc 3 290 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              	.LVL126:
 296:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(p_sz_string != ((uint8_t *)0));
 1410              		.loc 3 296 0
 1411 0000 114B     		ldr	r3, .L164
 290:../src/drivers/mss_uart/mss_uart.c ****     uint32_t char_idx = 0u;
 1412              		.loc 3 290 0
 1413 0002 70B5     		push	{r4, r5, r6, lr}
 1414              		.cfi_def_cfa_offset 16
 1415              		.cfi_offset 4, -16
 1416              		.cfi_offset 5, -12
 1417              		.cfi_offset 6, -8
 1418              		.cfi_offset 14, -4
 296:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(p_sz_string != ((uint8_t *)0));
 1419              		.loc 3 296 0
 1420 0004 9842     		cmp	r0, r3
 1421 0006 05D0     		beq	.L138
 296:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(p_sz_string != ((uint8_t *)0));
 1422              		.loc 3 296 0 is_stmt 0 discriminator 1
 1423 0008 104B     		ldr	r3, .L164+4
 1424 000a 9842     		cmp	r0, r3
 1425 000c 02D0     		beq	.L138
 296:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(p_sz_string != ((uint8_t *)0));
 1426              		.loc 3 296 0 discriminator 2
 1427              	@ 296 "../src/drivers/mss_uart/mss_uart.c" 1
 1428 000e 00BE     		BKPT
 1429              		
 1430              	@ 0 "" 2
 297:../src/drivers/mss_uart/mss_uart.c **** 
 1431              		.loc 3 297 0 is_stmt 1 discriminator 2
 1432              		.thumb
 1433 0010 C1B9     		cbnz	r1, .L137
 1434 0012 00E0     		b	.L140
 1435              	.L138:
 297:../src/drivers/mss_uart/mss_uart.c **** 
 1436              		.loc 3 297 0 is_stmt 0
 1437 0014 09B9     		cbnz	r1, .L141
 1438              	.L140:
 297:../src/drivers/mss_uart/mss_uart.c **** 
 1439              		.loc 3 297 0 discriminator 1
 1440              	@ 297 "../src/drivers/mss_uart/mss_uart.c" 1
 1441 0016 00BE     		BKPT
 1442              		
 1443              	@ 0 "" 2
 1444              		.thumb
 1445 0018 70BD     		pop	{r4, r5, r6, pc}
 1446              	.L141:
 303:../src/drivers/mss_uart/mss_uart.c **** 
 1447              		.loc 3 303 0 is_stmt 1
 1448 001a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1449              	.LVL127:
 291:../src/drivers/mss_uart/mss_uart.c ****     uint32_t fill_size;
 1450              		.loc 3 291 0
 1451 001c 0023     		movs	r3, #0
 1452              	.LVL128:
 1453              	.L143:
 309:../src/drivers/mss_uart/mss_uart.c ****         {
 1454              		.loc 3 309 0
 1455 001e 8AB1     		cbz	r2, .L137
 313:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->status |= status;
 1456              		.loc 3 313 0
 1457 0020 0668     		ldr	r6, [r0]
 1458              	.L144:
 313:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->status |= status;
 1459              		.loc 3 313 0 is_stmt 0 discriminator 1
 1460 0022 347D     		ldrb	r4, [r6, #20]	@ zero_extendqisi2
 314:../src/drivers/mss_uart/mss_uart.c ****             } while (0u == (status & MSS_UART_THRE));
 1461              		.loc 3 314 0 is_stmt 1 discriminator 1
 1462 0024 457B     		ldrb	r5, [r0, #13]	@ zero_extendqisi2
 313:../src/drivers/mss_uart/mss_uart.c ****                 this_uart->status |= status;
 1463              		.loc 3 313 0 discriminator 1
 1464 0026 E4B2     		uxtb	r4, r4
 1465              	.LVL129:
 314:../src/drivers/mss_uart/mss_uart.c ****             } while (0u == (status & MSS_UART_THRE));
 1466              		.loc 3 314 0 discriminator 1
 1467 0028 2543     		orrs	r5, r5, r4
 315:../src/drivers/mss_uart/mss_uart.c **** 
 1468              		.loc 3 315 0 discriminator 1
 1469 002a A406     		lsls	r4, r4, #26
 1470              	.LVL130:
 314:../src/drivers/mss_uart/mss_uart.c ****             } while (0u == (status & MSS_UART_THRE));
 1471              		.loc 3 314 0 discriminator 1
 1472 002c 4573     		strb	r5, [r0, #13]
 315:../src/drivers/mss_uart/mss_uart.c **** 
 1473              		.loc 3 315 0 discriminator 1
 1474 002e F8D5     		bpl	.L144
 1475 0030 03F11004 		add	r4, r3, #16
 1476              	.L146:
 1477              	.LVL131:
 324:../src/drivers/mss_uart/mss_uart.c ****                 ++fill_size;
 1478              		.loc 3 324 0
 1479 0034 0568     		ldr	r5, [r0]
 326:../src/drivers/mss_uart/mss_uart.c ****                 /* Get the next data byte from the input buffer */
 1480              		.loc 3 326 0
 1481 0036 0133     		adds	r3, r3, #1
 1482              	.LVL132:
 324:../src/drivers/mss_uart/mss_uart.c ****                 ++fill_size;
 1483              		.loc 3 324 0
 1484 0038 2A70     		strb	r2, [r5]
 1485              	.LVL133:
 328:../src/drivers/mss_uart/mss_uart.c ****             }
 1486              		.loc 3 328 0
 1487 003a CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 1488              	.LVL134:
 321:../src/drivers/mss_uart/mss_uart.c ****             {
 1489              		.loc 3 321 0
 1490 003c 12B1     		cbz	r2, .L137
 321:../src/drivers/mss_uart/mss_uart.c ****             {
 1491              		.loc 3 321 0 is_stmt 0 discriminator 1
 1492 003e A342     		cmp	r3, r4
 1493 0040 F8D1     		bne	.L146
 1494 0042 ECE7     		b	.L143
 1495              	.LVL135:
 1496              	.L137:
 1497 0044 70BD     		pop	{r4, r5, r6, pc}
 1498              	.L165:
 1499 0046 00BF     		.align	2
 1500              	.L164:
 1501 0048 00000000 		.word	g_mss_uart0
 1502 004c 00000000 		.word	g_mss_uart1
 1503              		.cfi_endproc
 1504              	.LFE83:
 1506              		.section	.text.MSS_UART_irq_tx,"ax",%progbits
 1507              		.align	1
 1508              		.global	MSS_UART_irq_tx
 1509              		.thumb
 1510              		.thumb_func
 1512              	MSS_UART_irq_tx:
 1513              	.LFB84:
 344:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1514              		.loc 3 344 0 is_stmt 1
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              	.LVL136:
 345:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ((uint8_t *)0));
 1519              		.loc 3 345 0
 1520 0000 154B     		ldr	r3, .L177
 344:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1521              		.loc 3 344 0
 1522 0002 10B5     		push	{r4, lr}
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 4, -8
 1525              		.cfi_offset 14, -4
 345:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ((uint8_t *)0));
 1526              		.loc 3 345 0
 1527 0004 9842     		cmp	r0, r3
 344:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1528              		.loc 3 344 0
 1529 0006 0446     		mov	r4, r0
 345:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ((uint8_t *)0));
 1530              		.loc 3 345 0
 1531 0008 03D0     		beq	.L167
 345:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ((uint8_t *)0));
 1532              		.loc 3 345 0 is_stmt 0 discriminator 1
 1533 000a 1448     		ldr	r0, .L177+4
 1534              	.LVL137:
 1535 000c 8442     		cmp	r4, r0
 1536 000e 00D0     		beq	.L167
 345:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(pbuff != ((uint8_t *)0));
 1537              		.loc 3 345 0 discriminator 2
 1538              	@ 345 "../src/drivers/mss_uart/mss_uart.c" 1
 1539 0010 00BE     		BKPT
 1540              		
 1541              	@ 0 "" 2
 1542              		.thumb
 1543              	.L167:
 346:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0u);
 1544              		.loc 3 346 0 is_stmt 1
 1545 0012 19B9     		cbnz	r1, .L168
 346:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0u);
 1546              		.loc 3 346 0 is_stmt 0 discriminator 1
 1547              	@ 346 "../src/drivers/mss_uart/mss_uart.c" 1
 1548 0014 00BE     		BKPT
 1549              		
 1550              	@ 0 "" 2
 347:../src/drivers/mss_uart/mss_uart.c **** 
 1551              		.loc 3 347 0 is_stmt 1 discriminator 1
 1552              		.thumb
 1553 0016 EAB9     		cbnz	r2, .L166
 1554              	.L171:
 1555              	@ 347 "../src/drivers/mss_uart/mss_uart.c" 1
 1556 0018 00BE     		BKPT
 1557              		
 1558              	@ 0 "" 2
 1559              		.thumb
 1560 001a 10BD     		pop	{r4, pc}
 1561              	.LVL138:
 1562              	.L168:
 347:../src/drivers/mss_uart/mss_uart.c **** 
 1563              		.loc 3 347 0 is_stmt 0
 1564 001c 002A     		cmp	r2, #0
 1565 001e FBD0     		beq	.L171
 349:../src/drivers/mss_uart/mss_uart.c ****       ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
 1566              		.loc 3 349 0 is_stmt 1 discriminator 2
 1567 0020 9C42     		cmp	r4, r3
 1568 0022 02D0     		beq	.L170
 350:../src/drivers/mss_uart/mss_uart.c ****     {
 1569              		.loc 3 350 0
 1570 0024 0D4B     		ldr	r3, .L177+4
 1571 0026 9C42     		cmp	r4, r3
 1572 0028 14D1     		bne	.L166
 1573              	.L170:
 355:../src/drivers/mss_uart/mss_uart.c **** 
 1574              		.loc 3 355 0
 1575 002a 0023     		movs	r3, #0
 353:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buff_size = tx_size;
 1576              		.loc 3 353 0
 1577 002c 2161     		str	r1, [r4, #16]
 354:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_idx = (uint16_t)0;
 1578              		.loc 3 354 0
 1579 002e 6261     		str	r2, [r4, #20]
 355:../src/drivers/mss_uart/mss_uart.c **** 
 1580              		.loc 3 355 0
 1581 0030 A361     		str	r3, [r4, #24]
 358:../src/drivers/mss_uart/mss_uart.c **** 
 1582              		.loc 3 358 0
 1583 0032 94F90400 		ldrsb	r0, [r4, #4]
 1584 0036 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 1585              	.LVL139:
 364:../src/drivers/mss_uart/mss_uart.c **** 
 1586              		.loc 3 364 0
 1587 003a 2068     		ldr	r0, [r4]
 361:../src/drivers/mss_uart/mss_uart.c **** 
 1588              		.loc 3 361 0
 1589 003c 084B     		ldr	r3, .L177+8
 364:../src/drivers/mss_uart/mss_uart.c **** 
 1590              		.loc 3 364 0
 1591 003e 0430     		adds	r0, r0, #4
 361:../src/drivers/mss_uart/mss_uart.c **** 
 1592              		.loc 3 361 0
 1593 0040 6362     		str	r3, [r4, #36]
 364:../src/drivers/mss_uart/mss_uart.c **** 
 1594              		.loc 3 364 0
 1595 0042 0121     		movs	r1, #1
 1596 0044 FFF7FEFF 		bl	set_bit_reg8
 1597              	.LVL140:
 367:../src/drivers/mss_uart/mss_uart.c ****     }
 1598              		.loc 3 367 0
 1599 0048 94F90400 		ldrsb	r0, [r4, #4]
 369:../src/drivers/mss_uart/mss_uart.c **** 
 1600              		.loc 3 369 0
 1601 004c BDE81040 		pop	{r4, lr}
 1602              		.cfi_remember_state
 1603              		.cfi_restore 14
 1604              		.cfi_restore 4
 1605              		.cfi_def_cfa_offset 0
 1606              	.LVL141:
 367:../src/drivers/mss_uart/mss_uart.c ****     }
 1607              		.loc 3 367 0
 1608 0050 FFF7FEBF 		b	NVIC_EnableIRQ
 1609              	.LVL142:
 1610              	.L166:
 1611              		.cfi_restore_state
 1612 0054 10BD     		pop	{r4, pc}
 1613              	.LVL143:
 1614              	.L178:
 1615 0056 00BF     		.align	2
 1616              	.L177:
 1617 0058 00000000 		.word	g_mss_uart0
 1618 005c 00000000 		.word	g_mss_uart1
 1619 0060 00000000 		.word	default_tx_handler
 1620              		.cfi_endproc
 1621              	.LFE84:
 1623              		.section	.text.MSS_UART_tx_complete,"ax",%progbits
 1624              		.align	1
 1625              		.global	MSS_UART_tx_complete
 1626              		.thumb
 1627              		.thumb_func
 1629              	MSS_UART_tx_complete:
 1630              	.LFB85:
 379:../src/drivers/mss_uart/mss_uart.c ****     int8_t ret_value = 0;
 1631              		.loc 3 379 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636              	.LVL144:
 383:../src/drivers/mss_uart/mss_uart.c **** 
 1637              		.loc 3 383 0
 1638 0000 0A4B     		ldr	r3, .L183
 1639 0002 9842     		cmp	r0, r3
 1640 0004 04D0     		beq	.L180
 383:../src/drivers/mss_uart/mss_uart.c **** 
 1641              		.loc 3 383 0 is_stmt 0 discriminator 1
 1642 0006 0A4B     		ldr	r3, .L183+4
 1643 0008 9842     		cmp	r0, r3
 1644 000a 01D0     		beq	.L180
 383:../src/drivers/mss_uart/mss_uart.c **** 
 1645              		.loc 3 383 0 discriminator 2
 1646              	@ 383 "../src/drivers/mss_uart/mss_uart.c" 1
 1647 000c 00BE     		BKPT
 1648              		
 1649              	@ 0 "" 2
 1650              		.thumb
 1651 000e 0AE0     		b	.L182
 1652              	.L180:
 388:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 1653              		.loc 3 388 0 is_stmt 1
 1654 0010 0368     		ldr	r3, [r0]
 389:../src/drivers/mss_uart/mss_uart.c **** 
 1655              		.loc 3 389 0
 1656 0012 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 388:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 1657              		.loc 3 388 0
 1658 0014 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1659 0016 DBB2     		uxtb	r3, r3
 1660              	.LVL145:
 389:../src/drivers/mss_uart/mss_uart.c **** 
 1661              		.loc 3 389 0
 1662 0018 1A43     		orrs	r2, r2, r3
 1663 001a 4273     		strb	r2, [r0, #13]
 391:../src/drivers/mss_uart/mss_uart.c ****            ((status & MSS_UART_TEMT) != 0u))
 1664              		.loc 3 391 0
 1665 001c 4269     		ldr	r2, [r0, #20]
 1666 001e 12B9     		cbnz	r2, .L182
 380:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 1667              		.loc 3 380 0 discriminator 1
 1668 0020 C3F38010 		ubfx	r0, r3, #6, #1
 1669              	.LVL146:
 1670 0024 7047     		bx	lr
 1671              	.LVL147:
 1672              	.L182:
 380:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 1673              		.loc 3 380 0 is_stmt 0
 1674 0026 0020     		movs	r0, #0
 1675              	.LVL148:
 398:../src/drivers/mss_uart/mss_uart.c **** 
 1676              		.loc 3 398 0 is_stmt 1
 1677 0028 7047     		bx	lr
 1678              	.L184:
 1679 002a 00BF     		.align	2
 1680              	.L183:
 1681 002c 00000000 		.word	g_mss_uart0
 1682 0030 00000000 		.word	g_mss_uart1
 1683              		.cfi_endproc
 1684              	.LFE85:
 1686              		.section	.text.MSS_UART_get_rx,"ax",%progbits
 1687              		.align	1
 1688              		.global	MSS_UART_get_rx
 1689              		.thumb
 1690              		.thumb_func
 1692              	MSS_UART_get_rx:
 1693              	.LFB86:
 411:../src/drivers/mss_uart/mss_uart.c ****     size_t rx_size = 0u;
 1694              		.loc 3 411 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698              	.LVL149:
 1699 0000 0346     		mov	r3, r0
 415:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(rx_buff != ((uint8_t *)0));
 1700              		.loc 3 415 0
 1701 0002 1848     		ldr	r0, .L199
 1702              	.LVL150:
 411:../src/drivers/mss_uart/mss_uart.c ****     size_t rx_size = 0u;
 1703              		.loc 3 411 0
 1704 0004 30B5     		push	{r4, r5, lr}
 1705              		.cfi_def_cfa_offset 12
 1706              		.cfi_offset 4, -12
 1707              		.cfi_offset 5, -8
 1708              		.cfi_offset 14, -4
 415:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(rx_buff != ((uint8_t *)0));
 1709              		.loc 3 415 0
 1710 0006 8342     		cmp	r3, r0
 1711 0008 03D0     		beq	.L186
 415:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(rx_buff != ((uint8_t *)0));
 1712              		.loc 3 415 0 is_stmt 0 discriminator 1
 1713 000a 174C     		ldr	r4, .L199+4
 1714 000c A342     		cmp	r3, r4
 1715 000e 00D0     		beq	.L186
 415:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(rx_buff != ((uint8_t *)0));
 1716              		.loc 3 415 0 discriminator 2
 1717              	@ 415 "../src/drivers/mss_uart/mss_uart.c" 1
 1718 0010 00BE     		BKPT
 1719              		
 1720              	@ 0 "" 2
 1721              		.thumb
 1722              	.L186:
 416:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(buff_size > 0u);
 1723              		.loc 3 416 0 is_stmt 1
 1724 0012 01B9     		cbnz	r1, .L187
 416:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(buff_size > 0u);
 1725              		.loc 3 416 0 is_stmt 0 discriminator 1
 1726              	@ 416 "../src/drivers/mss_uart/mss_uart.c" 1
 1727 0014 00BE     		BKPT
 1728              		
 1729              	@ 0 "" 2
 1730              		.thumb
 1731              	.L187:
 417:../src/drivers/mss_uart/mss_uart.c **** 
 1732              		.loc 3 417 0 is_stmt 1
 1733 0016 02B9     		cbnz	r2, .L188
 417:../src/drivers/mss_uart/mss_uart.c **** 
 1734              		.loc 3 417 0 is_stmt 0 discriminator 1
 1735              	@ 417 "../src/drivers/mss_uart/mss_uart.c" 1
 1736 0018 00BE     		BKPT
 1737              		
 1738              	@ 0 "" 2
 1739              		.thumb
 1740              	.L188:
 419:../src/drivers/mss_uart/mss_uart.c ****        (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
 1741              		.loc 3 419 0 is_stmt 1
 1742 001a 8342     		cmp	r3, r0
 1743 001c 02D0     		beq	.L189
 419:../src/drivers/mss_uart/mss_uart.c ****        (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
 1744              		.loc 3 419 0 is_stmt 0 discriminator 2
 1745 001e 1248     		ldr	r0, .L199+4
 1746 0020 8342     		cmp	r3, r0
 1747 0022 17D1     		bne	.L193
 1748              	.L189:
 419:../src/drivers/mss_uart/mss_uart.c ****        (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
 1749              		.loc 3 419 0 discriminator 3
 1750 0024 C1B1     		cbz	r1, .L194
 420:../src/drivers/mss_uart/mss_uart.c ****     {
 1751              		.loc 3 420 0 is_stmt 1
 1752 0026 D2B1     		cbz	r2, .L190
 422:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 1753              		.loc 3 422 0
 1754 0028 1868     		ldr	r0, [r3]
 1755 002a 047D     		ldrb	r4, [r0, #20]	@ zero_extendqisi2
 423:../src/drivers/mss_uart/mss_uart.c **** 
 1756              		.loc 3 423 0
 1757 002c 587B     		ldrb	r0, [r3, #13]	@ zero_extendqisi2
 422:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 1758              		.loc 3 422 0
 1759 002e E4B2     		uxtb	r4, r4
 1760              	.LVL151:
 423:../src/drivers/mss_uart/mss_uart.c **** 
 1761              		.loc 3 423 0
 1762 0030 2043     		orrs	r0, r0, r4
 1763 0032 5873     		strb	r0, [r3, #13]
 412:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 1764              		.loc 3 412 0
 1765 0034 0020     		movs	r0, #0
 1766              	.LVL152:
 1767              	.L191:
 425:../src/drivers/mss_uart/mss_uart.c ****               (rx_size < buff_size))
 1768              		.loc 3 425 0
 1769 0036 E407     		lsls	r4, r4, #31
 1770              	.LVL153:
 1771 0038 10D5     		bpl	.L195
 425:../src/drivers/mss_uart/mss_uart.c ****               (rx_size < buff_size))
 1772              		.loc 3 425 0 is_stmt 0 discriminator 1
 1773 003a 9042     		cmp	r0, r2
 1774 003c 0FD0     		beq	.L190
 428:../src/drivers/mss_uart/mss_uart.c ****             ++rx_size;
 1775              		.loc 3 428 0 is_stmt 1
 1776 003e 1C68     		ldr	r4, [r3]
 1777 0040 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 1778 0042 0C54     		strb	r4, [r1, r0]
 430:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 1779              		.loc 3 430 0
 1780 0044 1C68     		ldr	r4, [r3]
 431:../src/drivers/mss_uart/mss_uart.c ****         }
 1781              		.loc 3 431 0
 1782 0046 5D7B     		ldrb	r5, [r3, #13]	@ zero_extendqisi2
 430:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 1783              		.loc 3 430 0
 1784 0048 247D     		ldrb	r4, [r4, #20]	@ zero_extendqisi2
 429:../src/drivers/mss_uart/mss_uart.c ****             status = this_uart->hw_reg->LSR;
 1785              		.loc 3 429 0
 1786 004a 0130     		adds	r0, r0, #1
 1787              	.LVL154:
 430:../src/drivers/mss_uart/mss_uart.c ****             this_uart->status |= status;
 1788              		.loc 3 430 0
 1789 004c E4B2     		uxtb	r4, r4
 1790              	.LVL155:
 431:../src/drivers/mss_uart/mss_uart.c ****         }
 1791              		.loc 3 431 0
 1792 004e 2543     		orrs	r5, r5, r4
 1793 0050 5D73     		strb	r5, [r3, #13]
 1794 0052 F0E7     		b	.L191
 1795              	.LVL156:
 1796              	.L193:
 412:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 1797              		.loc 3 412 0
 1798 0054 0022     		movs	r2, #0
 1799              	.LVL157:
 1800 0056 02E0     		b	.L190
 1801              	.LVL158:
 1802              	.L194:
 1803 0058 0A46     		mov	r2, r1
 1804              	.LVL159:
 1805 005a 00E0     		b	.L190
 1806              	.LVL160:
 1807              	.L195:
 1808 005c 0246     		mov	r2, r0
 1809              	.LVL161:
 1810              	.L190:
 435:../src/drivers/mss_uart/mss_uart.c **** /***************************************************************************//**
 1811              		.loc 3 435 0
 1812 005e 1046     		mov	r0, r2
 1813 0060 30BD     		pop	{r4, r5, pc}
 1814              	.L200:
 1815 0062 00BF     		.align	2
 1816              	.L199:
 1817 0064 00000000 		.word	g_mss_uart0
 1818 0068 00000000 		.word	g_mss_uart1
 1819              		.cfi_endproc
 1820              	.LFE86:
 1822              		.section	.text.MSS_UART_enable_irq,"ax",%progbits
 1823              		.align	1
 1824              		.global	MSS_UART_enable_irq
 1825              		.thumb
 1826              		.thumb_func
 1828              	MSS_UART_enable_irq:
 1829              	.LFB87:
 445:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1830              		.loc 3 445 0
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 0
 1833              		@ frame_needed = 0, uses_anonymous_args = 0
 1834              	.LVL162:
 1835 0000 38B5     		push	{r3, r4, r5, lr}
 1836              		.cfi_def_cfa_offset 16
 1837              		.cfi_offset 3, -16
 1838              		.cfi_offset 4, -12
 1839              		.cfi_offset 5, -8
 1840              		.cfi_offset 14, -4
 446:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_IRQ > irq_mask);
 1841              		.loc 3 446 0
 1842 0002 194B     		ldr	r3, .L208
 445:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1843              		.loc 3 445 0
 1844 0004 0446     		mov	r4, r0
 446:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_IRQ > irq_mask);
 1845              		.loc 3 446 0
 1846 0006 9842     		cmp	r0, r3
 445:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1847              		.loc 3 445 0
 1848 0008 0D46     		mov	r5, r1
 1849 000a 4FF6FF72 		movw	r2, #65535
 446:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_IRQ > irq_mask);
 1850              		.loc 3 446 0
 1851 000e 06D0     		beq	.L202
 446:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_IRQ > irq_mask);
 1852              		.loc 3 446 0 is_stmt 0 discriminator 1
 1853 0010 1649     		ldr	r1, .L208+4
 1854              	.LVL163:
 1855 0012 8842     		cmp	r0, r1
 1856 0014 03D0     		beq	.L202
 446:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_IRQ > irq_mask);
 1857              		.loc 3 446 0 discriminator 2
 1858              	@ 446 "../src/drivers/mss_uart/mss_uart.c" 1
 1859 0016 00BE     		BKPT
 1860              		
 1861              	@ 0 "" 2
 447:../src/drivers/mss_uart/mss_uart.c **** 
 1862              		.loc 3 447 0 is_stmt 1 discriminator 2
 1863              		.thumb
 1864 0018 9542     		cmp	r5, r2
 1865 001a 24D1     		bne	.L201
 1866 001c 01E0     		b	.L204
 1867              	.L202:
 447:../src/drivers/mss_uart/mss_uart.c **** 
 1868              		.loc 3 447 0 is_stmt 0
 1869 001e 9542     		cmp	r5, r2
 1870 0020 09D1     		bne	.L206
 1871              	.L204:
 447:../src/drivers/mss_uart/mss_uart.c **** 
 1872              		.loc 3 447 0 discriminator 1
 1873              	@ 447 "../src/drivers/mss_uart/mss_uart.c" 1
 1874 0022 00BE     		BKPT
 1875              		
 1876              	@ 0 "" 2
 449:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_IRQ > irq_mask))
 1877              		.loc 3 449 0 is_stmt 1 discriminator 1
 1878              		.thumb
 1879 0024 9C42     		cmp	r4, r3
 1880 0026 1ED0     		beq	.L201
 449:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_IRQ > irq_mask))
 1881              		.loc 3 449 0 is_stmt 0 discriminator 2
 1882 0028 104B     		ldr	r3, .L208+4
 1883 002a 9C42     		cmp	r4, r3
 1884 002c 1BD1     		bne	.L201
 449:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_IRQ > irq_mask))
 1885              		.loc 3 449 0 discriminator 3
 1886 002e 4FF6FF73 		movw	r3, #65535
 1887 0032 9D42     		cmp	r5, r3
 1888 0034 17D0     		beq	.L201
 1889              	.L206:
 453:../src/drivers/mss_uart/mss_uart.c **** 
 1890              		.loc 3 453 0 is_stmt 1
 1891 0036 94F90400 		ldrsb	r0, [r4, #4]
 1892              	.LVL164:
 1893 003a FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 1894              	.LVL165:
 461:../src/drivers/mss_uart/mss_uart.c **** 
 1895              		.loc 3 461 0
 1896 003e 2268     		ldr	r2, [r4]
 1897 0040 05F00F03 		and	r3, r5, #15
 1898 0044 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1899 0046 0B43     		orrs	r3, r3, r1
 1900 0048 1371     		strb	r3, [r2, #4]
 470:../src/drivers/mss_uart/mss_uart.c **** 
 1901              		.loc 3 470 0
 1902 004a 2368     		ldr	r3, [r4]
 1903 004c 93F82410 		ldrb	r1, [r3, #36]	@ zero_extendqisi2
 1904 0050 41EA1515 		orr	r5, r1, r5, lsr #4
 1905 0054 EDB2     		uxtb	r5, r5
 1906 0056 83F82450 		strb	r5, [r3, #36]
 473:../src/drivers/mss_uart/mss_uart.c ****     }
 1907              		.loc 3 473 0
 1908 005a 94F90400 		ldrsb	r0, [r4, #4]
 475:../src/drivers/mss_uart/mss_uart.c **** 
 1909              		.loc 3 475 0
 1910 005e BDE83840 		pop	{r3, r4, r5, lr}
 1911              		.cfi_remember_state
 1912              		.cfi_restore 14
 1913              		.cfi_restore 5
 1914              		.cfi_restore 4
 1915              		.cfi_restore 3
 1916              		.cfi_def_cfa_offset 0
 1917              	.LVL166:
 473:../src/drivers/mss_uart/mss_uart.c ****     }
 1918              		.loc 3 473 0
 1919 0062 FFF7FEBF 		b	NVIC_EnableIRQ
 1920              	.LVL167:
 1921              	.L201:
 1922              		.cfi_restore_state
 1923 0066 38BD     		pop	{r3, r4, r5, pc}
 1924              	.L209:
 1925              		.align	2
 1926              	.L208:
 1927 0068 00000000 		.word	g_mss_uart0
 1928 006c 00000000 		.word	g_mss_uart1
 1929              		.cfi_endproc
 1930              	.LFE87:
 1932              		.section	.text.MSS_UART_disable_irq,"ax",%progbits
 1933              		.align	1
 1934              		.global	MSS_UART_disable_irq
 1935              		.thumb
 1936              		.thumb_func
 1938              	MSS_UART_disable_irq:
 1939              	.LFB88:
 486:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1940              		.loc 3 486 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 1944              	.LVL168:
 1945 0000 38B5     		push	{r3, r4, r5, lr}
 1946              		.cfi_def_cfa_offset 16
 1947              		.cfi_offset 3, -16
 1948              		.cfi_offset 4, -12
 1949              		.cfi_offset 5, -8
 1950              		.cfi_offset 14, -4
 487:../src/drivers/mss_uart/mss_uart.c **** 
 1951              		.loc 3 487 0
 1952 0002 164B     		ldr	r3, .L213
 486:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1953              		.loc 3 486 0
 1954 0004 0446     		mov	r4, r0
 487:../src/drivers/mss_uart/mss_uart.c **** 
 1955              		.loc 3 487 0
 1956 0006 9842     		cmp	r0, r3
 486:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 1957              		.loc 3 486 0
 1958 0008 0D46     		mov	r5, r1
 487:../src/drivers/mss_uart/mss_uart.c **** 
 1959              		.loc 3 487 0
 1960 000a 04D0     		beq	.L211
 487:../src/drivers/mss_uart/mss_uart.c **** 
 1961              		.loc 3 487 0 is_stmt 0 discriminator 1
 1962 000c 144B     		ldr	r3, .L213+4
 1963 000e 9842     		cmp	r0, r3
 1964 0010 01D0     		beq	.L211
 487:../src/drivers/mss_uart/mss_uart.c **** 
 1965              		.loc 3 487 0 discriminator 2
 1966              	@ 487 "../src/drivers/mss_uart/mss_uart.c" 1
 1967 0012 00BE     		BKPT
 1968              		
 1969              	@ 0 "" 2
 1970              		.thumb
 1971 0014 38BD     		pop	{r3, r4, r5, pc}
 1972              	.L211:
 497:../src/drivers/mss_uart/mss_uart.c **** 
 1973              		.loc 3 497 0 is_stmt 1
 1974 0016 2268     		ldr	r2, [r4]
 1975 0018 05F00F01 		and	r1, r5, #15
 1976              	.LVL169:
 1977 001c 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1978 001e 23EA0103 		bic	r3, r3, r1
 1979 0022 1371     		strb	r3, [r2, #4]
 506:../src/drivers/mss_uart/mss_uart.c **** 
 1980              		.loc 3 506 0
 1981 0024 2268     		ldr	r2, [r4]
 1982 0026 92F82430 		ldrb	r3, [r2, #36]	@ zero_extendqisi2
 1983 002a 63EA1523 		orn	r3, r3, r5, lsr #8
 1984 002e DBB2     		uxtb	r3, r3
 1985 0030 82F82430 		strb	r3, [r2, #36]
 509:../src/drivers/mss_uart/mss_uart.c **** 
 1986              		.loc 3 509 0
 1987 0034 94F90400 		ldrsb	r0, [r4, #4]
 1988              	.LVL170:
 1989 0038 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 1990              	.LVL171:
 511:../src/drivers/mss_uart/mss_uart.c ****         {
 1991              		.loc 3 511 0
 1992 003c 0F2D     		cmp	r5, #15
 1993 003e 0BD1     		bne	.L210
 514:../src/drivers/mss_uart/mss_uart.c **** 
 1994              		.loc 3 514 0
 1995 0040 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 1996              	.LVL172:
 1997              	.LBB26:
 1998              	.LBB27:
1396:C:\Microsemi\SoftConsole_v4.0\CMSIS\V4.3\Include\core_cm3.h **** }
 1999              		.loc 1 1396 0
 2000 0042 0121     		movs	r1, #1
 2001 0044 53B2     		sxtb	r3, r2
 2002 0046 02F01F02 		and	r2, r2, #31
 2003              	.LVL173:
 2004 004a 01FA02F2 		lsl	r2, r1, r2
 2005 004e 5B09     		lsrs	r3, r3, #5
 2006              	.LVL174:
 2007 0050 0449     		ldr	r1, .L213+8
 2008 0052 2033     		adds	r3, r3, #32
 2009 0054 41F82320 		str	r2, [r1, r3, lsl #2]
 2010              	.LVL175:
 2011              	.L210:
 2012 0058 38BD     		pop	{r3, r4, r5, pc}
 2013              	.LVL176:
 2014              	.L214:
 2015 005a 00BF     		.align	2
 2016              	.L213:
 2017 005c 00000000 		.word	g_mss_uart0
 2018 0060 00000000 		.word	g_mss_uart1
 2019 0064 00E100E0 		.word	-536813312
 2020              	.LBE27:
 2021              	.LBE26:
 2022              		.cfi_endproc
 2023              	.LFE88:
 2025              		.section	.text.MSS_UART_set_rx_handler,"ax",%progbits
 2026              		.align	1
 2027              		.global	MSS_UART_set_rx_handler
 2028              		.thumb
 2029              		.thumb_func
 2031              	MSS_UART_set_rx_handler:
 2032              	.LFB89:
 530:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2033              		.loc 3 530 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037              	.LVL177:
 531:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER );
 2038              		.loc 3 531 0
 2039 0000 164B     		ldr	r3, .L224
 530:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2040              		.loc 3 530 0
 2041 0002 10B5     		push	{r4, lr}
 2042              		.cfi_def_cfa_offset 8
 2043              		.cfi_offset 4, -8
 2044              		.cfi_offset 14, -4
 531:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER );
 2045              		.loc 3 531 0
 2046 0004 9842     		cmp	r0, r3
 530:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2047              		.loc 3 530 0
 2048 0006 0446     		mov	r4, r0
 531:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER );
 2049              		.loc 3 531 0
 2050 0008 03D0     		beq	.L216
 531:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER );
 2051              		.loc 3 531 0 is_stmt 0 discriminator 1
 2052 000a 1548     		ldr	r0, .L224+4
 2053              	.LVL178:
 2054 000c 8442     		cmp	r4, r0
 2055 000e 00D0     		beq	.L216
 531:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER );
 2056              		.loc 3 531 0 discriminator 2
 2057              	@ 531 "../src/drivers/mss_uart/mss_uart.c" 1
 2058 0010 00BE     		BKPT
 2059              		
 2060              	@ 0 "" 2
 2061              		.thumb
 2062              	.L216:
 532:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
 2063              		.loc 3 532 0 is_stmt 1
 2064 0012 01B9     		cbnz	r1, .L217
 532:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
 2065              		.loc 3 532 0 is_stmt 0 discriminator 1
 2066              	@ 532 "../src/drivers/mss_uart/mss_uart.c" 1
 2067 0014 00BE     		BKPT
 2068              		
 2069              	@ 0 "" 2
 2070              		.thumb
 2071              	.L217:
 533:../src/drivers/mss_uart/mss_uart.c **** 
 2072              		.loc 3 533 0 is_stmt 1
 2073 0016 C02A     		cmp	r2, #192
 2074 0018 00D9     		bls	.L218
 533:../src/drivers/mss_uart/mss_uart.c **** 
 2075              		.loc 3 533 0 is_stmt 0 discriminator 1
 2076              	@ 533 "../src/drivers/mss_uart/mss_uart.c" 1
 2077 001a 00BE     		BKPT
 2078              		
 2079              	@ 0 "" 2
 2080              		.thumb
 2081              	.L218:
 535:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER) &&
 2082              		.loc 3 535 0 is_stmt 1
 2083 001c 9C42     		cmp	r4, r3
 2084 001e 02D0     		beq	.L219
 535:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER) &&
 2085              		.loc 3 535 0 is_stmt 0 discriminator 2
 2086 0020 0F4B     		ldr	r3, .L224+4
 2087 0022 9C42     		cmp	r4, r3
 2088 0024 18D1     		bne	.L215
 2089              	.L219:
 535:../src/drivers/mss_uart/mss_uart.c ****        (handler != INVALID_IRQ_HANDLER) &&
 2090              		.loc 3 535 0 discriminator 3
 2091 0026 B9B1     		cbz	r1, .L215
 536:../src/drivers/mss_uart/mss_uart.c ****        (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
 2092              		.loc 3 536 0 is_stmt 1
 2093 0028 C02A     		cmp	r2, #192
 2094 002a 15D8     		bhi	.L215
 539:../src/drivers/mss_uart/mss_uart.c **** 
 2095              		.loc 3 539 0
 2096 002c 2162     		str	r1, [r4, #32]
 542:../src/drivers/mss_uart/mss_uart.c ****                                  (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
 2097              		.loc 3 542 0
 2098 002e 2168     		ldr	r1, [r4]
 2099              	.LVL179:
 2100 0030 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 2101 0032 03F03F03 		and	r3, r3, #63
 2102 0036 1A43     		orrs	r2, r2, r3
 2103              	.LVL180:
 2104 0038 0A72     		strb	r2, [r1, #8]
 2105              	.LVL181:
 546:../src/drivers/mss_uart/mss_uart.c **** 
 2106              		.loc 3 546 0
 2107 003a 94F90400 		ldrsb	r0, [r4, #4]
 2108 003e FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 2109              	.LVL182:
 549:../src/drivers/mss_uart/mss_uart.c **** 
 2110              		.loc 3 549 0
 2111 0042 2068     		ldr	r0, [r4]
 2112 0044 0021     		movs	r1, #0
 2113 0046 0430     		adds	r0, r0, #4
 2114 0048 FFF7FEFF 		bl	set_bit_reg8
 2115              	.LVL183:
 552:../src/drivers/mss_uart/mss_uart.c ****     }
 2116              		.loc 3 552 0
 2117 004c 94F90400 		ldrsb	r0, [r4, #4]
 554:../src/drivers/mss_uart/mss_uart.c **** 
 2118              		.loc 3 554 0
 2119 0050 BDE81040 		pop	{r4, lr}
 2120              		.cfi_remember_state
 2121              		.cfi_restore 14
 2122              		.cfi_restore 4
 2123              		.cfi_def_cfa_offset 0
 2124              	.LVL184:
 552:../src/drivers/mss_uart/mss_uart.c ****     }
 2125              		.loc 3 552 0
 2126 0054 FFF7FEBF 		b	NVIC_EnableIRQ
 2127              	.LVL185:
 2128              	.L215:
 2129              		.cfi_restore_state
 2130 0058 10BD     		pop	{r4, pc}
 2131              	.LVL186:
 2132              	.L225:
 2133 005a 00BF     		.align	2
 2134              	.L224:
 2135 005c 00000000 		.word	g_mss_uart0
 2136 0060 00000000 		.word	g_mss_uart1
 2137              		.cfi_endproc
 2138              	.LFE89:
 2140              		.section	.text.MSS_UART_set_loopback,"ax",%progbits
 2141              		.align	1
 2142              		.global	MSS_UART_set_loopback
 2143              		.thumb
 2144              		.thumb_func
 2146              	MSS_UART_set_loopback:
 2147              	.LFB90:
 565:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2148              		.loc 3 565 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 2152              		@ link register save eliminated.
 2153              	.LVL187:
 566:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_LOOPBACK > loopback);
 2154              		.loc 3 566 0
 2155 0000 1A4B     		ldr	r3, .L240
 2156 0002 9842     		cmp	r0, r3
 2157 0004 03D0     		beq	.L238
 566:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_LOOPBACK > loopback);
 2158              		.loc 3 566 0 is_stmt 0 discriminator 1
 2159 0006 1A4A     		ldr	r2, .L240+4
 2160 0008 9042     		cmp	r0, r2
 2161 000a 00D0     		beq	.L238
 566:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_LOOPBACK > loopback);
 2162              		.loc 3 566 0 discriminator 2
 2163              	@ 566 "../src/drivers/mss_uart/mss_uart.c" 1
 2164 000c 00BE     		BKPT
 2165              		
 2166              	@ 0 "" 2
 2167              		.thumb
 2168              	.L238:
 567:../src/drivers/mss_uart/mss_uart.c **** 
 2169              		.loc 3 567 0 is_stmt 1 discriminator 2
 2170 000e 0529     		cmp	r1, #5
 2171 0010 07D9     		bls	.L228
 567:../src/drivers/mss_uart/mss_uart.c **** 
 2172              		.loc 3 567 0 is_stmt 0 discriminator 1
 2173              	@ 567 "../src/drivers/mss_uart/mss_uart.c" 1
 2174 0012 00BE     		BKPT
 2175              		
 2176              	@ 0 "" 2
 569:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_LOOPBACK > loopback))
 2177              		.loc 3 569 0 is_stmt 1 discriminator 1
 2178              		.thumb
 2179 0014 9842     		cmp	r0, r3
 2180 0016 04D0     		beq	.L228
 2181 0018 154B     		ldr	r3, .L240+4
 2182 001a 9842     		cmp	r0, r3
 2183 001c 01D0     		beq	.L228
 569:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_LOOPBACK > loopback))
 2184              		.loc 3 569 0 is_stmt 0 discriminator 2
 2185 001e 0529     		cmp	r1, #5
 2186 0020 22D8     		bhi	.L226
 2187              	.L228:
 572:../src/drivers/mss_uart/mss_uart.c ****         {
 2188              		.loc 3 572 0 is_stmt 1
 2189 0022 0529     		cmp	r1, #5
 2190 0024 1ED8     		bhi	.L230
 2191 0026 DFE801F0 		tbb	[pc, r1]
 2192              	.L232:
 2193 002a 03       		.byte	(.L231-.L232)/2
 2194 002b 08       		.byte	(.L233-.L232)/2
 2195 002c 0D       		.byte	(.L234-.L232)/2
 2196 002d 12       		.byte	(.L235-.L232)/2
 2197 002e 0D       		.byte	(.L234-.L232)/2
 2198 002f 17       		.byte	(.L236-.L232)/2
 2199              		.p2align 1
 2200              	.L231:
 576:../src/drivers/mss_uart/mss_uart.c ****                 break;
 2201              		.loc 3 576 0
 2202 0030 0068     		ldr	r0, [r0]
 2203              	.LVL188:
 2204 0032 0421     		movs	r1, #4
 2205              	.LVL189:
 2206 0034 1030     		adds	r0, r0, #16
 2207 0036 FFF7FEBF 		b	clear_bit_reg8
 2208              	.LVL190:
 2209              	.L233:
 581:../src/drivers/mss_uart/mss_uart.c ****                 break;
 2210              		.loc 3 581 0
 2211 003a 0068     		ldr	r0, [r0]
 2212              	.LVL191:
 2213 003c 0421     		movs	r1, #4
 2214              	.LVL192:
 2215 003e 1030     		adds	r0, r0, #16
 2216 0040 FFF7FEBF 		b	set_bit_reg8
 2217              	.LVL193:
 2218              	.L234:
 587:../src/drivers/mss_uart/mss_uart.c ****                 break;
 2219              		.loc 3 587 0
 2220 0044 0268     		ldr	r2, [r0]
 2221 0046 137C     		ldrb	r3, [r2, #16]	@ zero_extendqisi2
 2222 0048 03F0F903 		and	r3, r3, #249
 2223 004c 08E0     		b	.L239
 2224              	.L235:
 592:../src/drivers/mss_uart/mss_uart.c ****                 break;
 2225              		.loc 3 592 0
 2226 004e 0268     		ldr	r2, [r0]
 2227 0050 137C     		ldrb	r3, [r2, #16]	@ zero_extendqisi2
 2228 0052 43F02003 		orr	r3, r3, #32
 2229 0056 03E0     		b	.L239
 2230              	.L236:
 597:../src/drivers/mss_uart/mss_uart.c ****                 break;
 2231              		.loc 3 597 0
 2232 0058 0268     		ldr	r2, [r0]
 2233 005a 137C     		ldrb	r3, [r2, #16]	@ zero_extendqisi2
 2234 005c 43F04003 		orr	r3, r3, #64
 2235              	.L239:
 2236 0060 1374     		strb	r3, [r2, #16]
 598:../src/drivers/mss_uart/mss_uart.c ****                 
 2237              		.loc 3 598 0
 2238 0062 7047     		bx	lr
 2239              	.L230:
 603:../src/drivers/mss_uart/mss_uart.c ****                 break;
 2240              		.loc 3 603 0 discriminator 1
 2241              	@ 603 "../src/drivers/mss_uart/mss_uart.c" 1
 2242 0064 00BE     		BKPT
 2243              		
 2244              	@ 0 "" 2
 604:../src/drivers/mss_uart/mss_uart.c ****         }
 2245              		.loc 3 604 0 discriminator 1
 2246              		.thumb
 2247 0066 7047     		bx	lr
 2248              	.L226:
 2249 0068 7047     		bx	lr
 2250              	.L241:
 2251 006a 00BF     		.align	2
 2252              	.L240:
 2253 006c 00000000 		.word	g_mss_uart0
 2254 0070 00000000 		.word	g_mss_uart1
 2255              		.cfi_endproc
 2256              	.LFE90:
 2258              		.section	.text.UART0_IRQHandler,"ax",%progbits
 2259              		.align	1
 2260              		.global	UART0_IRQHandler
 2261              		.thumb
 2262              		.thumb_func
 2264              	UART0_IRQHandler:
 2265              	.LFB91:
 619:../src/drivers/mss_uart/mss_uart.c ****     MSS_UART_isr(&g_mss_uart0);
 2266              		.loc 3 619 0
 2267              		.cfi_startproc
 2268              		@ Stack Align: May be called with mis-aligned SP.
 2269              		@ args = 0, pretend = 0, frame = 0
 2270              		@ frame_needed = 0, uses_anonymous_args = 0
 2271              	.LVL194:
 2272 0000 6846     		mov	r0, sp
 2273              		.cfi_register 13, 0
 2274 0002 20F00701 		bic	r1, r0, #7
 2275 0006 8D46     		mov	sp, r1
 2276 0008 01B5     		push	{r0, lr}
 2277              		.cfi_def_cfa_offset 8
 2278              		.cfi_offset 13, -8
 2279              		.cfi_offset 14, -4
 2280              	.LBB30:
 2281              	.LBB31:
 2282 000a 0348     		ldr	r0, .L243
 2283 000c FFF7FEFF 		bl	MSS_UART_isr.part.0
 2284              	.LVL195:
 2285              	.LBE31:
 2286              	.LBE30:
 621:../src/drivers/mss_uart/mss_uart.c **** 
 2287              		.loc 3 621 0
 2288 0010 BDE80140 		pop	{r0, lr}
 2289              		.cfi_restore 14
 2290              		.cfi_restore 0
 2291              		.cfi_def_cfa_offset 0
 2292 0014 8546     		mov	sp, r0
 2293 0016 7047     		bx	lr
 2294              	.L244:
 2295              		.align	2
 2296              	.L243:
 2297 0018 00000000 		.word	g_mss_uart0
 2298              		.cfi_endproc
 2299              	.LFE91:
 2301              		.section	.text.UART1_IRQHandler,"ax",%progbits
 2302              		.align	1
 2303              		.global	UART1_IRQHandler
 2304              		.thumb
 2305              		.thumb_func
 2307              	UART1_IRQHandler:
 2308              	.LFB92:
 633:../src/drivers/mss_uart/mss_uart.c ****     MSS_UART_isr(&g_mss_uart1);
 2309              		.loc 3 633 0
 2310              		.cfi_startproc
 2311              		@ Stack Align: May be called with mis-aligned SP.
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 2314              	.LVL196:
 2315 0000 6846     		mov	r0, sp
 2316              		.cfi_register 13, 0
 2317 0002 20F00701 		bic	r1, r0, #7
 2318 0006 8D46     		mov	sp, r1
 2319 0008 01B5     		push	{r0, lr}
 2320              		.cfi_def_cfa_offset 8
 2321              		.cfi_offset 13, -8
 2322              		.cfi_offset 14, -4
 2323              	.LBB34:
 2324              	.LBB35:
 2325 000a 0348     		ldr	r0, .L246
 2326 000c FFF7FEFF 		bl	MSS_UART_isr.part.0
 2327              	.LVL197:
 2328              	.LBE35:
 2329              	.LBE34:
 635:../src/drivers/mss_uart/mss_uart.c **** 
 2330              		.loc 3 635 0
 2331 0010 BDE80140 		pop	{r0, lr}
 2332              		.cfi_restore 14
 2333              		.cfi_restore 0
 2334              		.cfi_def_cfa_offset 0
 2335 0014 8546     		mov	sp, r0
 2336 0016 7047     		bx	lr
 2337              	.L247:
 2338              		.align	2
 2339              	.L246:
 2340 0018 00000000 		.word	g_mss_uart1
 2341              		.cfi_endproc
 2342              	.LFE92:
 2344              		.section	.text.MSS_UART_set_rxstatus_handler,"ax",%progbits
 2345              		.align	1
 2346              		.global	MSS_UART_set_rxstatus_handler
 2347              		.thumb
 2348              		.thumb_func
 2350              	MSS_UART_set_rxstatus_handler:
 2351              	.LFB93:
 646:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2352              		.loc 3 646 0
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 0
 2355              		@ frame_needed = 0, uses_anonymous_args = 0
 2356              	.LVL198:
 647:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2357              		.loc 3 647 0
 2358 0000 0F4B     		ldr	r3, .L262
 646:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2359              		.loc 3 646 0
 2360 0002 10B5     		push	{r4, lr}
 2361              		.cfi_def_cfa_offset 8
 2362              		.cfi_offset 4, -8
 2363              		.cfi_offset 14, -4
 647:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2364              		.loc 3 647 0
 2365 0004 9842     		cmp	r0, r3
 646:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2366              		.loc 3 646 0
 2367 0006 0446     		mov	r4, r0
 647:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2368              		.loc 3 647 0
 2369 0008 05D0     		beq	.L249
 647:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2370              		.loc 3 647 0 is_stmt 0 discriminator 1
 2371 000a 0E4B     		ldr	r3, .L262+4
 2372 000c 9842     		cmp	r0, r3
 2373 000e 02D0     		beq	.L249
 647:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2374              		.loc 3 647 0 discriminator 2
 2375              	@ 647 "../src/drivers/mss_uart/mss_uart.c" 1
 2376 0010 00BE     		BKPT
 2377              		
 2378              	@ 0 "" 2
 648:../src/drivers/mss_uart/mss_uart.c **** 
 2379              		.loc 3 648 0 is_stmt 1 discriminator 2
 2380              		.thumb
 2381 0012 99B9     		cbnz	r1, .L248
 2382 0014 00E0     		b	.L251
 2383              	.L249:
 648:../src/drivers/mss_uart/mss_uart.c **** 
 2384              		.loc 3 648 0 is_stmt 0
 2385 0016 09B9     		cbnz	r1, .L253
 2386              	.L251:
 648:../src/drivers/mss_uart/mss_uart.c **** 
 2387              		.loc 3 648 0 discriminator 1
 2388              	@ 648 "../src/drivers/mss_uart/mss_uart.c" 1
 2389 0018 00BE     		BKPT
 2390              		
 2391              	@ 0 "" 2
 2392              		.thumb
 2393 001a 10BD     		pop	{r4, pc}
 2394              	.L253:
 653:../src/drivers/mss_uart/mss_uart.c **** 
 2395              		.loc 3 653 0 is_stmt 1
 2396 001c E161     		str	r1, [r4, #28]
 656:../src/drivers/mss_uart/mss_uart.c **** 
 2397              		.loc 3 656 0
 2398 001e 94F90400 		ldrsb	r0, [r4, #4]
 2399              	.LVL199:
 2400 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 2401              	.LVL200:
 659:../src/drivers/mss_uart/mss_uart.c **** 
 2402              		.loc 3 659 0
 2403 0026 2068     		ldr	r0, [r4]
 2404 0028 0221     		movs	r1, #2
 2405 002a 0430     		adds	r0, r0, #4
 2406 002c FFF7FEFF 		bl	set_bit_reg8
 2407              	.LVL201:
 662:../src/drivers/mss_uart/mss_uart.c ****     }
 2408              		.loc 3 662 0
 2409 0030 94F90400 		ldrsb	r0, [r4, #4]
 664:../src/drivers/mss_uart/mss_uart.c **** 
 2410              		.loc 3 664 0
 2411 0034 BDE81040 		pop	{r4, lr}
 2412              		.cfi_remember_state
 2413              		.cfi_restore 14
 2414              		.cfi_restore 4
 2415              		.cfi_def_cfa_offset 0
 2416              	.LVL202:
 662:../src/drivers/mss_uart/mss_uart.c ****     }
 2417              		.loc 3 662 0
 2418 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 2419              	.LVL203:
 2420              	.L248:
 2421              		.cfi_restore_state
 2422 003c 10BD     		pop	{r4, pc}
 2423              	.L263:
 2424 003e 00BF     		.align	2
 2425              	.L262:
 2426 0040 00000000 		.word	g_mss_uart0
 2427 0044 00000000 		.word	g_mss_uart1
 2428              		.cfi_endproc
 2429              	.LFE93:
 2431              		.section	.text.MSS_UART_set_tx_handler,"ax",%progbits
 2432              		.align	1
 2433              		.global	MSS_UART_set_tx_handler
 2434              		.thumb
 2435              		.thumb_func
 2437              	MSS_UART_set_tx_handler:
 2438              	.LFB94:
 675:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2439              		.loc 3 675 0
 2440              		.cfi_startproc
 2441              		@ args = 0, pretend = 0, frame = 0
 2442              		@ frame_needed = 0, uses_anonymous_args = 0
 2443              	.LVL204:
 676:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2444              		.loc 3 676 0
 2445 0000 104B     		ldr	r3, .L278
 675:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2446              		.loc 3 675 0
 2447 0002 10B5     		push	{r4, lr}
 2448              		.cfi_def_cfa_offset 8
 2449              		.cfi_offset 4, -8
 2450              		.cfi_offset 14, -4
 676:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2451              		.loc 3 676 0
 2452 0004 9842     		cmp	r0, r3
 675:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2453              		.loc 3 675 0
 2454 0006 0446     		mov	r4, r0
 676:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2455              		.loc 3 676 0
 2456 0008 05D0     		beq	.L265
 676:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2457              		.loc 3 676 0 is_stmt 0 discriminator 1
 2458 000a 0F4B     		ldr	r3, .L278+4
 2459 000c 9842     		cmp	r0, r3
 2460 000e 02D0     		beq	.L265
 676:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2461              		.loc 3 676 0 discriminator 2
 2462              	@ 676 "../src/drivers/mss_uart/mss_uart.c" 1
 2463 0010 00BE     		BKPT
 2464              		
 2465              	@ 0 "" 2
 677:../src/drivers/mss_uart/mss_uart.c **** 
 2466              		.loc 3 677 0 is_stmt 1 discriminator 2
 2467              		.thumb
 2468 0012 B1B9     		cbnz	r1, .L264
 2469 0014 00E0     		b	.L267
 2470              	.L265:
 677:../src/drivers/mss_uart/mss_uart.c **** 
 2471              		.loc 3 677 0 is_stmt 0
 2472 0016 09B9     		cbnz	r1, .L269
 2473              	.L267:
 677:../src/drivers/mss_uart/mss_uart.c **** 
 2474              		.loc 3 677 0 discriminator 1
 2475              	@ 677 "../src/drivers/mss_uart/mss_uart.c" 1
 2476 0018 00BE     		BKPT
 2477              		
 2478              	@ 0 "" 2
 2479              		.thumb
 2480 001a 10BD     		pop	{r4, pc}
 2481              	.L269:
 685:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buff_size = 0u;
 2482              		.loc 3 685 0 is_stmt 1
 2483 001c 0023     		movs	r3, #0
 682:../src/drivers/mss_uart/mss_uart.c **** 
 2484              		.loc 3 682 0
 2485 001e 6162     		str	r1, [r4, #36]
 685:../src/drivers/mss_uart/mss_uart.c ****         this_uart->tx_buff_size = 0u;
 2486              		.loc 3 685 0
 2487 0020 2361     		str	r3, [r4, #16]
 686:../src/drivers/mss_uart/mss_uart.c **** 
 2488              		.loc 3 686 0
 2489 0022 6361     		str	r3, [r4, #20]
 689:../src/drivers/mss_uart/mss_uart.c **** 
 2490              		.loc 3 689 0
 2491 0024 94F90400 		ldrsb	r0, [r4, #4]
 2492              	.LVL205:
 2493 0028 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 2494              	.LVL206:
 692:../src/drivers/mss_uart/mss_uart.c **** 
 2495              		.loc 3 692 0
 2496 002c 2068     		ldr	r0, [r4]
 2497 002e 0121     		movs	r1, #1
 2498 0030 0430     		adds	r0, r0, #4
 2499 0032 FFF7FEFF 		bl	set_bit_reg8
 2500              	.LVL207:
 695:../src/drivers/mss_uart/mss_uart.c ****     }
 2501              		.loc 3 695 0
 2502 0036 94F90400 		ldrsb	r0, [r4, #4]
 697:../src/drivers/mss_uart/mss_uart.c **** 
 2503              		.loc 3 697 0
 2504 003a BDE81040 		pop	{r4, lr}
 2505              		.cfi_remember_state
 2506              		.cfi_restore 14
 2507              		.cfi_restore 4
 2508              		.cfi_def_cfa_offset 0
 2509              	.LVL208:
 695:../src/drivers/mss_uart/mss_uart.c ****     }
 2510              		.loc 3 695 0
 2511 003e FFF7FEBF 		b	NVIC_EnableIRQ
 2512              	.LVL209:
 2513              	.L264:
 2514              		.cfi_restore_state
 2515 0042 10BD     		pop	{r4, pc}
 2516              	.L279:
 2517              		.align	2
 2518              	.L278:
 2519 0044 00000000 		.word	g_mss_uart0
 2520 0048 00000000 		.word	g_mss_uart1
 2521              		.cfi_endproc
 2522              	.LFE94:
 2524              		.section	.text.MSS_UART_set_modemstatus_handler,"ax",%progbits
 2525              		.align	1
 2526              		.global	MSS_UART_set_modemstatus_handler
 2527              		.thumb
 2528              		.thumb_func
 2530              	MSS_UART_set_modemstatus_handler:
 2531              	.LFB95:
 708:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2532              		.loc 3 708 0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
 2536              	.LVL210:
 709:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2537              		.loc 3 709 0
 2538 0000 0F4B     		ldr	r3, .L294
 708:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2539              		.loc 3 708 0
 2540 0002 10B5     		push	{r4, lr}
 2541              		.cfi_def_cfa_offset 8
 2542              		.cfi_offset 4, -8
 2543              		.cfi_offset 14, -4
 709:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2544              		.loc 3 709 0
 2545 0004 9842     		cmp	r0, r3
 708:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2546              		.loc 3 708 0
 2547 0006 0446     		mov	r4, r0
 709:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2548              		.loc 3 709 0
 2549 0008 05D0     		beq	.L281
 709:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2550              		.loc 3 709 0 is_stmt 0 discriminator 1
 2551 000a 0E4B     		ldr	r3, .L294+4
 2552 000c 9842     		cmp	r0, r3
 2553 000e 02D0     		beq	.L281
 709:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 2554              		.loc 3 709 0 discriminator 2
 2555              	@ 709 "../src/drivers/mss_uart/mss_uart.c" 1
 2556 0010 00BE     		BKPT
 2557              		
 2558              	@ 0 "" 2
 710:../src/drivers/mss_uart/mss_uart.c **** 
 2559              		.loc 3 710 0 is_stmt 1 discriminator 2
 2560              		.thumb
 2561 0012 99B9     		cbnz	r1, .L280
 2562 0014 00E0     		b	.L283
 2563              	.L281:
 710:../src/drivers/mss_uart/mss_uart.c **** 
 2564              		.loc 3 710 0 is_stmt 0
 2565 0016 09B9     		cbnz	r1, .L285
 2566              	.L283:
 710:../src/drivers/mss_uart/mss_uart.c **** 
 2567              		.loc 3 710 0 discriminator 1
 2568              	@ 710 "../src/drivers/mss_uart/mss_uart.c" 1
 2569 0018 00BE     		BKPT
 2570              		
 2571              	@ 0 "" 2
 2572              		.thumb
 2573 001a 10BD     		pop	{r4, pc}
 2574              	.L285:
 715:../src/drivers/mss_uart/mss_uart.c **** 
 2575              		.loc 3 715 0 is_stmt 1
 2576 001c A162     		str	r1, [r4, #40]
 718:../src/drivers/mss_uart/mss_uart.c **** 
 2577              		.loc 3 718 0
 2578 001e 94F90400 		ldrsb	r0, [r4, #4]
 2579              	.LVL211:
 2580 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 2581              	.LVL212:
 721:../src/drivers/mss_uart/mss_uart.c **** 
 2582              		.loc 3 721 0
 2583 0026 2068     		ldr	r0, [r4]
 2584 0028 0321     		movs	r1, #3
 2585 002a 0430     		adds	r0, r0, #4
 2586 002c FFF7FEFF 		bl	set_bit_reg8
 2587              	.LVL213:
 724:../src/drivers/mss_uart/mss_uart.c ****     }
 2588              		.loc 3 724 0
 2589 0030 94F90400 		ldrsb	r0, [r4, #4]
 726:../src/drivers/mss_uart/mss_uart.c **** 
 2590              		.loc 3 726 0
 2591 0034 BDE81040 		pop	{r4, lr}
 2592              		.cfi_remember_state
 2593              		.cfi_restore 14
 2594              		.cfi_restore 4
 2595              		.cfi_def_cfa_offset 0
 2596              	.LVL214:
 724:../src/drivers/mss_uart/mss_uart.c ****     }
 2597              		.loc 3 724 0
 2598 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 2599              	.LVL215:
 2600              	.L280:
 2601              		.cfi_restore_state
 2602 003c 10BD     		pop	{r4, pc}
 2603              	.L295:
 2604 003e 00BF     		.align	2
 2605              	.L294:
 2606 0040 00000000 		.word	g_mss_uart0
 2607 0044 00000000 		.word	g_mss_uart1
 2608              		.cfi_endproc
 2609              	.LFE95:
 2611              		.section	.text.MSS_UART_fill_tx_fifo,"ax",%progbits
 2612              		.align	1
 2613              		.global	MSS_UART_fill_tx_fifo
 2614              		.thumb
 2615              		.thumb_func
 2617              	MSS_UART_fill_tx_fifo:
 2618              	.LFB96:
 738:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 2619              		.loc 3 738 0
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 0
 2622              		@ frame_needed = 0, uses_anonymous_args = 0
 2623              	.LVL216:
 2624 0000 0346     		mov	r3, r0
 2625              	.LVL217:
 742:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_buffer != ( (uint8_t *)0));
 2626              		.loc 3 742 0
 2627 0002 1548     		ldr	r0, .L316
 2628              	.LVL218:
 738:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = 0u;
 2629              		.loc 3 738 0
 2630 0004 30B5     		push	{r4, r5, lr}
 2631              		.cfi_def_cfa_offset 12
 2632              		.cfi_offset 4, -12
 2633              		.cfi_offset 5, -8
 2634              		.cfi_offset 14, -4
 742:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_buffer != ( (uint8_t *)0));
 2635              		.loc 3 742 0
 2636 0006 8342     		cmp	r3, r0
 2637 0008 03D0     		beq	.L297
 742:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_buffer != ( (uint8_t *)0));
 2638              		.loc 3 742 0 is_stmt 0 discriminator 1
 2639 000a 144C     		ldr	r4, .L316+4
 2640 000c A342     		cmp	r3, r4
 2641 000e 00D0     		beq	.L297
 742:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_buffer != ( (uint8_t *)0));
 2642              		.loc 3 742 0 discriminator 2
 2643              	@ 742 "../src/drivers/mss_uart/mss_uart.c" 1
 2644 0010 00BE     		BKPT
 2645              		
 2646              	@ 0 "" 2
 2647              		.thumb
 2648              	.L297:
 743:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0);
 2649              		.loc 3 743 0 is_stmt 1
 2650 0012 01B9     		cbnz	r1, .L298
 743:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(tx_size > 0);
 2651              		.loc 3 743 0 is_stmt 0 discriminator 1
 2652              	@ 743 "../src/drivers/mss_uart/mss_uart.c" 1
 2653 0014 00BE     		BKPT
 2654              		
 2655              	@ 0 "" 2
 2656              		.thumb
 2657              	.L298:
 744:../src/drivers/mss_uart/mss_uart.c **** 
 2658              		.loc 3 744 0 is_stmt 1
 2659 0016 02B9     		cbnz	r2, .L299
 744:../src/drivers/mss_uart/mss_uart.c **** 
 2660              		.loc 3 744 0 is_stmt 0 discriminator 1
 2661              	@ 744 "../src/drivers/mss_uart/mss_uart.c" 1
 2662 0018 00BE     		BKPT
 2663              		
 2664              	@ 0 "" 2
 2665              		.thumb
 2666              	.L299:
 748:../src/drivers/mss_uart/mss_uart.c ****        (tx_buffer != ((uint8_t *)0))   &&
 2667              		.loc 3 748 0 is_stmt 1
 2668 001a 8342     		cmp	r3, r0
 2669 001c 04D0     		beq	.L300
 748:../src/drivers/mss_uart/mss_uart.c ****        (tx_buffer != ((uint8_t *)0))   &&
 2670              		.loc 3 748 0 is_stmt 0 discriminator 2
 2671 001e 0F48     		ldr	r0, .L316+4
 2672 0020 8342     		cmp	r3, r0
 2673 0022 01D0     		beq	.L300
 2674              	.LVL219:
 2675              	.L302:
 740:../src/drivers/mss_uart/mss_uart.c **** 
 2676              		.loc 3 740 0 is_stmt 1
 2677 0024 0022     		movs	r2, #0
 2678              	.LVL220:
 2679 0026 15E0     		b	.L301
 2680              	.LVL221:
 2681              	.L300:
 748:../src/drivers/mss_uart/mss_uart.c ****        (tx_buffer != ((uint8_t *)0))   &&
 2682              		.loc 3 748 0 discriminator 3
 2683 0028 0029     		cmp	r1, #0
 2684 002a FBD0     		beq	.L302
 749:../src/drivers/mss_uart/mss_uart.c ****        (tx_size > 0u))
 2685              		.loc 3 749 0
 2686 002c 002A     		cmp	r2, #0
 2687 002e F9D0     		beq	.L302
 752:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 2688              		.loc 3 752 0
 2689 0030 1868     		ldr	r0, [r3]
 753:../src/drivers/mss_uart/mss_uart.c **** 
 2690              		.loc 3 753 0
 2691 0032 5C7B     		ldrb	r4, [r3, #13]	@ zero_extendqisi2
 752:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 2692              		.loc 3 752 0
 2693 0034 007D     		ldrb	r0, [r0, #20]	@ zero_extendqisi2
 2694 0036 C0B2     		uxtb	r0, r0
 2695              	.LVL222:
 753:../src/drivers/mss_uart/mss_uart.c **** 
 2696              		.loc 3 753 0
 2697 0038 0443     		orrs	r4, r4, r0
 755:../src/drivers/mss_uart/mss_uart.c ****         {
 2698              		.loc 3 755 0
 2699 003a 8006     		lsls	r0, r0, #26
 2700              	.LVL223:
 753:../src/drivers/mss_uart/mss_uart.c **** 
 2701              		.loc 3 753 0
 2702 003c 5C73     		strb	r4, [r3, #13]
 755:../src/drivers/mss_uart/mss_uart.c ****         {
 2703              		.loc 3 755 0
 2704 003e F1D5     		bpl	.L302
 2705              	.LVL224:
 2706              	.LBB36:
 757:../src/drivers/mss_uart/mss_uart.c **** 
 2707              		.loc 3 757 0
 2708 0040 102A     		cmp	r2, #16
 2709 0042 28BF     		it	cs
 2710 0044 1022     		movcs	r2, #16
 2711              	.LVL225:
 2712 0046 8818     		adds	r0, r1, r2
 2713              	.LVL226:
 2714              	.L304:
 768:../src/drivers/mss_uart/mss_uart.c ****             }
 2715              		.loc 3 768 0 discriminator 3
 2716 0048 11F8015B 		ldrb	r5, [r1], #1	@ zero_extendqisi2
 2717              	.LVL227:
 2718 004c 1C68     		ldr	r4, [r3]
 764:../src/drivers/mss_uart/mss_uart.c ****             {
 2719              		.loc 3 764 0 discriminator 3
 2720 004e 8142     		cmp	r1, r0
 768:../src/drivers/mss_uart/mss_uart.c ****             }
 2721              		.loc 3 768 0 discriminator 3
 2722 0050 2570     		strb	r5, [r4]
 2723              	.LVL228:
 764:../src/drivers/mss_uart/mss_uart.c ****             {
 2724              		.loc 3 764 0 discriminator 3
 2725 0052 F9D1     		bne	.L304
 2726              	.LVL229:
 2727              	.L301:
 2728              	.LBE36:
 773:../src/drivers/mss_uart/mss_uart.c **** 
 2729              		.loc 3 773 0
 2730 0054 1046     		mov	r0, r2
 2731 0056 30BD     		pop	{r4, r5, pc}
 2732              	.L317:
 2733              		.align	2
 2734              	.L316:
 2735 0058 00000000 		.word	g_mss_uart0
 2736 005c 00000000 		.word	g_mss_uart1
 2737              		.cfi_endproc
 2738              	.LFE96:
 2740              		.section	.text.MSS_UART_get_rx_status,"ax",%progbits
 2741              		.align	1
 2742              		.global	MSS_UART_get_rx_status
 2743              		.thumb
 2744              		.thumb_func
 2746              	MSS_UART_get_rx_status:
 2747              	.LFB97:
 783:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = MSS_UART_INVALID_PARAM;
 2748              		.loc 3 783 0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 0
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 2752              		@ link register save eliminated.
 2753              	.LVL230:
 786:../src/drivers/mss_uart/mss_uart.c **** 
 2754              		.loc 3 786 0
 2755 0000 094B     		ldr	r3, .L321
 2756 0002 9842     		cmp	r0, r3
 2757 0004 05D0     		beq	.L319
 786:../src/drivers/mss_uart/mss_uart.c **** 
 2758              		.loc 3 786 0 is_stmt 0 discriminator 1
 2759 0006 094B     		ldr	r3, .L321+4
 2760 0008 9842     		cmp	r0, r3
 2761 000a 02D0     		beq	.L319
 786:../src/drivers/mss_uart/mss_uart.c **** 
 2762              		.loc 3 786 0 discriminator 2
 2763              	@ 786 "../src/drivers/mss_uart/mss_uart.c" 1
 2764 000c 00BE     		BKPT
 2765              		
 2766              	@ 0 "" 2
 784:../src/drivers/mss_uart/mss_uart.c **** 
 2767              		.loc 3 784 0 is_stmt 1 discriminator 2
 2768              		.thumb
 2769 000e FF23     		movs	r3, #255
 2770 0010 07E0     		b	.L320
 2771              	.L319:
 798:../src/drivers/mss_uart/mss_uart.c ****         status = (this_uart->status & STATUS_ERROR_MASK);
 2772              		.loc 3 798 0
 2773 0012 0368     		ldr	r3, [r0]
 2774 0014 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 2775 0016 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 2776 0018 1343     		orrs	r3, r3, r2
 801:../src/drivers/mss_uart/mss_uart.c ****     }
 2777              		.loc 3 801 0
 2778 001a 0022     		movs	r2, #0
 799:../src/drivers/mss_uart/mss_uart.c ****         /* Clear the sticky status after reading */
 2779              		.loc 3 799 0
 2780 001c 03F09E03 		and	r3, r3, #158
 2781              	.LVL231:
 801:../src/drivers/mss_uart/mss_uart.c ****     }
 2782              		.loc 3 801 0
 2783 0020 4273     		strb	r2, [r0, #13]
 2784              	.LVL232:
 2785              	.L320:
 804:../src/drivers/mss_uart/mss_uart.c **** 
 2786              		.loc 3 804 0
 2787 0022 1846     		mov	r0, r3
 2788              	.LVL233:
 2789 0024 7047     		bx	lr
 2790              	.L322:
 2791 0026 00BF     		.align	2
 2792              	.L321:
 2793 0028 00000000 		.word	g_mss_uart0
 2794 002c 00000000 		.word	g_mss_uart1
 2795              		.cfi_endproc
 2796              	.LFE97:
 2798              		.section	.text.MSS_UART_get_modem_status,"ax",%progbits
 2799              		.align	1
 2800              		.global	MSS_UART_get_modem_status
 2801              		.thumb
 2802              		.thumb_func
 2804              	MSS_UART_get_modem_status:
 2805              	.LFB98:
 814:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = MSS_UART_INVALID_PARAM;
 2806              		.loc 3 814 0
 2807              		.cfi_startproc
 2808              		@ args = 0, pretend = 0, frame = 0
 2809              		@ frame_needed = 0, uses_anonymous_args = 0
 2810              		@ link register save eliminated.
 2811              	.LVL234:
 817:../src/drivers/mss_uart/mss_uart.c **** 
 2812              		.loc 3 817 0
 2813 0000 064B     		ldr	r3, .L326
 2814 0002 9842     		cmp	r0, r3
 2815 0004 05D0     		beq	.L324
 817:../src/drivers/mss_uart/mss_uart.c **** 
 2816              		.loc 3 817 0 is_stmt 0 discriminator 1
 2817 0006 064B     		ldr	r3, .L326+4
 2818 0008 9842     		cmp	r0, r3
 2819 000a 02D0     		beq	.L324
 817:../src/drivers/mss_uart/mss_uart.c **** 
 2820              		.loc 3 817 0 discriminator 2
 2821              	@ 817 "../src/drivers/mss_uart/mss_uart.c" 1
 2822 000c 00BE     		BKPT
 2823              		
 2824              	@ 0 "" 2
 815:../src/drivers/mss_uart/mss_uart.c **** 
 2825              		.loc 3 815 0 is_stmt 1 discriminator 2
 2826              		.thumb
 2827 000e FF20     		movs	r0, #255
 2828              	.LVL235:
 2829 0010 7047     		bx	lr
 2830              	.LVL236:
 2831              	.L324:
 832:../src/drivers/mss_uart/mss_uart.c ****     }
 2832              		.loc 3 832 0
 2833 0012 0368     		ldr	r3, [r0]
 2834 0014 187E     		ldrb	r0, [r3, #24]	@ zero_extendqisi2
 2835              	.LVL237:
 2836 0016 C0B2     		uxtb	r0, r0
 2837              	.LVL238:
 835:../src/drivers/mss_uart/mss_uart.c **** 
 2838              		.loc 3 835 0
 2839 0018 7047     		bx	lr
 2840              	.L327:
 2841 001a 00BF     		.align	2
 2842              	.L326:
 2843 001c 00000000 		.word	g_mss_uart0
 2844 0020 00000000 		.word	g_mss_uart1
 2845              		.cfi_endproc
 2846              	.LFE98:
 2848              		.section	.text.MSS_UART_get_tx_status,"ax",%progbits
 2849              		.align	1
 2850              		.global	MSS_UART_get_tx_status
 2851              		.thumb
 2852              		.thumb_func
 2854              	MSS_UART_get_tx_status:
 2855              	.LFB99:
 846:../src/drivers/mss_uart/mss_uart.c ****     uint8_t status = MSS_UART_TX_BUSY;
 2856              		.loc 3 846 0
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 2860              		@ link register save eliminated.
 2861              	.LVL239:
 849:../src/drivers/mss_uart/mss_uart.c **** 
 2862              		.loc 3 849 0
 2863 0000 084B     		ldr	r3, .L331
 2864 0002 9842     		cmp	r0, r3
 2865 0004 05D0     		beq	.L329
 849:../src/drivers/mss_uart/mss_uart.c **** 
 2866              		.loc 3 849 0 is_stmt 0 discriminator 1
 2867 0006 084B     		ldr	r3, .L331+4
 2868 0008 9842     		cmp	r0, r3
 2869 000a 02D0     		beq	.L329
 849:../src/drivers/mss_uart/mss_uart.c **** 
 2870              		.loc 3 849 0 discriminator 2
 2871              	@ 849 "../src/drivers/mss_uart/mss_uart.c" 1
 2872 000c 00BE     		BKPT
 2873              		
 2874              	@ 0 "" 2
 847:../src/drivers/mss_uart/mss_uart.c **** 
 2875              		.loc 3 847 0 is_stmt 1 discriminator 2
 2876              		.thumb
 2877 000e 0020     		movs	r0, #0
 2878              	.LVL240:
 2879 0010 7047     		bx	lr
 2880              	.LVL241:
 2881              	.L329:
 854:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 2882              		.loc 3 854 0
 2883 0012 0368     		ldr	r3, [r0]
 855:../src/drivers/mss_uart/mss_uart.c ****         /*
 2884              		.loc 3 855 0
 2885 0014 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 854:../src/drivers/mss_uart/mss_uart.c ****         this_uart->status |= status;
 2886              		.loc 3 854 0
 2887 0016 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2888 0018 DBB2     		uxtb	r3, r3
 2889              	.LVL242:
 855:../src/drivers/mss_uart/mss_uart.c ****         /*
 2890              		.loc 3 855 0
 2891 001a 1A43     		orrs	r2, r2, r3
 2892 001c 4273     		strb	r2, [r0, #13]
 861:../src/drivers/mss_uart/mss_uart.c ****     }
 2893              		.loc 3 861 0
 2894 001e 03F06000 		and	r0, r3, #96
 2895              	.LVL243:
 864:../src/drivers/mss_uart/mss_uart.c **** 
 2896              		.loc 3 864 0
 2897 0022 7047     		bx	lr
 2898              	.L332:
 2899              		.align	2
 2900              	.L331:
 2901 0024 00000000 		.word	g_mss_uart0
 2902 0028 00000000 		.word	g_mss_uart1
 2903              		.cfi_endproc
 2904              	.LFE99:
 2906              		.section	.text.MSS_UART_set_break,"ax",%progbits
 2907              		.align	1
 2908              		.global	MSS_UART_set_break
 2909              		.thumb
 2910              		.thumb_func
 2912              	MSS_UART_set_break:
 2913              	.LFB100:
 874:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2914              		.loc 3 874 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 0
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
 2918              		@ link register save eliminated.
 2919              	.LVL244:
 875:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 2920              		.loc 3 875 0
 2921 0000 064B     		ldr	r3, .L337
 2922 0002 9842     		cmp	r0, r3
 2923 0004 04D0     		beq	.L334
 875:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 2924              		.loc 3 875 0 is_stmt 0 discriminator 1
 2925 0006 064B     		ldr	r3, .L337+4
 2926 0008 9842     		cmp	r0, r3
 2927 000a 01D0     		beq	.L334
 875:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 2928              		.loc 3 875 0 discriminator 2
 2929              	@ 875 "../src/drivers/mss_uart/mss_uart.c" 1
 2930 000c 00BE     		BKPT
 2931              		
 2932              	@ 0 "" 2
 2933              		.thumb
 2934 000e 7047     		bx	lr
 2935              	.L334:
 879:../src/drivers/mss_uart/mss_uart.c ****     }
 2936              		.loc 3 879 0 is_stmt 1
 2937 0010 0068     		ldr	r0, [r0]
 2938              	.LVL245:
 2939 0012 0621     		movs	r1, #6
 2940 0014 0C30     		adds	r0, r0, #12
 2941 0016 FFF7FEBF 		b	set_bit_reg8
 2942              	.LVL246:
 2943              	.L338:
 2944 001a 00BF     		.align	2
 2945              	.L337:
 2946 001c 00000000 		.word	g_mss_uart0
 2947 0020 00000000 		.word	g_mss_uart1
 2948              		.cfi_endproc
 2949              	.LFE100:
 2951              		.section	.text.MSS_UART_clear_break,"ax",%progbits
 2952              		.align	1
 2953              		.global	MSS_UART_clear_break
 2954              		.thumb
 2955              		.thumb_func
 2957              	MSS_UART_clear_break:
 2958              	.LFB101:
 891:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 2959              		.loc 3 891 0
 2960              		.cfi_startproc
 2961              		@ args = 0, pretend = 0, frame = 0
 2962              		@ frame_needed = 0, uses_anonymous_args = 0
 2963              		@ link register save eliminated.
 2964              	.LVL247:
 892:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 2965              		.loc 3 892 0
 2966 0000 064B     		ldr	r3, .L343
 2967 0002 9842     		cmp	r0, r3
 2968 0004 04D0     		beq	.L340
 892:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 2969              		.loc 3 892 0 is_stmt 0 discriminator 1
 2970 0006 064B     		ldr	r3, .L343+4
 2971 0008 9842     		cmp	r0, r3
 2972 000a 01D0     		beq	.L340
 892:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 2973              		.loc 3 892 0 discriminator 2
 2974              	@ 892 "../src/drivers/mss_uart/mss_uart.c" 1
 2975 000c 00BE     		BKPT
 2976              		
 2977              	@ 0 "" 2
 2978              		.thumb
 2979 000e 7047     		bx	lr
 2980              	.L340:
 896:../src/drivers/mss_uart/mss_uart.c ****     }
 2981              		.loc 3 896 0 is_stmt 1
 2982 0010 0068     		ldr	r0, [r0]
 2983              	.LVL248:
 2984 0012 0621     		movs	r1, #6
 2985 0014 0C30     		adds	r0, r0, #12
 2986 0016 FFF7FEBF 		b	clear_bit_reg8
 2987              	.LVL249:
 2988              	.L344:
 2989 001a 00BF     		.align	2
 2990              	.L343:
 2991 001c 00000000 		.word	g_mss_uart0
 2992 0020 00000000 		.word	g_mss_uart1
 2993              		.cfi_endproc
 2994              	.LFE101:
 2996              		.section	.text.MSS_UART_set_pidpei_handler,"ax",%progbits
 2997              		.align	1
 2998              		.global	MSS_UART_set_pidpei_handler
 2999              		.thumb
 3000              		.thumb_func
 3002              	MSS_UART_set_pidpei_handler:
 3003              	.LFB102:
 909:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3004              		.loc 3 909 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 0
 3007              		@ frame_needed = 0, uses_anonymous_args = 0
 3008              	.LVL250:
 910:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3009              		.loc 3 910 0
 3010 0000 0F4B     		ldr	r3, .L359
 909:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3011              		.loc 3 909 0
 3012 0002 10B5     		push	{r4, lr}
 3013              		.cfi_def_cfa_offset 8
 3014              		.cfi_offset 4, -8
 3015              		.cfi_offset 14, -4
 910:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3016              		.loc 3 910 0
 3017 0004 9842     		cmp	r0, r3
 909:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3018              		.loc 3 909 0
 3019 0006 0446     		mov	r4, r0
 910:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3020              		.loc 3 910 0
 3021 0008 05D0     		beq	.L346
 910:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3022              		.loc 3 910 0 is_stmt 0 discriminator 1
 3023 000a 0E4B     		ldr	r3, .L359+4
 3024 000c 9842     		cmp	r0, r3
 3025 000e 02D0     		beq	.L346
 910:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3026              		.loc 3 910 0 discriminator 2
 3027              	@ 910 "../src/drivers/mss_uart/mss_uart.c" 1
 3028 0010 00BE     		BKPT
 3029              		
 3030              	@ 0 "" 2
 911:../src/drivers/mss_uart/mss_uart.c **** 
 3031              		.loc 3 911 0 is_stmt 1 discriminator 2
 3032              		.thumb
 3033 0012 99B9     		cbnz	r1, .L345
 3034 0014 00E0     		b	.L348
 3035              	.L346:
 911:../src/drivers/mss_uart/mss_uart.c **** 
 3036              		.loc 3 911 0 is_stmt 0
 3037 0016 09B9     		cbnz	r1, .L350
 3038              	.L348:
 911:../src/drivers/mss_uart/mss_uart.c **** 
 3039              		.loc 3 911 0 discriminator 1
 3040              	@ 911 "../src/drivers/mss_uart/mss_uart.c" 1
 3041 0018 00BE     		BKPT
 3042              		
 3043              	@ 0 "" 2
 3044              		.thumb
 3045 001a 10BD     		pop	{r4, pc}
 3046              	.L350:
 916:../src/drivers/mss_uart/mss_uart.c **** 
 3047              		.loc 3 916 0 is_stmt 1
 3048 001c 6163     		str	r1, [r4, #52]
 919:../src/drivers/mss_uart/mss_uart.c **** 
 3049              		.loc 3 919 0
 3050 001e 94F90400 		ldrsb	r0, [r4, #4]
 3051              	.LVL251:
 3052 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 3053              	.LVL252:
 922:../src/drivers/mss_uart/mss_uart.c **** 
 3054              		.loc 3 922 0
 3055 0026 2068     		ldr	r0, [r4]
 3056 0028 0221     		movs	r1, #2
 3057 002a 2430     		adds	r0, r0, #36
 3058 002c FFF7FEFF 		bl	set_bit_reg8
 3059              	.LVL253:
 925:../src/drivers/mss_uart/mss_uart.c ****     }
 3060              		.loc 3 925 0
 3061 0030 94F90400 		ldrsb	r0, [r4, #4]
 927:../src/drivers/mss_uart/mss_uart.c **** 
 3062              		.loc 3 927 0
 3063 0034 BDE81040 		pop	{r4, lr}
 3064              		.cfi_remember_state
 3065              		.cfi_restore 14
 3066              		.cfi_restore 4
 3067              		.cfi_def_cfa_offset 0
 3068              	.LVL254:
 925:../src/drivers/mss_uart/mss_uart.c ****     }
 3069              		.loc 3 925 0
 3070 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 3071              	.LVL255:
 3072              	.L345:
 3073              		.cfi_restore_state
 3074 003c 10BD     		pop	{r4, pc}
 3075              	.L360:
 3076 003e 00BF     		.align	2
 3077              	.L359:
 3078 0040 00000000 		.word	g_mss_uart0
 3079 0044 00000000 		.word	g_mss_uart1
 3080              		.cfi_endproc
 3081              	.LFE102:
 3083              		.section	.text.MSS_UART_set_linbreak_handler,"ax",%progbits
 3084              		.align	1
 3085              		.global	MSS_UART_set_linbreak_handler
 3086              		.thumb
 3087              		.thumb_func
 3089              	MSS_UART_set_linbreak_handler:
 3090              	.LFB103:
 938:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3091              		.loc 3 938 0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 0
 3094              		@ frame_needed = 0, uses_anonymous_args = 0
 3095              	.LVL256:
 939:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3096              		.loc 3 939 0
 3097 0000 0F4B     		ldr	r3, .L375
 938:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3098              		.loc 3 938 0
 3099 0002 10B5     		push	{r4, lr}
 3100              		.cfi_def_cfa_offset 8
 3101              		.cfi_offset 4, -8
 3102              		.cfi_offset 14, -4
 939:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3103              		.loc 3 939 0
 3104 0004 9842     		cmp	r0, r3
 938:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3105              		.loc 3 938 0
 3106 0006 0446     		mov	r4, r0
 939:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3107              		.loc 3 939 0
 3108 0008 05D0     		beq	.L362
 939:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3109              		.loc 3 939 0 is_stmt 0 discriminator 1
 3110 000a 0E4B     		ldr	r3, .L375+4
 3111 000c 9842     		cmp	r0, r3
 3112 000e 02D0     		beq	.L362
 939:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3113              		.loc 3 939 0 discriminator 2
 3114              	@ 939 "../src/drivers/mss_uart/mss_uart.c" 1
 3115 0010 00BE     		BKPT
 3116              		
 3117              	@ 0 "" 2
 940:../src/drivers/mss_uart/mss_uart.c **** 
 3118              		.loc 3 940 0 is_stmt 1 discriminator 2
 3119              		.thumb
 3120 0012 99B9     		cbnz	r1, .L361
 3121 0014 00E0     		b	.L364
 3122              	.L362:
 940:../src/drivers/mss_uart/mss_uart.c **** 
 3123              		.loc 3 940 0 is_stmt 0
 3124 0016 09B9     		cbnz	r1, .L366
 3125              	.L364:
 940:../src/drivers/mss_uart/mss_uart.c **** 
 3126              		.loc 3 940 0 discriminator 1
 3127              	@ 940 "../src/drivers/mss_uart/mss_uart.c" 1
 3128 0018 00BE     		BKPT
 3129              		
 3130              	@ 0 "" 2
 3131              		.thumb
 3132 001a 10BD     		pop	{r4, pc}
 3133              	.L366:
 945:../src/drivers/mss_uart/mss_uart.c **** 
 3134              		.loc 3 945 0 is_stmt 1
 3135 001c A163     		str	r1, [r4, #56]
 948:../src/drivers/mss_uart/mss_uart.c **** 
 3136              		.loc 3 948 0
 3137 001e 94F90400 		ldrsb	r0, [r4, #4]
 3138              	.LVL257:
 3139 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 3140              	.LVL258:
 951:../src/drivers/mss_uart/mss_uart.c **** 
 3141              		.loc 3 951 0
 3142 0026 2068     		ldr	r0, [r4]
 3143 0028 0321     		movs	r1, #3
 3144 002a 2430     		adds	r0, r0, #36
 3145 002c FFF7FEFF 		bl	set_bit_reg8
 3146              	.LVL259:
 954:../src/drivers/mss_uart/mss_uart.c ****     }
 3147              		.loc 3 954 0
 3148 0030 94F90400 		ldrsb	r0, [r4, #4]
 956:../src/drivers/mss_uart/mss_uart.c **** 
 3149              		.loc 3 956 0
 3150 0034 BDE81040 		pop	{r4, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 4
 3154              		.cfi_def_cfa_offset 0
 3155              	.LVL260:
 954:../src/drivers/mss_uart/mss_uart.c ****     }
 3156              		.loc 3 954 0
 3157 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 3158              	.LVL261:
 3159              	.L361:
 3160              		.cfi_restore_state
 3161 003c 10BD     		pop	{r4, pc}
 3162              	.L376:
 3163 003e 00BF     		.align	2
 3164              	.L375:
 3165 0040 00000000 		.word	g_mss_uart0
 3166 0044 00000000 		.word	g_mss_uart1
 3167              		.cfi_endproc
 3168              	.LFE103:
 3170              		.section	.text.MSS_UART_set_linsync_handler,"ax",%progbits
 3171              		.align	1
 3172              		.global	MSS_UART_set_linsync_handler
 3173              		.thumb
 3174              		.thumb_func
 3176              	MSS_UART_set_linsync_handler:
 3177              	.LFB104:
 967:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3178              		.loc 3 967 0
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 0, uses_anonymous_args = 0
 3182              	.LVL262:
 968:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3183              		.loc 3 968 0
 3184 0000 0F4B     		ldr	r3, .L391
 967:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3185              		.loc 3 967 0
 3186 0002 10B5     		push	{r4, lr}
 3187              		.cfi_def_cfa_offset 8
 3188              		.cfi_offset 4, -8
 3189              		.cfi_offset 14, -4
 968:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3190              		.loc 3 968 0
 3191 0004 9842     		cmp	r0, r3
 967:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3192              		.loc 3 967 0
 3193 0006 0446     		mov	r4, r0
 968:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3194              		.loc 3 968 0
 3195 0008 05D0     		beq	.L378
 968:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3196              		.loc 3 968 0 is_stmt 0 discriminator 1
 3197 000a 0E4B     		ldr	r3, .L391+4
 3198 000c 9842     		cmp	r0, r3
 3199 000e 02D0     		beq	.L378
 968:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3200              		.loc 3 968 0 discriminator 2
 3201              	@ 968 "../src/drivers/mss_uart/mss_uart.c" 1
 3202 0010 00BE     		BKPT
 3203              		
 3204              	@ 0 "" 2
 969:../src/drivers/mss_uart/mss_uart.c **** 
 3205              		.loc 3 969 0 is_stmt 1 discriminator 2
 3206              		.thumb
 3207 0012 99B9     		cbnz	r1, .L377
 3208 0014 00E0     		b	.L380
 3209              	.L378:
 969:../src/drivers/mss_uart/mss_uart.c **** 
 3210              		.loc 3 969 0 is_stmt 0
 3211 0016 09B9     		cbnz	r1, .L382
 3212              	.L380:
 969:../src/drivers/mss_uart/mss_uart.c **** 
 3213              		.loc 3 969 0 discriminator 1
 3214              	@ 969 "../src/drivers/mss_uart/mss_uart.c" 1
 3215 0018 00BE     		BKPT
 3216              		
 3217              	@ 0 "" 2
 3218              		.thumb
 3219 001a 10BD     		pop	{r4, pc}
 3220              	.L382:
 974:../src/drivers/mss_uart/mss_uart.c **** 
 3221              		.loc 3 974 0 is_stmt 1
 3222 001c E163     		str	r1, [r4, #60]
 977:../src/drivers/mss_uart/mss_uart.c **** 
 3223              		.loc 3 977 0
 3224 001e 94F90400 		ldrsb	r0, [r4, #4]
 3225              	.LVL263:
 3226 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 3227              	.LVL264:
 980:../src/drivers/mss_uart/mss_uart.c **** 
 3228              		.loc 3 980 0
 3229 0026 2068     		ldr	r0, [r4]
 3230 0028 0421     		movs	r1, #4
 3231 002a 2430     		adds	r0, r0, #36
 3232 002c FFF7FEFF 		bl	set_bit_reg8
 3233              	.LVL265:
 983:../src/drivers/mss_uart/mss_uart.c ****     }
 3234              		.loc 3 983 0
 3235 0030 94F90400 		ldrsb	r0, [r4, #4]
 985:../src/drivers/mss_uart/mss_uart.c **** 
 3236              		.loc 3 985 0
 3237 0034 BDE81040 		pop	{r4, lr}
 3238              		.cfi_remember_state
 3239              		.cfi_restore 14
 3240              		.cfi_restore 4
 3241              		.cfi_def_cfa_offset 0
 3242              	.LVL266:
 983:../src/drivers/mss_uart/mss_uart.c ****     }
 3243              		.loc 3 983 0
 3244 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 3245              	.LVL267:
 3246              	.L377:
 3247              		.cfi_restore_state
 3248 003c 10BD     		pop	{r4, pc}
 3249              	.L392:
 3250 003e 00BF     		.align	2
 3251              	.L391:
 3252 0040 00000000 		.word	g_mss_uart0
 3253 0044 00000000 		.word	g_mss_uart1
 3254              		.cfi_endproc
 3255              	.LFE104:
 3257              		.section	.text.MSS_UART_set_nack_handler,"ax",%progbits
 3258              		.align	1
 3259              		.global	MSS_UART_set_nack_handler
 3260              		.thumb
 3261              		.thumb_func
 3263              	MSS_UART_set_nack_handler:
 3264              	.LFB105:
 996:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3265              		.loc 3 996 0
 3266              		.cfi_startproc
 3267              		@ args = 0, pretend = 0, frame = 0
 3268              		@ frame_needed = 0, uses_anonymous_args = 0
 3269              	.LVL268:
 997:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3270              		.loc 3 997 0
 3271 0000 0F4B     		ldr	r3, .L407
 996:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3272              		.loc 3 996 0
 3273 0002 10B5     		push	{r4, lr}
 3274              		.cfi_def_cfa_offset 8
 3275              		.cfi_offset 4, -8
 3276              		.cfi_offset 14, -4
 997:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3277              		.loc 3 997 0
 3278 0004 9842     		cmp	r0, r3
 996:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3279              		.loc 3 996 0
 3280 0006 0446     		mov	r4, r0
 997:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3281              		.loc 3 997 0
 3282 0008 05D0     		beq	.L394
 997:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3283              		.loc 3 997 0 is_stmt 0 discriminator 1
 3284 000a 0E4B     		ldr	r3, .L407+4
 3285 000c 9842     		cmp	r0, r3
 3286 000e 02D0     		beq	.L394
 997:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3287              		.loc 3 997 0 discriminator 2
 3288              	@ 997 "../src/drivers/mss_uart/mss_uart.c" 1
 3289 0010 00BE     		BKPT
 3290              		
 3291              	@ 0 "" 2
 998:../src/drivers/mss_uart/mss_uart.c **** 
 3292              		.loc 3 998 0 is_stmt 1 discriminator 2
 3293              		.thumb
 3294 0012 99B9     		cbnz	r1, .L393
 3295 0014 00E0     		b	.L396
 3296              	.L394:
 998:../src/drivers/mss_uart/mss_uart.c **** 
 3297              		.loc 3 998 0 is_stmt 0
 3298 0016 09B9     		cbnz	r1, .L398
 3299              	.L396:
 998:../src/drivers/mss_uart/mss_uart.c **** 
 3300              		.loc 3 998 0 discriminator 1
 3301              	@ 998 "../src/drivers/mss_uart/mss_uart.c" 1
 3302 0018 00BE     		BKPT
 3303              		
 3304              	@ 0 "" 2
 3305              		.thumb
 3306 001a 10BD     		pop	{r4, pc}
 3307              	.L398:
1003:../src/drivers/mss_uart/mss_uart.c **** 
 3308              		.loc 3 1003 0 is_stmt 1
 3309 001c 2163     		str	r1, [r4, #48]
1006:../src/drivers/mss_uart/mss_uart.c **** 
 3310              		.loc 3 1006 0
 3311 001e 94F90400 		ldrsb	r0, [r4, #4]
 3312              	.LVL269:
 3313 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 3314              	.LVL270:
1009:../src/drivers/mss_uart/mss_uart.c **** 
 3315              		.loc 3 1009 0
 3316 0026 2068     		ldr	r0, [r4]
 3317 0028 0121     		movs	r1, #1
 3318 002a 2430     		adds	r0, r0, #36
 3319 002c FFF7FEFF 		bl	set_bit_reg8
 3320              	.LVL271:
1012:../src/drivers/mss_uart/mss_uart.c ****     }
 3321              		.loc 3 1012 0
 3322 0030 94F90400 		ldrsb	r0, [r4, #4]
1014:../src/drivers/mss_uart/mss_uart.c **** 
 3323              		.loc 3 1014 0
 3324 0034 BDE81040 		pop	{r4, lr}
 3325              		.cfi_remember_state
 3326              		.cfi_restore 14
 3327              		.cfi_restore 4
 3328              		.cfi_def_cfa_offset 0
 3329              	.LVL272:
1012:../src/drivers/mss_uart/mss_uart.c ****     }
 3330              		.loc 3 1012 0
 3331 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 3332              	.LVL273:
 3333              	.L393:
 3334              		.cfi_restore_state
 3335 003c 10BD     		pop	{r4, pc}
 3336              	.L408:
 3337 003e 00BF     		.align	2
 3338              	.L407:
 3339 0040 00000000 		.word	g_mss_uart0
 3340 0044 00000000 		.word	g_mss_uart1
 3341              		.cfi_endproc
 3342              	.LFE105:
 3344              		.section	.text.MSS_UART_set_rx_timeout_handler,"ax",%progbits
 3345              		.align	1
 3346              		.global	MSS_UART_set_rx_timeout_handler
 3347              		.thumb
 3348              		.thumb_func
 3350              	MSS_UART_set_rx_timeout_handler:
 3351              	.LFB106:
1025:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3352              		.loc 3 1025 0
 3353              		.cfi_startproc
 3354              		@ args = 0, pretend = 0, frame = 0
 3355              		@ frame_needed = 0, uses_anonymous_args = 0
 3356              	.LVL274:
1026:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3357              		.loc 3 1026 0
 3358 0000 0F4B     		ldr	r3, .L423
1025:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3359              		.loc 3 1025 0
 3360 0002 10B5     		push	{r4, lr}
 3361              		.cfi_def_cfa_offset 8
 3362              		.cfi_offset 4, -8
 3363              		.cfi_offset 14, -4
1026:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3364              		.loc 3 1026 0
 3365 0004 9842     		cmp	r0, r3
1025:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3366              		.loc 3 1025 0
 3367 0006 0446     		mov	r4, r0
1026:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3368              		.loc 3 1026 0
 3369 0008 05D0     		beq	.L410
1026:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3370              		.loc 3 1026 0 is_stmt 0 discriminator 1
 3371 000a 0E4B     		ldr	r3, .L423+4
 3372 000c 9842     		cmp	r0, r3
 3373 000e 02D0     		beq	.L410
1026:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(handler != INVALID_IRQ_HANDLER);
 3374              		.loc 3 1026 0 discriminator 2
 3375              	@ 1026 "../src/drivers/mss_uart/mss_uart.c" 1
 3376 0010 00BE     		BKPT
 3377              		
 3378              	@ 0 "" 2
1027:../src/drivers/mss_uart/mss_uart.c **** 
 3379              		.loc 3 1027 0 is_stmt 1 discriminator 2
 3380              		.thumb
 3381 0012 99B9     		cbnz	r1, .L409
 3382 0014 00E0     		b	.L412
 3383              	.L410:
1027:../src/drivers/mss_uart/mss_uart.c **** 
 3384              		.loc 3 1027 0 is_stmt 0
 3385 0016 09B9     		cbnz	r1, .L414
 3386              	.L412:
1027:../src/drivers/mss_uart/mss_uart.c **** 
 3387              		.loc 3 1027 0 discriminator 1
 3388              	@ 1027 "../src/drivers/mss_uart/mss_uart.c" 1
 3389 0018 00BE     		BKPT
 3390              		
 3391              	@ 0 "" 2
 3392              		.thumb
 3393 001a 10BD     		pop	{r4, pc}
 3394              	.L414:
1032:../src/drivers/mss_uart/mss_uart.c **** 
 3395              		.loc 3 1032 0 is_stmt 1
 3396 001c E162     		str	r1, [r4, #44]
1035:../src/drivers/mss_uart/mss_uart.c **** 
 3397              		.loc 3 1035 0
 3398 001e 94F90400 		ldrsb	r0, [r4, #4]
 3399              	.LVL275:
 3400 0022 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 3401              	.LVL276:
1038:../src/drivers/mss_uart/mss_uart.c **** 
 3402              		.loc 3 1038 0
 3403 0026 2068     		ldr	r0, [r4]
 3404 0028 0021     		movs	r1, #0
 3405 002a 2430     		adds	r0, r0, #36
 3406 002c FFF7FEFF 		bl	set_bit_reg8
 3407              	.LVL277:
1041:../src/drivers/mss_uart/mss_uart.c ****     }
 3408              		.loc 3 1041 0
 3409 0030 94F90400 		ldrsb	r0, [r4, #4]
1043:../src/drivers/mss_uart/mss_uart.c **** 
 3410              		.loc 3 1043 0
 3411 0034 BDE81040 		pop	{r4, lr}
 3412              		.cfi_remember_state
 3413              		.cfi_restore 14
 3414              		.cfi_restore 4
 3415              		.cfi_def_cfa_offset 0
 3416              	.LVL278:
1041:../src/drivers/mss_uart/mss_uart.c ****     }
 3417              		.loc 3 1041 0
 3418 0038 FFF7FEBF 		b	NVIC_EnableIRQ
 3419              	.LVL279:
 3420              	.L409:
 3421              		.cfi_restore_state
 3422 003c 10BD     		pop	{r4, pc}
 3423              	.L424:
 3424 003e 00BF     		.align	2
 3425              	.L423:
 3426 0040 00000000 		.word	g_mss_uart0
 3427 0044 00000000 		.word	g_mss_uart1
 3428              		.cfi_endproc
 3429              	.LFE106:
 3431              		.section	.text.MSS_UART_enable_half_duplex,"ax",%progbits
 3432              		.align	1
 3433              		.global	MSS_UART_enable_half_duplex
 3434              		.thumb
 3435              		.thumb_func
 3437              	MSS_UART_enable_half_duplex:
 3438              	.LFB107:
1053:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3439              		.loc 3 1053 0
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 0
 3442              		@ frame_needed = 0, uses_anonymous_args = 0
 3443              		@ link register save eliminated.
 3444              	.LVL280:
1054:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 3445              		.loc 3 1054 0
 3446 0000 064B     		ldr	r3, .L429
 3447 0002 9842     		cmp	r0, r3
 3448 0004 04D0     		beq	.L426
1054:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 3449              		.loc 3 1054 0 is_stmt 0 discriminator 1
 3450 0006 064B     		ldr	r3, .L429+4
 3451 0008 9842     		cmp	r0, r3
 3452 000a 01D0     		beq	.L426
1054:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 3453              		.loc 3 1054 0 discriminator 2
 3454              	@ 1054 "../src/drivers/mss_uart/mss_uart.c" 1
 3455 000c 00BE     		BKPT
 3456              		
 3457              	@ 0 "" 2
 3458              		.thumb
 3459 000e 7047     		bx	lr
 3460              	.L426:
1058:../src/drivers/mss_uart/mss_uart.c ****     }
 3461              		.loc 3 1058 0 is_stmt 1
 3462 0010 0068     		ldr	r0, [r0]
 3463              	.LVL281:
 3464 0012 0321     		movs	r1, #3
 3465 0014 3830     		adds	r0, r0, #56
 3466 0016 FFF7FEBF 		b	set_bit_reg8
 3467              	.LVL282:
 3468              	.L430:
 3469 001a 00BF     		.align	2
 3470              	.L429:
 3471 001c 00000000 		.word	g_mss_uart0
 3472 0020 00000000 		.word	g_mss_uart1
 3473              		.cfi_endproc
 3474              	.LFE107:
 3476              		.section	.text.MSS_UART_disable_half_duplex,"ax",%progbits
 3477              		.align	1
 3478              		.global	MSS_UART_disable_half_duplex
 3479              		.thumb
 3480              		.thumb_func
 3482              	MSS_UART_disable_half_duplex:
 3483              	.LFB108:
1070:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3484              		.loc 3 1070 0
 3485              		.cfi_startproc
 3486              		@ args = 0, pretend = 0, frame = 0
 3487              		@ frame_needed = 0, uses_anonymous_args = 0
 3488              		@ link register save eliminated.
 3489              	.LVL283:
1071:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 3490              		.loc 3 1071 0
 3491 0000 064B     		ldr	r3, .L435
 3492 0002 9842     		cmp	r0, r3
 3493 0004 04D0     		beq	.L432
1071:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 3494              		.loc 3 1071 0 is_stmt 0 discriminator 1
 3495 0006 064B     		ldr	r3, .L435+4
 3496 0008 9842     		cmp	r0, r3
 3497 000a 01D0     		beq	.L432
1071:../src/drivers/mss_uart/mss_uart.c ****     if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
 3498              		.loc 3 1071 0 discriminator 2
 3499              	@ 1071 "../src/drivers/mss_uart/mss_uart.c" 1
 3500 000c 00BE     		BKPT
 3501              		
 3502              	@ 0 "" 2
 3503              		.thumb
 3504 000e 7047     		bx	lr
 3505              	.L432:
1075:../src/drivers/mss_uart/mss_uart.c ****     }
 3506              		.loc 3 1075 0 is_stmt 1
 3507 0010 0068     		ldr	r0, [r0]
 3508              	.LVL284:
 3509 0012 0321     		movs	r1, #3
 3510 0014 3830     		adds	r0, r0, #56
 3511 0016 FFF7FEBF 		b	clear_bit_reg8
 3512              	.LVL285:
 3513              	.L436:
 3514 001a 00BF     		.align	2
 3515              	.L435:
 3516 001c 00000000 		.word	g_mss_uart0
 3517 0020 00000000 		.word	g_mss_uart1
 3518              		.cfi_endproc
 3519              	.LFE108:
 3521              		.section	.text.MSS_UART_set_rx_endian,"ax",%progbits
 3522              		.align	1
 3523              		.global	MSS_UART_set_rx_endian
 3524              		.thumb
 3525              		.thumb_func
 3527              	MSS_UART_set_rx_endian:
 3528              	.LFB109:
1088:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3529              		.loc 3 1088 0
 3530              		.cfi_startproc
 3531              		@ args = 0, pretend = 0, frame = 0
 3532              		@ frame_needed = 0, uses_anonymous_args = 0
 3533              		@ link register save eliminated.
 3534              	.LVL286:
1089:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
 3535              		.loc 3 1089 0
 3536 0000 0E4B     		ldr	r3, .L444
 3537 0002 9842     		cmp	r0, r3
 3538 0004 06D0     		beq	.L438
1089:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
 3539              		.loc 3 1089 0 is_stmt 0 discriminator 1
 3540 0006 0E4A     		ldr	r2, .L444+4
 3541 0008 9042     		cmp	r0, r2
 3542 000a 03D0     		beq	.L438
1089:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
 3543              		.loc 3 1089 0 discriminator 2
 3544              	@ 1089 "../src/drivers/mss_uart/mss_uart.c" 1
 3545 000c 00BE     		BKPT
 3546              		
 3547              	@ 0 "" 2
1090:../src/drivers/mss_uart/mss_uart.c **** 
 3548              		.loc 3 1090 0 is_stmt 1 discriminator 2
 3549              		.thumb
 3550 000e 0129     		cmp	r1, #1
 3551 0010 02D8     		bhi	.L440
 3552 0012 7047     		bx	lr
 3553              	.L438:
1090:../src/drivers/mss_uart/mss_uart.c **** 
 3554              		.loc 3 1090 0 is_stmt 0
 3555 0014 0129     		cmp	r1, #1
 3556 0016 07D9     		bls	.L442
 3557              	.L440:
1090:../src/drivers/mss_uart/mss_uart.c **** 
 3558              		.loc 3 1090 0 discriminator 1
 3559              	@ 1090 "../src/drivers/mss_uart/mss_uart.c" 1
 3560 0018 00BE     		BKPT
 3561              		
 3562              	@ 0 "" 2
1092:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
 3563              		.loc 3 1092 0 is_stmt 1 discriminator 1
 3564              		.thumb
 3565 001a 9842     		cmp	r0, r3
 3566 001c 0CD0     		beq	.L437
1092:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
 3567              		.loc 3 1092 0 is_stmt 0 discriminator 2
 3568 001e 084B     		ldr	r3, .L444+4
 3569 0020 9842     		cmp	r0, r3
 3570 0022 09D1     		bne	.L437
1092:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
 3571              		.loc 3 1092 0 discriminator 3
 3572 0024 0129     		cmp	r1, #1
 3573 0026 07D8     		bhi	.L437
 3574              	.L442:
 3575 0028 0068     		ldr	r0, [r0]
 3576              	.LVL287:
1096:../src/drivers/mss_uart/mss_uart.c ****                                           (set_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX)));
 3577              		.loc 3 1096 0 is_stmt 1
 3578 002a 3430     		adds	r0, r0, #52
 3579 002c 09B9     		cbnz	r1, .L443
1096:../src/drivers/mss_uart/mss_uart.c ****                                           (set_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX)));
 3580              		.loc 3 1096 0 is_stmt 0 discriminator 1
 3581 002e FFF7FEBF 		b	clear_bit_reg8
 3582              	.LVL288:
 3583              	.L443:
1097:../src/drivers/mss_uart/mss_uart.c ****     }
 3584              		.loc 3 1097 0 is_stmt 1
 3585 0032 0021     		movs	r1, #0
 3586              	.LVL289:
 3587 0034 FFF7FEBF 		b	set_bit_reg8
 3588              	.LVL290:
 3589              	.L437:
 3590 0038 7047     		bx	lr
 3591              	.L445:
 3592 003a 00BF     		.align	2
 3593              	.L444:
 3594 003c 00000000 		.word	g_mss_uart0
 3595 0040 00000000 		.word	g_mss_uart1
 3596              		.cfi_endproc
 3597              	.LFE109:
 3599              		.section	.text.MSS_UART_set_tx_endian,"ax",%progbits
 3600              		.align	1
 3601              		.global	MSS_UART_set_tx_endian
 3602              		.thumb
 3603              		.thumb_func
 3605              	MSS_UART_set_tx_endian:
 3606              	.LFB110:
1110:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3607              		.loc 3 1110 0
 3608              		.cfi_startproc
 3609              		@ args = 0, pretend = 0, frame = 0
 3610              		@ frame_needed = 0, uses_anonymous_args = 0
 3611              		@ link register save eliminated.
 3612              	.LVL291:
1111:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
 3613              		.loc 3 1111 0
 3614 0000 0E4B     		ldr	r3, .L453
 3615 0002 9842     		cmp	r0, r3
 3616 0004 06D0     		beq	.L447
1111:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
 3617              		.loc 3 1111 0 is_stmt 0 discriminator 1
 3618 0006 0E4A     		ldr	r2, .L453+4
 3619 0008 9042     		cmp	r0, r2
 3620 000a 03D0     		beq	.L447
1111:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_ENDIAN > endian);
 3621              		.loc 3 1111 0 discriminator 2
 3622              	@ 1111 "../src/drivers/mss_uart/mss_uart.c" 1
 3623 000c 00BE     		BKPT
 3624              		
 3625              	@ 0 "" 2
1112:../src/drivers/mss_uart/mss_uart.c **** 
 3626              		.loc 3 1112 0 is_stmt 1 discriminator 2
 3627              		.thumb
 3628 000e 0129     		cmp	r1, #1
 3629 0010 02D8     		bhi	.L449
 3630 0012 7047     		bx	lr
 3631              	.L447:
1112:../src/drivers/mss_uart/mss_uart.c **** 
 3632              		.loc 3 1112 0 is_stmt 0
 3633 0014 0129     		cmp	r1, #1
 3634 0016 07D9     		bls	.L451
 3635              	.L449:
1112:../src/drivers/mss_uart/mss_uart.c **** 
 3636              		.loc 3 1112 0 discriminator 1
 3637              	@ 1112 "../src/drivers/mss_uart/mss_uart.c" 1
 3638 0018 00BE     		BKPT
 3639              		
 3640              	@ 0 "" 2
1114:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
 3641              		.loc 3 1114 0 is_stmt 1 discriminator 1
 3642              		.thumb
 3643 001a 9842     		cmp	r0, r3
 3644 001c 0DD0     		beq	.L446
1114:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
 3645              		.loc 3 1114 0 is_stmt 0 discriminator 2
 3646 001e 084B     		ldr	r3, .L453+4
 3647 0020 9842     		cmp	r0, r3
 3648 0022 0AD1     		bne	.L446
1114:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_ENDIAN > endian))
 3649              		.loc 3 1114 0 discriminator 3
 3650 0024 0129     		cmp	r1, #1
 3651 0026 08D8     		bhi	.L446
 3652              	.L451:
 3653 0028 0068     		ldr	r0, [r0]
 3654              	.LVL292:
1118:../src/drivers/mss_uart/mss_uart.c ****                                           (set_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX)) ) ;
 3655              		.loc 3 1118 0 is_stmt 1
 3656 002a 3430     		adds	r0, r0, #52
 3657 002c 11B9     		cbnz	r1, .L452
1118:../src/drivers/mss_uart/mss_uart.c ****                                           (set_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX)) ) ;
 3658              		.loc 3 1118 0 is_stmt 0 discriminator 1
 3659 002e 0121     		movs	r1, #1
 3660              	.LVL293:
 3661 0030 FFF7FEBF 		b	clear_bit_reg8
 3662              	.LVL294:
 3663              	.L452:
1119:../src/drivers/mss_uart/mss_uart.c ****     }
 3664              		.loc 3 1119 0 is_stmt 1
 3665 0034 0121     		movs	r1, #1
 3666              	.LVL295:
 3667 0036 FFF7FEBF 		b	set_bit_reg8
 3668              	.LVL296:
 3669              	.L446:
 3670 003a 7047     		bx	lr
 3671              	.L454:
 3672              		.align	2
 3673              	.L453:
 3674 003c 00000000 		.word	g_mss_uart0
 3675 0040 00000000 		.word	g_mss_uart1
 3676              		.cfi_endproc
 3677              	.LFE110:
 3679              		.section	.text.MSS_UART_set_filter_length,"ax",%progbits
 3680              		.align	1
 3681              		.global	MSS_UART_set_filter_length
 3682              		.thumb
 3683              		.thumb_func
 3685              	MSS_UART_set_filter_length:
 3686              	.LFB111:
1132:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3687              		.loc 3 1132 0
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 0
 3690              		@ frame_needed = 0, uses_anonymous_args = 0
 3691              		@ link register save eliminated.
 3692              	.LVL297:
1133:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_FILTER_LENGTH > length);
 3693              		.loc 3 1133 0
 3694 0000 0C4B     		ldr	r3, .L461
 3695 0002 9842     		cmp	r0, r3
 3696 0004 06D0     		beq	.L456
1133:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_FILTER_LENGTH > length);
 3697              		.loc 3 1133 0 is_stmt 0 discriminator 1
 3698 0006 0C4A     		ldr	r2, .L461+4
 3699 0008 9042     		cmp	r0, r2
 3700 000a 03D0     		beq	.L456
1133:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_FILTER_LENGTH > length);
 3701              		.loc 3 1133 0 discriminator 2
 3702              	@ 1133 "../src/drivers/mss_uart/mss_uart.c" 1
 3703 000c 00BE     		BKPT
 3704              		
 3705              	@ 0 "" 2
1134:../src/drivers/mss_uart/mss_uart.c ****     
 3706              		.loc 3 1134 0 is_stmt 1 discriminator 2
 3707              		.thumb
 3708 000e 0729     		cmp	r1, #7
 3709 0010 02D8     		bhi	.L458
 3710 0012 7047     		bx	lr
 3711              	.L456:
1134:../src/drivers/mss_uart/mss_uart.c ****     
 3712              		.loc 3 1134 0 is_stmt 0
 3713 0014 0729     		cmp	r1, #7
 3714 0016 07D9     		bls	.L460
 3715              	.L458:
1134:../src/drivers/mss_uart/mss_uart.c ****     
 3716              		.loc 3 1134 0 discriminator 1
 3717              	@ 1134 "../src/drivers/mss_uart/mss_uart.c" 1
 3718 0018 00BE     		BKPT
 3719              		
 3720              	@ 0 "" 2
1136:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_FILTER_LENGTH > length))
 3721              		.loc 3 1136 0 is_stmt 1 discriminator 1
 3722              		.thumb
 3723 001a 9842     		cmp	r0, r3
 3724 001c 08D0     		beq	.L455
1136:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_FILTER_LENGTH > length))
 3725              		.loc 3 1136 0 is_stmt 0 discriminator 2
 3726 001e 064B     		ldr	r3, .L461+4
 3727 0020 9842     		cmp	r0, r3
 3728 0022 05D1     		bne	.L455
1136:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_FILTER_LENGTH > length))
 3729              		.loc 3 1136 0 discriminator 3
 3730 0024 0729     		cmp	r1, #7
 3731 0026 03D8     		bhi	.L455
 3732              	.L460:
1140:../src/drivers/mss_uart/mss_uart.c ****     }
 3733              		.loc 3 1140 0 is_stmt 1
 3734 0028 0368     		ldr	r3, [r0]
 3735 002a 83F84410 		strb	r1, [r3, #68]
 3736 002e 7047     		bx	lr
 3737              	.L455:
 3738 0030 7047     		bx	lr
 3739              	.L462:
 3740 0032 00BF     		.align	2
 3741              	.L461:
 3742 0034 00000000 		.word	g_mss_uart0
 3743 0038 00000000 		.word	g_mss_uart1
 3744              		.cfi_endproc
 3745              	.LFE111:
 3747              		.section	.text.MSS_UART_enable_afm,"ax",%progbits
 3748              		.align	1
 3749              		.global	MSS_UART_enable_afm
 3750              		.thumb
 3751              		.thumb_func
 3753              	MSS_UART_enable_afm:
 3754              	.LFB112:
1152:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3755              		.loc 3 1152 0
 3756              		.cfi_startproc
 3757              		@ args = 0, pretend = 0, frame = 0
 3758              		@ frame_needed = 0, uses_anonymous_args = 0
 3759              		@ link register save eliminated.
 3760              	.LVL298:
1153:../src/drivers/mss_uart/mss_uart.c **** 
 3761              		.loc 3 1153 0
 3762 0000 064B     		ldr	r3, .L467
 3763 0002 9842     		cmp	r0, r3
 3764 0004 04D0     		beq	.L464
1153:../src/drivers/mss_uart/mss_uart.c **** 
 3765              		.loc 3 1153 0 is_stmt 0 discriminator 1
 3766 0006 064B     		ldr	r3, .L467+4
 3767 0008 9842     		cmp	r0, r3
 3768 000a 01D0     		beq	.L464
1153:../src/drivers/mss_uart/mss_uart.c **** 
 3769              		.loc 3 1153 0 discriminator 2
 3770              	@ 1153 "../src/drivers/mss_uart/mss_uart.c" 1
 3771 000c 00BE     		BKPT
 3772              		
 3773              	@ 0 "" 2
 3774              		.thumb
 3775 000e 7047     		bx	lr
 3776              	.L464:
1158:../src/drivers/mss_uart/mss_uart.c ****     }
 3777              		.loc 3 1158 0 is_stmt 1
 3778 0010 0068     		ldr	r0, [r0]
 3779              	.LVL299:
 3780 0012 0121     		movs	r1, #1
 3781 0014 3830     		adds	r0, r0, #56
 3782 0016 FFF7FEBF 		b	set_bit_reg8
 3783              	.LVL300:
 3784              	.L468:
 3785 001a 00BF     		.align	2
 3786              	.L467:
 3787 001c 00000000 		.word	g_mss_uart0
 3788 0020 00000000 		.word	g_mss_uart1
 3789              		.cfi_endproc
 3790              	.LFE112:
 3792              		.section	.text.MSS_UART_disable_afm,"ax",%progbits
 3793              		.align	1
 3794              		.global	MSS_UART_disable_afm
 3795              		.thumb
 3796              		.thumb_func
 3798              	MSS_UART_disable_afm:
 3799              	.LFB113:
1170:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3800              		.loc 3 1170 0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 0
 3803              		@ frame_needed = 0, uses_anonymous_args = 0
 3804              		@ link register save eliminated.
 3805              	.LVL301:
1171:../src/drivers/mss_uart/mss_uart.c **** 
 3806              		.loc 3 1171 0
 3807 0000 064B     		ldr	r3, .L473
 3808 0002 9842     		cmp	r0, r3
 3809 0004 04D0     		beq	.L470
1171:../src/drivers/mss_uart/mss_uart.c **** 
 3810              		.loc 3 1171 0 is_stmt 0 discriminator 1
 3811 0006 064B     		ldr	r3, .L473+4
 3812 0008 9842     		cmp	r0, r3
 3813 000a 01D0     		beq	.L470
1171:../src/drivers/mss_uart/mss_uart.c **** 
 3814              		.loc 3 1171 0 discriminator 2
 3815              	@ 1171 "../src/drivers/mss_uart/mss_uart.c" 1
 3816 000c 00BE     		BKPT
 3817              		
 3818              	@ 0 "" 2
 3819              		.thumb
 3820 000e 7047     		bx	lr
 3821              	.L470:
1177:../src/drivers/mss_uart/mss_uart.c ****     }
 3822              		.loc 3 1177 0 is_stmt 1
 3823 0010 0068     		ldr	r0, [r0]
 3824              	.LVL302:
 3825 0012 0121     		movs	r1, #1
 3826 0014 3830     		adds	r0, r0, #56
 3827 0016 FFF7FEBF 		b	clear_bit_reg8
 3828              	.LVL303:
 3829              	.L474:
 3830 001a 00BF     		.align	2
 3831              	.L473:
 3832 001c 00000000 		.word	g_mss_uart0
 3833 0020 00000000 		.word	g_mss_uart1
 3834              		.cfi_endproc
 3835              	.LFE113:
 3837              		.section	.text.MSS_UART_enable_afclear,"ax",%progbits
 3838              		.align	1
 3839              		.global	MSS_UART_enable_afclear
 3840              		.thumb
 3841              		.thumb_func
 3843              	MSS_UART_enable_afclear:
 3844              	.LFB114:
1189:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3845              		.loc 3 1189 0
 3846              		.cfi_startproc
 3847              		@ args = 0, pretend = 0, frame = 0
 3848              		@ frame_needed = 0, uses_anonymous_args = 0
 3849              		@ link register save eliminated.
 3850              	.LVL304:
1190:../src/drivers/mss_uart/mss_uart.c **** 
 3851              		.loc 3 1190 0
 3852 0000 064B     		ldr	r3, .L479
 3853 0002 9842     		cmp	r0, r3
 3854 0004 04D0     		beq	.L476
1190:../src/drivers/mss_uart/mss_uart.c **** 
 3855              		.loc 3 1190 0 is_stmt 0 discriminator 1
 3856 0006 064B     		ldr	r3, .L479+4
 3857 0008 9842     		cmp	r0, r3
 3858 000a 01D0     		beq	.L476
1190:../src/drivers/mss_uart/mss_uart.c **** 
 3859              		.loc 3 1190 0 discriminator 2
 3860              	@ 1190 "../src/drivers/mss_uart/mss_uart.c" 1
 3861 000c 00BE     		BKPT
 3862              		
 3863              	@ 0 "" 2
 3864              		.thumb
 3865 000e 7047     		bx	lr
 3866              	.L476:
1197:../src/drivers/mss_uart/mss_uart.c ****     }
 3867              		.loc 3 1197 0 is_stmt 1
 3868 0010 0068     		ldr	r0, [r0]
 3869              	.LVL305:
 3870 0012 0221     		movs	r1, #2
 3871 0014 3830     		adds	r0, r0, #56
 3872 0016 FFF7FEBF 		b	set_bit_reg8
 3873              	.LVL306:
 3874              	.L480:
 3875 001a 00BF     		.align	2
 3876              	.L479:
 3877 001c 00000000 		.word	g_mss_uart0
 3878 0020 00000000 		.word	g_mss_uart1
 3879              		.cfi_endproc
 3880              	.LFE114:
 3882              		.section	.text.MSS_UART_disable_afclear,"ax",%progbits
 3883              		.align	1
 3884              		.global	MSS_UART_disable_afclear
 3885              		.thumb
 3886              		.thumb_func
 3888              	MSS_UART_disable_afclear:
 3889              	.LFB115:
1209:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3890              		.loc 3 1209 0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
 3894              		@ link register save eliminated.
 3895              	.LVL307:
1210:../src/drivers/mss_uart/mss_uart.c **** 
 3896              		.loc 3 1210 0
 3897 0000 064B     		ldr	r3, .L485
 3898 0002 9842     		cmp	r0, r3
 3899 0004 04D0     		beq	.L482
1210:../src/drivers/mss_uart/mss_uart.c **** 
 3900              		.loc 3 1210 0 is_stmt 0 discriminator 1
 3901 0006 064B     		ldr	r3, .L485+4
 3902 0008 9842     		cmp	r0, r3
 3903 000a 01D0     		beq	.L482
1210:../src/drivers/mss_uart/mss_uart.c **** 
 3904              		.loc 3 1210 0 discriminator 2
 3905              	@ 1210 "../src/drivers/mss_uart/mss_uart.c" 1
 3906 000c 00BE     		BKPT
 3907              		
 3908              	@ 0 "" 2
 3909              		.thumb
 3910 000e 7047     		bx	lr
 3911              	.L482:
1215:../src/drivers/mss_uart/mss_uart.c ****     }
 3912              		.loc 3 1215 0 is_stmt 1
 3913 0010 0068     		ldr	r0, [r0]
 3914              	.LVL308:
 3915 0012 0221     		movs	r1, #2
 3916 0014 3830     		adds	r0, r0, #56
 3917 0016 FFF7FEBF 		b	clear_bit_reg8
 3918              	.LVL309:
 3919              	.L486:
 3920 001a 00BF     		.align	2
 3921              	.L485:
 3922 001c 00000000 		.word	g_mss_uart0
 3923 0020 00000000 		.word	g_mss_uart1
 3924              		.cfi_endproc
 3925              	.LFE115:
 3927              		.section	.text.MSS_UART_enable_rx_timeout,"ax",%progbits
 3928              		.align	1
 3929              		.global	MSS_UART_enable_rx_timeout
 3930              		.thumb
 3931              		.thumb_func
 3933              	MSS_UART_enable_rx_timeout:
 3934              	.LFB116:
1228:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3935              		.loc 3 1228 0
 3936              		.cfi_startproc
 3937              		@ args = 0, pretend = 0, frame = 0
 3938              		@ frame_needed = 0, uses_anonymous_args = 0
 3939              		@ link register save eliminated.
 3940              	.LVL310:
1229:../src/drivers/mss_uart/mss_uart.c **** 
 3941              		.loc 3 1229 0
 3942 0000 074B     		ldr	r3, .L491
 3943 0002 9842     		cmp	r0, r3
 3944 0004 04D0     		beq	.L488
1229:../src/drivers/mss_uart/mss_uart.c **** 
 3945              		.loc 3 1229 0 is_stmt 0 discriminator 1
 3946 0006 074B     		ldr	r3, .L491+4
 3947 0008 9842     		cmp	r0, r3
 3948 000a 01D0     		beq	.L488
1229:../src/drivers/mss_uart/mss_uart.c **** 
 3949              		.loc 3 1229 0 discriminator 2
 3950              	@ 1229 "../src/drivers/mss_uart/mss_uart.c" 1
 3951 000c 00BE     		BKPT
 3952              		
 3953              	@ 0 "" 2
 3954              		.thumb
 3955 000e 7047     		bx	lr
 3956              	.L488:
1234:../src/drivers/mss_uart/mss_uart.c ****         /*Enable receiver time-out */
 3957              		.loc 3 1234 0 is_stmt 1
 3958 0010 0368     		ldr	r3, [r0]
 3959 0012 83F84C10 		strb	r1, [r3, #76]
1236:../src/drivers/mss_uart/mss_uart.c ****     }
 3960              		.loc 3 1236 0
 3961 0016 0068     		ldr	r0, [r0]
 3962              	.LVL311:
 3963 0018 0621     		movs	r1, #6
 3964              	.LVL312:
 3965 001a 3030     		adds	r0, r0, #48
 3966 001c FFF7FEBF 		b	set_bit_reg8
 3967              	.LVL313:
 3968              	.L492:
 3969              		.align	2
 3970              	.L491:
 3971 0020 00000000 		.word	g_mss_uart0
 3972 0024 00000000 		.word	g_mss_uart1
 3973              		.cfi_endproc
 3974              	.LFE116:
 3976              		.section	.text.MSS_UART_disable_rx_timeout,"ax",%progbits
 3977              		.align	1
 3978              		.global	MSS_UART_disable_rx_timeout
 3979              		.thumb
 3980              		.thumb_func
 3982              	MSS_UART_disable_rx_timeout:
 3983              	.LFB117:
1248:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 3984              		.loc 3 1248 0
 3985              		.cfi_startproc
 3986              		@ args = 0, pretend = 0, frame = 0
 3987              		@ frame_needed = 0, uses_anonymous_args = 0
 3988              		@ link register save eliminated.
 3989              	.LVL314:
1249:../src/drivers/mss_uart/mss_uart.c **** 
 3990              		.loc 3 1249 0
 3991 0000 064B     		ldr	r3, .L497
 3992 0002 9842     		cmp	r0, r3
 3993 0004 04D0     		beq	.L494
1249:../src/drivers/mss_uart/mss_uart.c **** 
 3994              		.loc 3 1249 0 is_stmt 0 discriminator 1
 3995 0006 064B     		ldr	r3, .L497+4
 3996 0008 9842     		cmp	r0, r3
 3997 000a 01D0     		beq	.L494
1249:../src/drivers/mss_uart/mss_uart.c **** 
 3998              		.loc 3 1249 0 discriminator 2
 3999              	@ 1249 "../src/drivers/mss_uart/mss_uart.c" 1
 4000 000c 00BE     		BKPT
 4001              		
 4002              	@ 0 "" 2
 4003              		.thumb
 4004 000e 7047     		bx	lr
 4005              	.L494:
1254:../src/drivers/mss_uart/mss_uart.c ****     }
 4006              		.loc 3 1254 0 is_stmt 1
 4007 0010 0068     		ldr	r0, [r0]
 4008              	.LVL315:
 4009 0012 0621     		movs	r1, #6
 4010 0014 3030     		adds	r0, r0, #48
 4011 0016 FFF7FEBF 		b	clear_bit_reg8
 4012              	.LVL316:
 4013              	.L498:
 4014 001a 00BF     		.align	2
 4015              	.L497:
 4016 001c 00000000 		.word	g_mss_uart0
 4017 0020 00000000 		.word	g_mss_uart1
 4018              		.cfi_endproc
 4019              	.LFE117:
 4021              		.section	.text.MSS_UART_enable_tx_time_guard,"ax",%progbits
 4022              		.align	1
 4023              		.global	MSS_UART_enable_tx_time_guard
 4024              		.thumb
 4025              		.thumb_func
 4027              	MSS_UART_enable_tx_time_guard:
 4028              	.LFB118:
1267:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 4029              		.loc 3 1267 0
 4030              		.cfi_startproc
 4031              		@ args = 0, pretend = 0, frame = 0
 4032              		@ frame_needed = 0, uses_anonymous_args = 0
 4033              		@ link register save eliminated.
 4034              	.LVL317:
1268:../src/drivers/mss_uart/mss_uart.c **** 
 4035              		.loc 3 1268 0
 4036 0000 074B     		ldr	r3, .L503
 4037 0002 9842     		cmp	r0, r3
 4038 0004 04D0     		beq	.L500
1268:../src/drivers/mss_uart/mss_uart.c **** 
 4039              		.loc 3 1268 0 is_stmt 0 discriminator 1
 4040 0006 074B     		ldr	r3, .L503+4
 4041 0008 9842     		cmp	r0, r3
 4042 000a 01D0     		beq	.L500
1268:../src/drivers/mss_uart/mss_uart.c **** 
 4043              		.loc 3 1268 0 discriminator 2
 4044              	@ 1268 "../src/drivers/mss_uart/mss_uart.c" 1
 4045 000c 00BE     		BKPT
 4046              		
 4047              	@ 0 "" 2
 4048              		.thumb
 4049 000e 7047     		bx	lr
 4050              	.L500:
1273:../src/drivers/mss_uart/mss_uart.c ****         /*Enable transmitter time guard */
 4051              		.loc 3 1273 0 is_stmt 1
 4052 0010 0368     		ldr	r3, [r0]
 4053 0012 83F84810 		strb	r1, [r3, #72]
1275:../src/drivers/mss_uart/mss_uart.c ****     }
 4054              		.loc 3 1275 0
 4055 0016 0068     		ldr	r0, [r0]
 4056              	.LVL318:
 4057 0018 0521     		movs	r1, #5
 4058              	.LVL319:
 4059 001a 3030     		adds	r0, r0, #48
 4060 001c FFF7FEBF 		b	set_bit_reg8
 4061              	.LVL320:
 4062              	.L504:
 4063              		.align	2
 4064              	.L503:
 4065 0020 00000000 		.word	g_mss_uart0
 4066 0024 00000000 		.word	g_mss_uart1
 4067              		.cfi_endproc
 4068              	.LFE118:
 4070              		.section	.text.MSS_UART_disable_tx_time_guard,"ax",%progbits
 4071              		.align	1
 4072              		.global	MSS_UART_disable_tx_time_guard
 4073              		.thumb
 4074              		.thumb_func
 4076              	MSS_UART_disable_tx_time_guard:
 4077              	.LFB119:
1287:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 4078              		.loc 3 1287 0
 4079              		.cfi_startproc
 4080              		@ args = 0, pretend = 0, frame = 0
 4081              		@ frame_needed = 0, uses_anonymous_args = 0
 4082              		@ link register save eliminated.
 4083              	.LVL321:
1288:../src/drivers/mss_uart/mss_uart.c **** 
 4084              		.loc 3 1288 0
 4085 0000 064B     		ldr	r3, .L509
 4086 0002 9842     		cmp	r0, r3
 4087 0004 04D0     		beq	.L506
1288:../src/drivers/mss_uart/mss_uart.c **** 
 4088              		.loc 3 1288 0 is_stmt 0 discriminator 1
 4089 0006 064B     		ldr	r3, .L509+4
 4090 0008 9842     		cmp	r0, r3
 4091 000a 01D0     		beq	.L506
1288:../src/drivers/mss_uart/mss_uart.c **** 
 4092              		.loc 3 1288 0 discriminator 2
 4093              	@ 1288 "../src/drivers/mss_uart/mss_uart.c" 1
 4094 000c 00BE     		BKPT
 4095              		
 4096              	@ 0 "" 2
 4097              		.thumb
 4098 000e 7047     		bx	lr
 4099              	.L506:
1293:../src/drivers/mss_uart/mss_uart.c ****     }
 4100              		.loc 3 1293 0 is_stmt 1
 4101 0010 0068     		ldr	r0, [r0]
 4102              	.LVL322:
 4103 0012 0521     		movs	r1, #5
 4104 0014 3030     		adds	r0, r0, #48
 4105 0016 FFF7FEBF 		b	clear_bit_reg8
 4106              	.LVL323:
 4107              	.L510:
 4108 001a 00BF     		.align	2
 4109              	.L509:
 4110 001c 00000000 		.word	g_mss_uart0
 4111 0020 00000000 		.word	g_mss_uart1
 4112              		.cfi_endproc
 4113              	.LFE119:
 4115              		.section	.text.MSS_UART_set_address,"ax",%progbits
 4116              		.align	1
 4117              		.global	MSS_UART_set_address
 4118              		.thumb
 4119              		.thumb_func
 4121              	MSS_UART_set_address:
 4122              	.LFB120:
1306:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 4123              		.loc 3 1306 0
 4124              		.cfi_startproc
 4125              		@ args = 0, pretend = 0, frame = 0
 4126              		@ frame_needed = 0, uses_anonymous_args = 0
 4127              		@ link register save eliminated.
 4128              	.LVL324:
1307:../src/drivers/mss_uart/mss_uart.c **** 
 4129              		.loc 3 1307 0
 4130 0000 054B     		ldr	r3, .L514
 4131 0002 9842     		cmp	r0, r3
 4132 0004 04D0     		beq	.L512
1307:../src/drivers/mss_uart/mss_uart.c **** 
 4133              		.loc 3 1307 0 is_stmt 0 discriminator 1
 4134 0006 054B     		ldr	r3, .L514+4
 4135 0008 9842     		cmp	r0, r3
 4136 000a 01D0     		beq	.L512
1307:../src/drivers/mss_uart/mss_uart.c **** 
 4137              		.loc 3 1307 0 discriminator 2
 4138              	@ 1307 "../src/drivers/mss_uart/mss_uart.c" 1
 4139 000c 00BE     		BKPT
 4140              		
 4141              	@ 0 "" 2
 4142              		.thumb
 4143 000e 7047     		bx	lr
 4144              	.L512:
1311:../src/drivers/mss_uart/mss_uart.c ****     }
 4145              		.loc 3 1311 0 is_stmt 1
 4146 0010 0368     		ldr	r3, [r0]
 4147 0012 83F85010 		strb	r1, [r3, #80]
 4148 0016 7047     		bx	lr
 4149              	.L515:
 4150              		.align	2
 4151              	.L514:
 4152 0018 00000000 		.word	g_mss_uart0
 4153 001c 00000000 		.word	g_mss_uart1
 4154              		.cfi_endproc
 4155              	.LFE120:
 4157              		.section	.text.MSS_UART_set_ready_mode,"ax",%progbits
 4158              		.align	1
 4159              		.global	MSS_UART_set_ready_mode
 4160              		.thumb
 4161              		.thumb_func
 4163              	MSS_UART_set_ready_mode:
 4164              	.LFB121:
1324:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 4165              		.loc 3 1324 0
 4166              		.cfi_startproc
 4167              		@ args = 0, pretend = 0, frame = 0
 4168              		@ frame_needed = 0, uses_anonymous_args = 0
 4169              		@ link register save eliminated.
 4170              	.LVL325:
1325:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_READY_MODE > mode);
 4171              		.loc 3 1325 0
 4172 0000 0E4B     		ldr	r3, .L523
 4173 0002 9842     		cmp	r0, r3
 4174 0004 06D0     		beq	.L517
1325:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_READY_MODE > mode);
 4175              		.loc 3 1325 0 is_stmt 0 discriminator 1
 4176 0006 0E4A     		ldr	r2, .L523+4
 4177 0008 9042     		cmp	r0, r2
 4178 000a 03D0     		beq	.L517
1325:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_READY_MODE > mode);
 4179              		.loc 3 1325 0 discriminator 2
 4180              	@ 1325 "../src/drivers/mss_uart/mss_uart.c" 1
 4181 000c 00BE     		BKPT
 4182              		
 4183              	@ 0 "" 2
1326:../src/drivers/mss_uart/mss_uart.c **** 
 4184              		.loc 3 1326 0 is_stmt 1 discriminator 2
 4185              		.thumb
 4186 000e 0129     		cmp	r1, #1
 4187 0010 02D8     		bhi	.L519
 4188 0012 7047     		bx	lr
 4189              	.L517:
1326:../src/drivers/mss_uart/mss_uart.c **** 
 4190              		.loc 3 1326 0 is_stmt 0
 4191 0014 0129     		cmp	r1, #1
 4192 0016 07D9     		bls	.L521
 4193              	.L519:
1326:../src/drivers/mss_uart/mss_uart.c **** 
 4194              		.loc 3 1326 0 discriminator 1
 4195              	@ 1326 "../src/drivers/mss_uart/mss_uart.c" 1
 4196 0018 00BE     		BKPT
 4197              		
 4198              	@ 0 "" 2
1328:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_READY_MODE > mode ) )
 4199              		.loc 3 1328 0 is_stmt 1 discriminator 1
 4200              		.thumb
 4201 001a 9842     		cmp	r0, r3
 4202 001c 0DD0     		beq	.L516
1328:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_READY_MODE > mode ) )
 4203              		.loc 3 1328 0 is_stmt 0 discriminator 2
 4204 001e 084B     		ldr	r3, .L523+4
 4205 0020 9842     		cmp	r0, r3
 4206 0022 0AD1     		bne	.L516
1328:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_READY_MODE > mode ) )
 4207              		.loc 3 1328 0 discriminator 3
 4208 0024 0129     		cmp	r1, #1
 4209 0026 08D8     		bhi	.L516
 4210              	.L521:
 4211 0028 0068     		ldr	r0, [r0]
 4212              	.LVL326:
1332:../src/drivers/mss_uart/mss_uart.c ****                                  set_bit_reg8(&this_uart->hw_reg->FCR,RDYMODE) );    
 4213              		.loc 3 1332 0 is_stmt 1
 4214 002a 0830     		adds	r0, r0, #8
 4215 002c 11B9     		cbnz	r1, .L522
1332:../src/drivers/mss_uart/mss_uart.c ****                                  set_bit_reg8(&this_uart->hw_reg->FCR,RDYMODE) );    
 4216              		.loc 3 1332 0 is_stmt 0 discriminator 1
 4217 002e 0321     		movs	r1, #3
 4218              	.LVL327:
 4219 0030 FFF7FEBF 		b	clear_bit_reg8
 4220              	.LVL328:
 4221              	.L522:
1333:../src/drivers/mss_uart/mss_uart.c ****     }
 4222              		.loc 3 1333 0 is_stmt 1
 4223 0034 0321     		movs	r1, #3
 4224              	.LVL329:
 4225 0036 FFF7FEBF 		b	set_bit_reg8
 4226              	.LVL330:
 4227              	.L516:
 4228 003a 7047     		bx	lr
 4229              	.L524:
 4230              		.align	2
 4231              	.L523:
 4232 003c 00000000 		.word	g_mss_uart0
 4233 0040 00000000 		.word	g_mss_uart1
 4234              		.cfi_endproc
 4235              	.LFE121:
 4237              		.section	.text.MSS_UART_set_usart_mode,"ax",%progbits
 4238              		.align	1
 4239              		.global	MSS_UART_set_usart_mode
 4240              		.thumb
 4241              		.thumb_func
 4243              	MSS_UART_set_usart_mode:
 4244              	.LFB123:
1442:../src/drivers/mss_uart/mss_uart.c ****     ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
 4245              		.loc 3 1442 0
 4246              		.cfi_startproc
 4247              		@ args = 0, pretend = 0, frame = 0
 4248              		@ frame_needed = 0, uses_anonymous_args = 0
 4249              		@ link register save eliminated.
 4250              	.LVL331:
1443:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_SYNC_MODE > mode);
 4251              		.loc 3 1443 0
 4252 0000 114B     		ldr	r3, .L531
 4253 0002 9842     		cmp	r0, r3
 4254 0004 06D0     		beq	.L526
1443:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_SYNC_MODE > mode);
 4255              		.loc 3 1443 0 is_stmt 0 discriminator 1
 4256 0006 114A     		ldr	r2, .L531+4
 4257 0008 9042     		cmp	r0, r2
 4258 000a 03D0     		beq	.L526
1443:../src/drivers/mss_uart/mss_uart.c ****     ASSERT(MSS_UART_INVALID_SYNC_MODE > mode);
 4259              		.loc 3 1443 0 discriminator 2
 4260              	@ 1443 "../src/drivers/mss_uart/mss_uart.c" 1
 4261 000c 00BE     		BKPT
 4262              		
 4263              	@ 0 "" 2
1444:../src/drivers/mss_uart/mss_uart.c **** 
 4264              		.loc 3 1444 0 is_stmt 1 discriminator 2
 4265              		.thumb
 4266 000e 0429     		cmp	r1, #4
 4267 0010 02D8     		bhi	.L528
 4268 0012 7047     		bx	lr
 4269              	.L526:
1444:../src/drivers/mss_uart/mss_uart.c **** 
 4270              		.loc 3 1444 0 is_stmt 0
 4271 0014 0429     		cmp	r1, #4
 4272 0016 07D9     		bls	.L530
 4273              	.L528:
1444:../src/drivers/mss_uart/mss_uart.c **** 
 4274              		.loc 3 1444 0 discriminator 1
 4275              	@ 1444 "../src/drivers/mss_uart/mss_uart.c" 1
 4276 0018 00BE     		BKPT
 4277              		
 4278              	@ 0 "" 2
1446:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_SYNC_MODE > mode))
 4279              		.loc 3 1446 0 is_stmt 1 discriminator 1
 4280              		.thumb
 4281 001a 9842     		cmp	r0, r3
 4282 001c 12D0     		beq	.L525
1446:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_SYNC_MODE > mode))
 4283              		.loc 3 1446 0 is_stmt 0 discriminator 2
 4284 001e 0B4B     		ldr	r3, .L531+4
 4285 0020 9842     		cmp	r0, r3
 4286 0022 0FD1     		bne	.L525
1446:../src/drivers/mss_uart/mss_uart.c ****        (MSS_UART_INVALID_SYNC_MODE > mode))
 4287              		.loc 3 1446 0 discriminator 3
 4288 0024 0429     		cmp	r1, #4
 4289 0026 0DD8     		bhi	.L525
 4290              	.L530:
1451:../src/drivers/mss_uart/mss_uart.c ****         this_uart->hw_reg->MM0 |= (uint8_t)mode;
 4291              		.loc 3 1451 0 is_stmt 1
 4292 0028 0268     		ldr	r2, [r0]
 4293 002a 92F83030 		ldrb	r3, [r2, #48]	@ zero_extendqisi2
 4294 002e 03F0F803 		and	r3, r3, #248
 4295 0032 82F83030 		strb	r3, [r2, #48]
1452:../src/drivers/mss_uart/mss_uart.c ****     }
 4296              		.loc 3 1452 0
 4297 0036 0268     		ldr	r2, [r0]
 4298 0038 92F83030 		ldrb	r3, [r2, #48]	@ zero_extendqisi2
 4299 003c 1943     		orrs	r1, r1, r3
 4300              	.LVL332:
 4301 003e 82F83010 		strb	r1, [r2, #48]
 4302 0042 7047     		bx	lr
 4303              	.LVL333:
 4304              	.L525:
 4305 0044 7047     		bx	lr
 4306              	.L532:
 4307 0046 00BF     		.align	2
 4308              	.L531:
 4309 0048 00000000 		.word	g_mss_uart0
 4310 004c 00000000 		.word	g_mss_uart1
 4311              		.cfi_endproc
 4312              	.LFE123:
 4314              		.comm	g_mss_uart1,64,4
 4315              		.comm	g_mss_uart0,64,4
 4316              		.text
 4317              	.Letext0:
 4318              		.file 4 "../src/drivers/mss_uart/../../CMSIS/m2sxxx.h"
 4319              		.file 5 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\arm-none-eabi\\include\\machine\\_def
 4320              		.file 6 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\arm-none-eabi\\include\\sys\\_stdint.
 4321              		.file 7 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\lib\\gcc\\arm-none-eabi\\4.9.3\\inclu
 4322              		.file 8 "../src/drivers/mss_uart/mss_uart.h"
 4323              		.file 9 "../src/drivers/mss_uart/../../CMSIS/system_m2sxxx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mss_uart.c
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:19     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:44     .text.NVIC_EnableIRQ:00000014 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:49     .text.NVIC_ClearPendingIRQ:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:53     .text.NVIC_ClearPendingIRQ:00000000 NVIC_ClearPendingIRQ
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:74     .text.NVIC_ClearPendingIRQ:00000014 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:79     .text.set_bit_reg8:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:83     .text.set_bit_reg8:00000000 set_bit_reg8
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:107    .text.clear_bit_reg8:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:111    .text.clear_bit_reg8:00000000 clear_bit_reg8
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:134    .text.read_bit_reg8:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:138    .text.read_bit_reg8:00000000 read_bit_reg8
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:162    .text.default_tx_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:166    .text.default_tx_handler:00000000 default_tx_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:309    .text.default_tx_handler:0000007c $d
                            *COM*:00000040 g_mss_uart0
                            *COM*:00000040 g_mss_uart1
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:316    .text.MSS_UART_isr.part.0:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:320    .text.MSS_UART_isr.part.0:00000000 MSS_UART_isr.part.0
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:345    .text.MSS_UART_isr.part.0:00000014 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:500    .text.global_init:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:504    .text.global_init:00000000 global_init
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:886    .text.global_init:000001cc $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:897    .text.MSS_UART_init:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:902    .text.MSS_UART_init:00000000 MSS_UART_init
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:964    .text.MSS_UART_init:0000003c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:971    .text.MSS_UART_lin_init:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:976    .text.MSS_UART_lin_init:00000000 MSS_UART_lin_init
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1040   .text.MSS_UART_lin_init:0000003c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1046   .text.MSS_UART_irda_init:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1051   .text.MSS_UART_irda_init:00000000 MSS_UART_irda_init
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1170   .text.MSS_UART_irda_init:0000007c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1176   .text.MSS_UART_smartcard_init:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1181   .text.MSS_UART_smartcard_init:00000000 MSS_UART_smartcard_init
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1269   .text.MSS_UART_smartcard_init:00000054 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1275   .text.MSS_UART_polled_tx:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1280   .text.MSS_UART_polled_tx:00000000 MSS_UART_polled_tx
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1392   .text.MSS_UART_polled_tx:00000060 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1398   .text.MSS_UART_polled_tx_string:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1403   .text.MSS_UART_polled_tx_string:00000000 MSS_UART_polled_tx_string
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1501   .text.MSS_UART_polled_tx_string:00000048 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1507   .text.MSS_UART_irq_tx:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1512   .text.MSS_UART_irq_tx:00000000 MSS_UART_irq_tx
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1617   .text.MSS_UART_irq_tx:00000058 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1624   .text.MSS_UART_tx_complete:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1629   .text.MSS_UART_tx_complete:00000000 MSS_UART_tx_complete
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1681   .text.MSS_UART_tx_complete:0000002c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1687   .text.MSS_UART_get_rx:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1692   .text.MSS_UART_get_rx:00000000 MSS_UART_get_rx
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1817   .text.MSS_UART_get_rx:00000064 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1823   .text.MSS_UART_enable_irq:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1828   .text.MSS_UART_enable_irq:00000000 MSS_UART_enable_irq
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1927   .text.MSS_UART_enable_irq:00000068 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1933   .text.MSS_UART_disable_irq:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:1938   .text.MSS_UART_disable_irq:00000000 MSS_UART_disable_irq
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2017   .text.MSS_UART_disable_irq:0000005c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2026   .text.MSS_UART_set_rx_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2031   .text.MSS_UART_set_rx_handler:00000000 MSS_UART_set_rx_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2135   .text.MSS_UART_set_rx_handler:0000005c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2141   .text.MSS_UART_set_loopback:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2146   .text.MSS_UART_set_loopback:00000000 MSS_UART_set_loopback
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2193   .text.MSS_UART_set_loopback:0000002a $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2199   .text.MSS_UART_set_loopback:00000030 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2253   .text.MSS_UART_set_loopback:0000006c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2259   .text.UART0_IRQHandler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2264   .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2297   .text.UART0_IRQHandler:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2302   .text.UART1_IRQHandler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2307   .text.UART1_IRQHandler:00000000 UART1_IRQHandler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2340   .text.UART1_IRQHandler:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2345   .text.MSS_UART_set_rxstatus_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2350   .text.MSS_UART_set_rxstatus_handler:00000000 MSS_UART_set_rxstatus_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2426   .text.MSS_UART_set_rxstatus_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2432   .text.MSS_UART_set_tx_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2437   .text.MSS_UART_set_tx_handler:00000000 MSS_UART_set_tx_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2519   .text.MSS_UART_set_tx_handler:00000044 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2525   .text.MSS_UART_set_modemstatus_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2530   .text.MSS_UART_set_modemstatus_handler:00000000 MSS_UART_set_modemstatus_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2606   .text.MSS_UART_set_modemstatus_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2612   .text.MSS_UART_fill_tx_fifo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2617   .text.MSS_UART_fill_tx_fifo:00000000 MSS_UART_fill_tx_fifo
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2735   .text.MSS_UART_fill_tx_fifo:00000058 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2741   .text.MSS_UART_get_rx_status:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2746   .text.MSS_UART_get_rx_status:00000000 MSS_UART_get_rx_status
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2793   .text.MSS_UART_get_rx_status:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2799   .text.MSS_UART_get_modem_status:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2804   .text.MSS_UART_get_modem_status:00000000 MSS_UART_get_modem_status
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2843   .text.MSS_UART_get_modem_status:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2849   .text.MSS_UART_get_tx_status:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2854   .text.MSS_UART_get_tx_status:00000000 MSS_UART_get_tx_status
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2901   .text.MSS_UART_get_tx_status:00000024 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2907   .text.MSS_UART_set_break:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2912   .text.MSS_UART_set_break:00000000 MSS_UART_set_break
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2946   .text.MSS_UART_set_break:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2952   .text.MSS_UART_clear_break:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2957   .text.MSS_UART_clear_break:00000000 MSS_UART_clear_break
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2991   .text.MSS_UART_clear_break:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:2997   .text.MSS_UART_set_pidpei_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3002   .text.MSS_UART_set_pidpei_handler:00000000 MSS_UART_set_pidpei_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3078   .text.MSS_UART_set_pidpei_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3084   .text.MSS_UART_set_linbreak_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3089   .text.MSS_UART_set_linbreak_handler:00000000 MSS_UART_set_linbreak_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3165   .text.MSS_UART_set_linbreak_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3171   .text.MSS_UART_set_linsync_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3176   .text.MSS_UART_set_linsync_handler:00000000 MSS_UART_set_linsync_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3252   .text.MSS_UART_set_linsync_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3258   .text.MSS_UART_set_nack_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3263   .text.MSS_UART_set_nack_handler:00000000 MSS_UART_set_nack_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3339   .text.MSS_UART_set_nack_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3345   .text.MSS_UART_set_rx_timeout_handler:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3350   .text.MSS_UART_set_rx_timeout_handler:00000000 MSS_UART_set_rx_timeout_handler
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3426   .text.MSS_UART_set_rx_timeout_handler:00000040 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3432   .text.MSS_UART_enable_half_duplex:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3437   .text.MSS_UART_enable_half_duplex:00000000 MSS_UART_enable_half_duplex
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3471   .text.MSS_UART_enable_half_duplex:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3477   .text.MSS_UART_disable_half_duplex:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3482   .text.MSS_UART_disable_half_duplex:00000000 MSS_UART_disable_half_duplex
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3516   .text.MSS_UART_disable_half_duplex:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3522   .text.MSS_UART_set_rx_endian:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3527   .text.MSS_UART_set_rx_endian:00000000 MSS_UART_set_rx_endian
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3594   .text.MSS_UART_set_rx_endian:0000003c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3600   .text.MSS_UART_set_tx_endian:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3605   .text.MSS_UART_set_tx_endian:00000000 MSS_UART_set_tx_endian
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3674   .text.MSS_UART_set_tx_endian:0000003c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3680   .text.MSS_UART_set_filter_length:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3685   .text.MSS_UART_set_filter_length:00000000 MSS_UART_set_filter_length
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3742   .text.MSS_UART_set_filter_length:00000034 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3748   .text.MSS_UART_enable_afm:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3753   .text.MSS_UART_enable_afm:00000000 MSS_UART_enable_afm
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3787   .text.MSS_UART_enable_afm:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3793   .text.MSS_UART_disable_afm:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3798   .text.MSS_UART_disable_afm:00000000 MSS_UART_disable_afm
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3832   .text.MSS_UART_disable_afm:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3838   .text.MSS_UART_enable_afclear:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3843   .text.MSS_UART_enable_afclear:00000000 MSS_UART_enable_afclear
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3877   .text.MSS_UART_enable_afclear:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3883   .text.MSS_UART_disable_afclear:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3888   .text.MSS_UART_disable_afclear:00000000 MSS_UART_disable_afclear
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3922   .text.MSS_UART_disable_afclear:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3928   .text.MSS_UART_enable_rx_timeout:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3933   .text.MSS_UART_enable_rx_timeout:00000000 MSS_UART_enable_rx_timeout
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3971   .text.MSS_UART_enable_rx_timeout:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3977   .text.MSS_UART_disable_rx_timeout:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:3982   .text.MSS_UART_disable_rx_timeout:00000000 MSS_UART_disable_rx_timeout
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4016   .text.MSS_UART_disable_rx_timeout:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4022   .text.MSS_UART_enable_tx_time_guard:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4027   .text.MSS_UART_enable_tx_time_guard:00000000 MSS_UART_enable_tx_time_guard
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4065   .text.MSS_UART_enable_tx_time_guard:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4071   .text.MSS_UART_disable_tx_time_guard:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4076   .text.MSS_UART_disable_tx_time_guard:00000000 MSS_UART_disable_tx_time_guard
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4110   .text.MSS_UART_disable_tx_time_guard:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4116   .text.MSS_UART_set_address:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4121   .text.MSS_UART_set_address:00000000 MSS_UART_set_address
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4152   .text.MSS_UART_set_address:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4158   .text.MSS_UART_set_ready_mode:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4163   .text.MSS_UART_set_ready_mode:00000000 MSS_UART_set_ready_mode
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4232   .text.MSS_UART_set_ready_mode:0000003c $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4238   .text.MSS_UART_set_usart_mode:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4243   .text.MSS_UART_set_usart_mode:00000000 MSS_UART_set_usart_mode
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:4309   .text.MSS_UART_set_usart_mode:00000048 $d
                     .debug_frame:00000010 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:358    .text.MSS_UART_isr.part.0:00000021 $d
C:\Users\jiryu\AppData\Local\Temp\ccUlYNbe.s:358    .text.MSS_UART_isr.part.0:00000022 $t
                           .group:00000000 wm4.0.dc60c94ad21b0a47fa3b55ee8062ac89
                           .group:00000000 wm4.m2sxxx.h.14.987ea2aeaafde240411e8c56d47721f7
                           .group:00000000 wm4.core_cm3.h.43.614605f47657df9251f3b3f57590a49a
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cmInstr.h.39.addda81f1f3453ba31dd54fc5b6fcee8
                           .group:00000000 wm4.core_cm3.h.160.4f087d7d2b17fc46469486aedc40cf5c
                           .group:00000000 wm4.m2sxxx.h.2709.9eef8620912489dbc5c26e98701cdac3
                           .group:00000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:00000000 wm4.mss_uart.h.258.ed2d082f8e6703bd440653ce1fa4b528
                           .group:00000000 wm4.mss_uart_regs.h.10.827109edea32ef67ce1dc5e1851bb270
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.hw_reg_io.h.16.c9d7aff089fb1847a6b2205f0f6f95ab

UNDEFINED SYMBOLS
SystemCoreClockUpdate
g_FrequencyPCLK0
g_FrequencyPCLK1
