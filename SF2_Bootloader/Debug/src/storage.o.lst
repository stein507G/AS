   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"storage.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	g_tStorageInfo,256,4
  19              		.section	.text.InitStorageInfo,"ax",%progbits
  20              		.align	2
  21              		.global	InitStorageInfo
  22              		.thumb
  23              		.thumb_func
  25              	InitStorageInfo:
  26              	.LFB102:
  27              		.file 1 "../src/storage.c"
   1:../src/storage.c **** #include "config.h"
   2:../src/storage.c **** 
   3:../src/storage.c **** #define	MAX_RETRY			3
   4:../src/storage.c **** 
   5:../src/storage.c **** STORAGE_INFO_T	g_tStorageInfo;
   6:../src/storage.c **** 
   7:../src/storage.c **** int InitStorageInfo()
   8:../src/storage.c **** {
  28              		.loc 1 8 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
   9:../src/storage.c **** 	int nRet = 0, i = 0;
  40              		.loc 1 9 0
  41 0006 0023     		movs	r3, #0
  42 0008 7B60     		str	r3, [r7, #4]
  43 000a 0023     		movs	r3, #0
  44 000c 3B60     		str	r3, [r7]
  10:../src/storage.c **** 	memset((uint8_t *)&g_tStorageInfo, 0, sizeof(STORAGE_INFO_T));
  45              		.loc 1 10 0
  46 000e 0D48     		ldr	r0, .L7
  47 0010 0021     		movs	r1, #0
  48 0012 4FF48072 		mov	r2, #256
  49 0016 FFF7FEFF 		bl	memset
  11:../src/storage.c **** 	for(i = 0; i < MAX_RETRY ; i++) {
  50              		.loc 1 11 0
  51 001a 0023     		movs	r3, #0
  52 001c 3B60     		str	r3, [r7]
  53 001e 09E0     		b	.L2
  54              	.L5:
  12:../src/storage.c **** 		nRet = LoadStorageInfo();
  55              		.loc 1 12 0
  56 0020 FFF7FEFF 		bl	LoadStorageInfo
  57 0024 7860     		str	r0, [r7, #4]
  13:../src/storage.c **** 		if(NVM_SUCCESS == nRet) {
  58              		.loc 1 13 0
  59 0026 7B68     		ldr	r3, [r7, #4]
  60 0028 002B     		cmp	r3, #0
  61 002a 00D1     		bne	.L3
  14:../src/storage.c **** 			break;
  62              		.loc 1 14 0
  63 002c 05E0     		b	.L4
  64              	.L3:
  11:../src/storage.c **** 		nRet = LoadStorageInfo();
  65              		.loc 1 11 0 discriminator 2
  66 002e 3B68     		ldr	r3, [r7]
  67 0030 0133     		adds	r3, r3, #1
  68 0032 3B60     		str	r3, [r7]
  69              	.L2:
  11:../src/storage.c **** 		nRet = LoadStorageInfo();
  70              		.loc 1 11 0 is_stmt 0 discriminator 1
  71 0034 3B68     		ldr	r3, [r7]
  72 0036 022B     		cmp	r3, #2
  73 0038 F2DD     		ble	.L5
  74              	.L4:
  15:../src/storage.c **** 		} else {
  16:../src/storage.c **** 			//DEBUG_E("() - Failed to read data storage [%d]\r\n", nRet);
  17:../src/storage.c **** 		}
  18:../src/storage.c **** 	}
  19:../src/storage.c **** 	return nRet;
  75              		.loc 1 19 0 is_stmt 1
  76 003a 7B68     		ldr	r3, [r7, #4]
  20:../src/storage.c **** }
  77              		.loc 1 20 0
  78 003c 1846     		mov	r0, r3
  79 003e 0837     		adds	r7, r7, #8
  80              		.cfi_def_cfa_offset 8
  81 0040 BD46     		mov	sp, r7
  82              		.cfi_def_cfa_register 13
  83              		@ sp needed
  84 0042 80BD     		pop	{r7, pc}
  85              	.L8:
  86              		.align	2
  87              	.L7:
  88 0044 00000000 		.word	g_tStorageInfo
  89              		.cfi_endproc
  90              	.LFE102:
  92              		.section	.text.GetStorageInfo,"ax",%progbits
  93              		.align	2
  94              		.global	GetStorageInfo
  95              		.thumb
  96              		.thumb_func
  98              	GetStorageInfo:
  99              	.LFB103:
  21:../src/storage.c **** 
  22:../src/storage.c **** PSTORAGE_INFO_T GetStorageInfo()
  23:../src/storage.c **** {
 100              		.loc 1 23 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
  24:../src/storage.c **** 	return (PSTORAGE_INFO_T)&g_tStorageInfo;
 110              		.loc 1 24 0
 111 0004 024B     		ldr	r3, .L11
  25:../src/storage.c **** }
 112              		.loc 1 25 0
 113 0006 1846     		mov	r0, r3
 114 0008 BD46     		mov	sp, r7
 115              		.cfi_def_cfa_register 13
 116              		@ sp needed
 117 000a 5DF8047B 		ldr	r7, [sp], #4
 118              		.cfi_restore 7
 119              		.cfi_def_cfa_offset 0
 120 000e 7047     		bx	lr
 121              	.L12:
 122              		.align	2
 123              	.L11:
 124 0010 00000000 		.word	g_tStorageInfo
 125              		.cfi_endproc
 126              	.LFE103:
 128              		.section	.text.LoadStorageInfo,"ax",%progbits
 129              		.align	2
 130              		.global	LoadStorageInfo
 131              		.thumb
 132              		.thumb_func
 134              	LoadStorageInfo:
 135              	.LFB104:
  26:../src/storage.c **** 
  27:../src/storage.c **** int LoadStorageInfo()
  28:../src/storage.c **** {
 136              		.loc 1 28 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 24
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140 0000 80B5     		push	{r7, lr}
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 86B0     		sub	sp, sp, #24
 145              		.cfi_def_cfa_offset 32
 146 0004 00AF     		add	r7, sp, #0
 147              		.cfi_def_cfa_register 7
  29:../src/storage.c **** 	nvm_status_t status = NVM_SUCCESS;
 148              		.loc 1 29 0
 149 0006 0023     		movs	r3, #0
 150 0008 FB74     		strb	r3, [r7, #19]
  30:../src/storage.c **** 	int nRet = NVM_SUCCESS, nRetry = 0, nSize = sizeof(STORAGE_INFO_T);
 151              		.loc 1 30 0
 152 000a 0023     		movs	r3, #0
 153 000c 7B61     		str	r3, [r7, #20]
 154 000e 0023     		movs	r3, #0
 155 0010 FB60     		str	r3, [r7, #12]
 156 0012 4FF48073 		mov	r3, #256
 157 0016 BB60     		str	r3, [r7, #8]
  31:../src/storage.c **** 	volatile uint32_t address = ENVM_DATA_STORAGE_READ_BASE_ADDR;
 158              		.loc 1 31 0
 159 0018 4FF47C33 		mov	r3, #258048
 160 001c 7B60     		str	r3, [r7, #4]
  32:../src/storage.c **** 
  33:../src/storage.c **** 	for(nRetry = 0 ; nRetry < MAX_RETRY ; nRetry++) {
 161              		.loc 1 33 0
 162 001e 0023     		movs	r3, #0
 163 0020 FB60     		str	r3, [r7, #12]
 164 0022 FB68     		ldr	r3, [r7, #12]
 165 0024 022B     		cmp	r3, #2
 166 0026 10DC     		bgt	.L14
  34:../src/storage.c **** 		status = MSS_NVM_read( (uint8_t *)address, (uint8_t *)&g_tStorageInfo, nSize);
 167              		.loc 1 34 0
 168 0028 7B68     		ldr	r3, [r7, #4]
 169 002a 1A46     		mov	r2, r3
 170 002c BB68     		ldr	r3, [r7, #8]
 171 002e 1046     		mov	r0, r2
 172 0030 0849     		ldr	r1, .L17
 173 0032 1A46     		mov	r2, r3
 174 0034 FFF7FEFF 		bl	MSS_NVM_read
 175 0038 0346     		mov	r3, r0
 176 003a FB74     		strb	r3, [r7, #19]
  35:../src/storage.c **** 		if(NVM_SUCCESS == status)
 177              		.loc 1 35 0
 178 003c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 179 003e 002B     		cmp	r3, #0
 180 0040 00D1     		bne	.L15
  36:../src/storage.c **** 		{
  37:../src/storage.c **** 			break;
 181              		.loc 1 37 0
 182 0042 02E0     		b	.L14
 183              	.L15:
  38:../src/storage.c **** 		}
  39:../src/storage.c **** //		else if(NVM_PAGE_LOCK_ERROR == status) {
  40:../src/storage.c **** //			// 메모리 Unlock 후  writing 재시도  or send NAK
  41:../src/storage.c **** //			if( NVM_unlock(address, pPktHeader->Length) != NVM_SUCCESS ) {
  42:../src/storage.c **** //
  43:../src/storage.c **** //			}
  44:../src/storage.c **** //		}
  45:../src/storage.c **** 		else {
  46:../src/storage.c **** 			nRet = status;
 184              		.loc 1 46 0
 185 0044 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 186 0046 7B61     		str	r3, [r7, #20]
  47:../src/storage.c **** 			break;
 187              		.loc 1 47 0
 188 0048 00BF     		nop
 189              	.L14:
  48:../src/storage.c **** 		}
  49:../src/storage.c **** 	}
  50:../src/storage.c **** 
  51:../src/storage.c **** 	return nRet;
 190              		.loc 1 51 0
 191 004a 7B69     		ldr	r3, [r7, #20]
  52:../src/storage.c **** }
 192              		.loc 1 52 0
 193 004c 1846     		mov	r0, r3
 194 004e 1837     		adds	r7, r7, #24
 195              		.cfi_def_cfa_offset 8
 196 0050 BD46     		mov	sp, r7
 197              		.cfi_def_cfa_register 13
 198              		@ sp needed
 199 0052 80BD     		pop	{r7, pc}
 200              	.L18:
 201              		.align	2
 202              	.L17:
 203 0054 00000000 		.word	g_tStorageInfo
 204              		.cfi_endproc
 205              	.LFE104:
 207              		.section	.text.SaveStorageInfo,"ax",%progbits
 208              		.align	2
 209              		.global	SaveStorageInfo
 210              		.thumb
 211              		.thumb_func
 213              	SaveStorageInfo:
 214              	.LFB105:
  53:../src/storage.c **** 
  54:../src/storage.c **** int SaveStorageInfo(int type)
  55:../src/storage.c **** {
 215              		.loc 1 55 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 40
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219 0000 80B5     		push	{r7, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 8AB0     		sub	sp, sp, #40
 224              		.cfi_def_cfa_offset 48
 225 0004 00AF     		add	r7, sp, #0
 226              		.cfi_def_cfa_register 7
 227 0006 7860     		str	r0, [r7, #4]
  56:../src/storage.c **** 	nvm_status_t status = NVM_SUCCESS;
 228              		.loc 1 56 0
 229 0008 0023     		movs	r3, #0
 230 000a FB75     		strb	r3, [r7, #23]
  57:../src/storage.c **** 	int nRet = NVM_SUCCESS, nRetry = 0, nSize = 0;
 231              		.loc 1 57 0
 232 000c 0023     		movs	r3, #0
 233 000e 7B62     		str	r3, [r7, #36]
 234 0010 0023     		movs	r3, #0
 235 0012 3B62     		str	r3, [r7, #32]
 236 0014 0023     		movs	r3, #0
 237 0016 FB61     		str	r3, [r7, #28]
  58:../src/storage.c **** 	volatile uint32_t address = 0, baseAddress = ENVM_DATA_STORAGE_WRITE_BASE_ADDR, offset = 0 ;
 238              		.loc 1 58 0
 239 0018 0023     		movs	r3, #0
 240 001a 3B61     		str	r3, [r7, #16]
 241 001c 324B     		ldr	r3, .L34
 242 001e FB60     		str	r3, [r7, #12]
 243 0020 0023     		movs	r3, #0
 244 0022 BB60     		str	r3, [r7, #8]
  59:../src/storage.c **** 	uint8_t* pData = NULL;
 245              		.loc 1 59 0
 246 0024 0023     		movs	r3, #0
 247 0026 BB61     		str	r3, [r7, #24]
  60:../src/storage.c **** 
  61:../src/storage.c **** 	if( DS_TYPE_SYSTEM == type)
 248              		.loc 1 61 0
 249 0028 7B68     		ldr	r3, [r7, #4]
 250 002a 012B     		cmp	r3, #1
 251 002c 06D1     		bne	.L20
  62:../src/storage.c **** 	{
  63:../src/storage.c **** 		offset = 0;
 252              		.loc 1 63 0
 253 002e 0023     		movs	r3, #0
 254 0030 BB60     		str	r3, [r7, #8]
  64:../src/storage.c **** 		nSize = sizeof(g_tStorageInfo.SystemInfo);
 255              		.loc 1 64 0
 256 0032 8023     		movs	r3, #128
 257 0034 FB61     		str	r3, [r7, #28]
  65:../src/storage.c **** 		pData = (uint8_t*)&g_tStorageInfo.SystemInfo;
 258              		.loc 1 65 0
 259 0036 2D4B     		ldr	r3, .L34+4
 260 0038 BB61     		str	r3, [r7, #24]
 261 003a 16E0     		b	.L21
 262              	.L20:
  66:../src/storage.c **** 	}
  67:../src/storage.c **** 	else if( DS_TYPE_LAMP_TIME == type)
 263              		.loc 1 67 0
 264 003c 7B68     		ldr	r3, [r7, #4]
 265 003e 022B     		cmp	r3, #2
 266 0040 06D1     		bne	.L22
  68:../src/storage.c **** 	{
  69:../src/storage.c **** 		offset = sizeof(g_tStorageInfo.SystemInfo);
 267              		.loc 1 69 0
 268 0042 8023     		movs	r3, #128
 269 0044 BB60     		str	r3, [r7, #8]
  70:../src/storage.c **** 		nSize = sizeof(g_tStorageInfo.LampTime);
 270              		.loc 1 70 0
 271 0046 4023     		movs	r3, #64
 272 0048 FB61     		str	r3, [r7, #28]
  71:../src/storage.c **** 		pData = (uint8_t*)&g_tStorageInfo.LampTime;
 273              		.loc 1 71 0
 274 004a 294B     		ldr	r3, .L34+8
 275 004c BB61     		str	r3, [r7, #24]
 276 004e 0CE0     		b	.L21
 277              	.L22:
  72:../src/storage.c **** 	}
  73:../src/storage.c **** 	else if( DS_TYPE_WAVE == type)
 278              		.loc 1 73 0
 279 0050 7B68     		ldr	r3, [r7, #4]
 280 0052 032B     		cmp	r3, #3
 281 0054 06D1     		bne	.L23
  74:../src/storage.c **** 	{
  75:../src/storage.c **** 		offset = sizeof(g_tStorageInfo.SystemInfo) + sizeof(g_tStorageInfo.LampTime);
 282              		.loc 1 75 0
 283 0056 C023     		movs	r3, #192
 284 0058 BB60     		str	r3, [r7, #8]
  76:../src/storage.c **** 		nSize = sizeof(g_tStorageInfo.WaveInfo);
 285              		.loc 1 76 0
 286 005a 4023     		movs	r3, #64
 287 005c FB61     		str	r3, [r7, #28]
  77:../src/storage.c **** 		pData = (uint8_t*)&g_tStorageInfo.WaveInfo;
 288              		.loc 1 77 0
 289 005e 254B     		ldr	r3, .L34+12
 290 0060 BB61     		str	r3, [r7, #24]
 291 0062 02E0     		b	.L21
 292              	.L23:
  78:../src/storage.c **** 	} else {
  79:../src/storage.c **** 		//DEBUG_E("() - Invalid Storage Type[%d]", type);
  80:../src/storage.c **** 		return -1;
 293              		.loc 1 80 0
 294 0064 4FF0FF33 		mov	r3, #-1
 295 0068 3AE0     		b	.L24
 296              	.L21:
  81:../src/storage.c **** 	}
  82:../src/storage.c **** 
  83:../src/storage.c **** 	address = baseAddress + offset;
 297              		.loc 1 83 0
 298 006a FA68     		ldr	r2, [r7, #12]
 299 006c BB68     		ldr	r3, [r7, #8]
 300 006e 1344     		add	r3, r3, r2
 301 0070 3B61     		str	r3, [r7, #16]
  84:../src/storage.c **** 	for(nRetry = 0 ; nRetry < MAX_RETRY ; nRetry++)
 302              		.loc 1 84 0
 303 0072 0023     		movs	r3, #0
 304 0074 3B62     		str	r3, [r7, #32]
 305 0076 2FE0     		b	.L25
 306              	.L32:
  85:../src/storage.c **** 	{
  86:../src/storage.c **** 		status = NVM_write( address, pData, nSize, NVM_DO_NOT_LOCK_PAGE);
 307              		.loc 1 86 0
 308 0078 3A69     		ldr	r2, [r7, #16]
 309 007a FB69     		ldr	r3, [r7, #28]
 310 007c 1046     		mov	r0, r2
 311 007e B969     		ldr	r1, [r7, #24]
 312 0080 1A46     		mov	r2, r3
 313 0082 0023     		movs	r3, #0
 314 0084 FFF7FEFF 		bl	NVM_write
 315 0088 0346     		mov	r3, r0
 316 008a FB75     		strb	r3, [r7, #23]
  87:../src/storage.c **** 		if(NVM_SUCCESS == status || NVM_WRITE_THRESHOLD_WARNING == status)
 317              		.loc 1 87 0
 318 008c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 319 008e 002B     		cmp	r3, #0
 320 0090 02D0     		beq	.L26
 321              		.loc 1 87 0 is_stmt 0 discriminator 1
 322 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 323 0094 052B     		cmp	r3, #5
 324 0096 0FD1     		bne	.L27
 325              	.L26:
  88:../src/storage.c **** 		{
  89:../src/storage.c **** 			status = NVM_verify( address, (uint8_t *)&g_tStorageInfo, nSize );
 326              		.loc 1 89 0 is_stmt 1
 327 0098 3A69     		ldr	r2, [r7, #16]
 328 009a FB69     		ldr	r3, [r7, #28]
 329 009c 1046     		mov	r0, r2
 330 009e 1349     		ldr	r1, .L34+4
 331 00a0 1A46     		mov	r2, r3
 332 00a2 FFF7FEFF 		bl	NVM_verify
 333 00a6 0346     		mov	r3, r0
 334 00a8 FB75     		strb	r3, [r7, #23]
  90:../src/storage.c **** 			if(status != NVM_SUCCESS) {
 335              		.loc 1 90 0
 336 00aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 337 00ac 002B     		cmp	r3, #0
 338 00ae 02D0     		beq	.L28
  91:../src/storage.c **** 				nRet = status;
 339              		.loc 1 91 0
 340 00b0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 341 00b2 7B62     		str	r3, [r7, #36]
  92:../src/storage.c **** 			}
  93:../src/storage.c **** //			else {
  94:../src/storage.c **** //				address = ENVM_DATA_STORAGE_READ_BASE_ADDR;
  95:../src/storage.c **** //				status = MSS_NVM_read( (uint8_t *)address, (uint8_t *)&g_tStorageInfo, nSize);
  96:../src/storage.c **** //				if(NVM_SUCCESS != status)
  97:../src/storage.c **** //				{
  98:../src/storage.c **** //					nRet = status;
  99:../src/storage.c **** //				}
 100:../src/storage.c **** //			}
 101:../src/storage.c **** 			break;
 342              		.loc 1 101 0
 343 00b4 13E0     		b	.L29
 344              	.L28:
 345 00b6 12E0     		b	.L29
 346              	.L27:
 102:../src/storage.c **** 		}
 103:../src/storage.c **** 		else if(NVM_PAGE_LOCK_ERROR == status) {
 347              		.loc 1 103 0
 348 00b8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 349 00ba 032B     		cmp	r3, #3
 350 00bc 06D1     		bne	.L30
 104:../src/storage.c **** 			// 메모리 Unlock 후  writing 재시도  or send NAK
 105:../src/storage.c **** 			if( NVM_unlock(address, nSize) != NVM_SUCCESS ) {
 351              		.loc 1 105 0
 352 00be 3A69     		ldr	r2, [r7, #16]
 353 00c0 FB69     		ldr	r3, [r7, #28]
 354 00c2 1046     		mov	r0, r2
 355 00c4 1946     		mov	r1, r3
 356 00c6 FFF7FEFF 		bl	NVM_unlock
 357 00ca 02E0     		b	.L33
 358              	.L30:
 106:../src/storage.c **** 
 107:../src/storage.c **** 			}
 108:../src/storage.c **** 		}
 109:../src/storage.c **** 		else {
 110:../src/storage.c **** 			nRet = status;
 359              		.loc 1 110 0
 360 00cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 361 00ce 7B62     		str	r3, [r7, #36]
 111:../src/storage.c **** 			break;
 362              		.loc 1 111 0
 363 00d0 05E0     		b	.L29
 364              	.L33:
  84:../src/storage.c **** 	{
 365              		.loc 1 84 0 discriminator 2
 366 00d2 3B6A     		ldr	r3, [r7, #32]
 367 00d4 0133     		adds	r3, r3, #1
 368 00d6 3B62     		str	r3, [r7, #32]
 369              	.L25:
  84:../src/storage.c **** 	{
 370              		.loc 1 84 0 is_stmt 0 discriminator 1
 371 00d8 3B6A     		ldr	r3, [r7, #32]
 372 00da 022B     		cmp	r3, #2
 373 00dc CCDD     		ble	.L32
 374              	.L29:
 112:../src/storage.c **** 		}
 113:../src/storage.c **** 	}
 114:../src/storage.c **** 	return nRet;
 375              		.loc 1 114 0 is_stmt 1
 376 00de 7B6A     		ldr	r3, [r7, #36]
 377              	.L24:
 115:../src/storage.c **** }
 378              		.loc 1 115 0
 379 00e0 1846     		mov	r0, r3
 380 00e2 2837     		adds	r7, r7, #40
 381              		.cfi_def_cfa_offset 8
 382 00e4 BD46     		mov	sp, r7
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 00e6 80BD     		pop	{r7, pc}
 386              	.L35:
 387              		.align	2
 388              	.L34:
 389 00e8 00F00360 		.word	1610870784
 390 00ec 00000000 		.word	g_tStorageInfo
 391 00f0 80000000 		.word	g_tStorageInfo+128
 392 00f4 C0000000 		.word	g_tStorageInfo+192
 393              		.cfi_endproc
 394              	.LFE105:
 396              		.section	.text.SaveStorageInfoALL,"ax",%progbits
 397              		.align	2
 398              		.global	SaveStorageInfoALL
 399              		.thumb
 400              		.thumb_func
 402              	SaveStorageInfoALL:
 403              	.LFB106:
 116:../src/storage.c **** 
 117:../src/storage.c **** int SaveStorageInfoALL()
 118:../src/storage.c **** {
 404              		.loc 1 118 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 24
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408 0000 80B5     		push	{r7, lr}
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 7, -8
 411              		.cfi_offset 14, -4
 412 0002 86B0     		sub	sp, sp, #24
 413              		.cfi_def_cfa_offset 32
 414 0004 00AF     		add	r7, sp, #0
 415              		.cfi_def_cfa_register 7
 119:../src/storage.c **** 	nvm_status_t status = NVM_SUCCESS;
 416              		.loc 1 119 0
 417 0006 0023     		movs	r3, #0
 418 0008 FB73     		strb	r3, [r7, #15]
 120:../src/storage.c **** 	int nRet = NVM_SUCCESS, nRetry = 0, nSize = sizeof(STORAGE_INFO_T);
 419              		.loc 1 120 0
 420 000a 0023     		movs	r3, #0
 421 000c 7B61     		str	r3, [r7, #20]
 422 000e 0023     		movs	r3, #0
 423 0010 3B61     		str	r3, [r7, #16]
 424 0012 4FF48073 		mov	r3, #256
 425 0016 BB60     		str	r3, [r7, #8]
 121:../src/storage.c **** 	volatile uint32_t address = ENVM_DATA_STORAGE_WRITE_BASE_ADDR;
 426              		.loc 1 121 0
 427 0018 1E4B     		ldr	r3, .L47
 428 001a 7B60     		str	r3, [r7, #4]
 122:../src/storage.c **** 
 123:../src/storage.c **** 	for(nRetry = 0 ; nRetry < MAX_RETRY ; nRetry++)
 429              		.loc 1 123 0
 430 001c 0023     		movs	r3, #0
 431 001e 3B61     		str	r3, [r7, #16]
 432 0020 2FE0     		b	.L37
 433              	.L44:
 124:../src/storage.c **** 	{
 125:../src/storage.c **** 		status = NVM_write( address, (uint8_t *)&g_tStorageInfo, nSize, NVM_DO_NOT_LOCK_PAGE);
 434              		.loc 1 125 0
 435 0022 7A68     		ldr	r2, [r7, #4]
 436 0024 BB68     		ldr	r3, [r7, #8]
 437 0026 1046     		mov	r0, r2
 438 0028 1B49     		ldr	r1, .L47+4
 439 002a 1A46     		mov	r2, r3
 440 002c 0023     		movs	r3, #0
 441 002e FFF7FEFF 		bl	NVM_write
 442 0032 0346     		mov	r3, r0
 443 0034 FB73     		strb	r3, [r7, #15]
 126:../src/storage.c **** 		if(NVM_SUCCESS == status || NVM_WRITE_THRESHOLD_WARNING == status)
 444              		.loc 1 126 0
 445 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 446 0038 002B     		cmp	r3, #0
 447 003a 02D0     		beq	.L38
 448              		.loc 1 126 0 is_stmt 0 discriminator 1
 449 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 450 003e 052B     		cmp	r3, #5
 451 0040 0FD1     		bne	.L39
 452              	.L38:
 127:../src/storage.c **** 		{
 128:../src/storage.c **** 			status = NVM_verify( address, (uint8_t *)&g_tStorageInfo, nSize );
 453              		.loc 1 128 0 is_stmt 1
 454 0042 7A68     		ldr	r2, [r7, #4]
 455 0044 BB68     		ldr	r3, [r7, #8]
 456 0046 1046     		mov	r0, r2
 457 0048 1349     		ldr	r1, .L47+4
 458 004a 1A46     		mov	r2, r3
 459 004c FFF7FEFF 		bl	NVM_verify
 460 0050 0346     		mov	r3, r0
 461 0052 FB73     		strb	r3, [r7, #15]
 129:../src/storage.c **** 			if(status != NVM_SUCCESS) {
 462              		.loc 1 129 0
 463 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 464 0056 002B     		cmp	r3, #0
 465 0058 02D0     		beq	.L40
 130:../src/storage.c **** 				nRet = status;
 466              		.loc 1 130 0
 467 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 468 005c 7B61     		str	r3, [r7, #20]
 131:../src/storage.c **** 			}
 132:../src/storage.c **** //			else {
 133:../src/storage.c **** //				address = ENVM_DATA_STORAGE_READ_BASE_ADDR;
 134:../src/storage.c **** //				status = MSS_NVM_read( (uint8_t *)address, (uint8_t *)&g_tStorageInfo, nSize);
 135:../src/storage.c **** //				if(NVM_SUCCESS != status)
 136:../src/storage.c **** //				{
 137:../src/storage.c **** //					nRet = status;
 138:../src/storage.c **** //				}
 139:../src/storage.c **** //			}
 140:../src/storage.c **** 			break;
 469              		.loc 1 140 0
 470 005e 13E0     		b	.L41
 471              	.L40:
 472 0060 12E0     		b	.L41
 473              	.L39:
 141:../src/storage.c **** 		}
 142:../src/storage.c **** 		else if(NVM_PAGE_LOCK_ERROR == status) {
 474              		.loc 1 142 0
 475 0062 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 476 0064 032B     		cmp	r3, #3
 477 0066 06D1     		bne	.L42
 143:../src/storage.c **** 			// 메모리 Unlock 후  writing 재시도  or send NAK
 144:../src/storage.c **** 			if( NVM_unlock(address, nSize) != NVM_SUCCESS ) {
 478              		.loc 1 144 0
 479 0068 7A68     		ldr	r2, [r7, #4]
 480 006a BB68     		ldr	r3, [r7, #8]
 481 006c 1046     		mov	r0, r2
 482 006e 1946     		mov	r1, r3
 483 0070 FFF7FEFF 		bl	NVM_unlock
 484 0074 02E0     		b	.L46
 485              	.L42:
 145:../src/storage.c **** 
 146:../src/storage.c **** 			}
 147:../src/storage.c **** 		}
 148:../src/storage.c **** 		else {
 149:../src/storage.c **** 			nRet = status;
 486              		.loc 1 149 0
 487 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 488 0078 7B61     		str	r3, [r7, #20]
 150:../src/storage.c **** 			break;
 489              		.loc 1 150 0
 490 007a 05E0     		b	.L41
 491              	.L46:
 123:../src/storage.c **** 	{
 492              		.loc 1 123 0 discriminator 2
 493 007c 3B69     		ldr	r3, [r7, #16]
 494 007e 0133     		adds	r3, r3, #1
 495 0080 3B61     		str	r3, [r7, #16]
 496              	.L37:
 123:../src/storage.c **** 	{
 497              		.loc 1 123 0 is_stmt 0 discriminator 1
 498 0082 3B69     		ldr	r3, [r7, #16]
 499 0084 022B     		cmp	r3, #2
 500 0086 CCDD     		ble	.L44
 501              	.L41:
 151:../src/storage.c **** 		}
 152:../src/storage.c **** 	}
 153:../src/storage.c **** 	return nRet;
 502              		.loc 1 153 0 is_stmt 1
 503 0088 7B69     		ldr	r3, [r7, #20]
 154:../src/storage.c **** }
 504              		.loc 1 154 0
 505 008a 1846     		mov	r0, r3
 506 008c 1837     		adds	r7, r7, #24
 507              		.cfi_def_cfa_offset 8
 508 008e BD46     		mov	sp, r7
 509              		.cfi_def_cfa_register 13
 510              		@ sp needed
 511 0090 80BD     		pop	{r7, pc}
 512              	.L48:
 513 0092 00BF     		.align	2
 514              	.L47:
 515 0094 00F00360 		.word	1610870784
 516 0098 00000000 		.word	g_tStorageInfo
 517              		.cfi_endproc
 518              	.LFE106:
 520              		.section	.text.SaveStorageInfoALL_Param,"ax",%progbits
 521              		.align	2
 522              		.global	SaveStorageInfoALL_Param
 523              		.thumb
 524              		.thumb_func
 526              	SaveStorageInfoALL_Param:
 527              	.LFB107:
 155:../src/storage.c **** 
 156:../src/storage.c **** int SaveStorageInfoALL_Param(PSTORAGE_INFO_T pInfo)
 157:../src/storage.c **** {
 528              		.loc 1 157 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 32
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 88B0     		sub	sp, sp, #32
 537              		.cfi_def_cfa_offset 40
 538 0004 00AF     		add	r7, sp, #0
 539              		.cfi_def_cfa_register 7
 540 0006 7860     		str	r0, [r7, #4]
 158:../src/storage.c **** 	nvm_status_t status = NVM_SUCCESS;
 541              		.loc 1 158 0
 542 0008 0023     		movs	r3, #0
 543 000a FB75     		strb	r3, [r7, #23]
 159:../src/storage.c **** 	int nRet = NVM_SUCCESS, nRetry = 0, nSize = sizeof(STORAGE_INFO_T);
 544              		.loc 1 159 0
 545 000c 0023     		movs	r3, #0
 546 000e FB61     		str	r3, [r7, #28]
 547 0010 0023     		movs	r3, #0
 548 0012 BB61     		str	r3, [r7, #24]
 549 0014 4FF48073 		mov	r3, #256
 550 0018 3B61     		str	r3, [r7, #16]
 160:../src/storage.c **** 	volatile uint32_t address = ENVM_DATA_STORAGE_WRITE_BASE_ADDR;
 551              		.loc 1 160 0
 552 001a 1E4B     		ldr	r3, .L60
 553 001c FB60     		str	r3, [r7, #12]
 161:../src/storage.c **** 
 162:../src/storage.c **** 	for(nRetry = 0 ; nRetry < MAX_RETRY ; nRetry++)
 554              		.loc 1 162 0
 555 001e 0023     		movs	r3, #0
 556 0020 BB61     		str	r3, [r7, #24]
 557 0022 2FE0     		b	.L50
 558              	.L57:
 163:../src/storage.c **** 	{
 164:../src/storage.c **** 		status = NVM_write( address, (uint8_t *)pInfo, nSize, NVM_DO_NOT_LOCK_PAGE);
 559              		.loc 1 164 0
 560 0024 FA68     		ldr	r2, [r7, #12]
 561 0026 3B69     		ldr	r3, [r7, #16]
 562 0028 1046     		mov	r0, r2
 563 002a 7968     		ldr	r1, [r7, #4]
 564 002c 1A46     		mov	r2, r3
 565 002e 0023     		movs	r3, #0
 566 0030 FFF7FEFF 		bl	NVM_write
 567 0034 0346     		mov	r3, r0
 568 0036 FB75     		strb	r3, [r7, #23]
 165:../src/storage.c **** 		if(NVM_SUCCESS == status || NVM_WRITE_THRESHOLD_WARNING == status)
 569              		.loc 1 165 0
 570 0038 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 571 003a 002B     		cmp	r3, #0
 572 003c 02D0     		beq	.L51
 573              		.loc 1 165 0 is_stmt 0 discriminator 1
 574 003e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 575 0040 052B     		cmp	r3, #5
 576 0042 0FD1     		bne	.L52
 577              	.L51:
 166:../src/storage.c **** 		{
 167:../src/storage.c **** 			status = NVM_verify( address, (uint8_t *)pInfo, nSize );
 578              		.loc 1 167 0 is_stmt 1
 579 0044 FA68     		ldr	r2, [r7, #12]
 580 0046 3B69     		ldr	r3, [r7, #16]
 581 0048 1046     		mov	r0, r2
 582 004a 7968     		ldr	r1, [r7, #4]
 583 004c 1A46     		mov	r2, r3
 584 004e FFF7FEFF 		bl	NVM_verify
 585 0052 0346     		mov	r3, r0
 586 0054 FB75     		strb	r3, [r7, #23]
 168:../src/storage.c **** 			if(status != NVM_SUCCESS) {
 587              		.loc 1 168 0
 588 0056 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 589 0058 002B     		cmp	r3, #0
 590 005a 02D0     		beq	.L53
 169:../src/storage.c **** 				nRet = status;
 591              		.loc 1 169 0
 592 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 593 005e FB61     		str	r3, [r7, #28]
 170:../src/storage.c **** 			}
 171:../src/storage.c **** //			else {
 172:../src/storage.c **** //				address = ENVM_DATA_STORAGE_READ_BASE_ADDR;
 173:../src/storage.c **** //				status = MSS_NVM_read( (uint8_t *)address, (uint8_t *)&g_tStorageInfo, nSize);
 174:../src/storage.c **** //				if(NVM_SUCCESS != status)
 175:../src/storage.c **** //				{
 176:../src/storage.c **** //					nRet = status;
 177:../src/storage.c **** //				}
 178:../src/storage.c **** //			}
 179:../src/storage.c **** 			break;
 594              		.loc 1 179 0
 595 0060 13E0     		b	.L54
 596              	.L53:
 597 0062 12E0     		b	.L54
 598              	.L52:
 180:../src/storage.c **** 		}
 181:../src/storage.c **** 		else if(NVM_PAGE_LOCK_ERROR == status) {
 599              		.loc 1 181 0
 600 0064 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 601 0066 032B     		cmp	r3, #3
 602 0068 06D1     		bne	.L55
 182:../src/storage.c **** 			// 메모리 Unlock 후  writing 재시도  or send NAK
 183:../src/storage.c **** 			if( NVM_unlock(address, nSize) != NVM_SUCCESS ) {
 603              		.loc 1 183 0
 604 006a FA68     		ldr	r2, [r7, #12]
 605 006c 3B69     		ldr	r3, [r7, #16]
 606 006e 1046     		mov	r0, r2
 607 0070 1946     		mov	r1, r3
 608 0072 FFF7FEFF 		bl	NVM_unlock
 609 0076 02E0     		b	.L59
 610              	.L55:
 184:../src/storage.c **** 
 185:../src/storage.c **** 			}
 186:../src/storage.c **** 		}
 187:../src/storage.c **** 		else {
 188:../src/storage.c **** 			nRet = status;
 611              		.loc 1 188 0
 612 0078 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 613 007a FB61     		str	r3, [r7, #28]
 189:../src/storage.c **** 			break;
 614              		.loc 1 189 0
 615 007c 05E0     		b	.L54
 616              	.L59:
 162:../src/storage.c **** 	{
 617              		.loc 1 162 0 discriminator 2
 618 007e BB69     		ldr	r3, [r7, #24]
 619 0080 0133     		adds	r3, r3, #1
 620 0082 BB61     		str	r3, [r7, #24]
 621              	.L50:
 162:../src/storage.c **** 	{
 622              		.loc 1 162 0 is_stmt 0 discriminator 1
 623 0084 BB69     		ldr	r3, [r7, #24]
 624 0086 022B     		cmp	r3, #2
 625 0088 CCDD     		ble	.L57
 626              	.L54:
 190:../src/storage.c **** 		}
 191:../src/storage.c **** 	}
 192:../src/storage.c **** 	return nRet;
 627              		.loc 1 192 0 is_stmt 1
 628 008a FB69     		ldr	r3, [r7, #28]
 193:../src/storage.c **** }
 629              		.loc 1 193 0
 630 008c 1846     		mov	r0, r3
 631 008e 2037     		adds	r7, r7, #32
 632              		.cfi_def_cfa_offset 8
 633 0090 BD46     		mov	sp, r7
 634              		.cfi_def_cfa_register 13
 635              		@ sp needed
 636 0092 80BD     		pop	{r7, pc}
 637              	.L61:
 638              		.align	2
 639              	.L60:
 640 0094 00F00360 		.word	1610870784
 641              		.cfi_endproc
 642              	.LFE107:
 644              		.section	.text.GetBLVer,"ax",%progbits
 645              		.align	2
 646              		.global	GetBLVer
 647              		.thumb
 648              		.thumb_func
 650              	GetBLVer:
 651              	.LFB108:
 194:../src/storage.c **** 
 195:../src/storage.c **** // System Info
 196:../src/storage.c **** int GetBLVer()
 197:../src/storage.c **** {
 652              		.loc 1 197 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657 0000 80B4     		push	{r7}
 658              		.cfi_def_cfa_offset 4
 659              		.cfi_offset 7, -4
 660 0002 83B0     		sub	sp, sp, #12
 661              		.cfi_def_cfa_offset 16
 662 0004 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 198:../src/storage.c **** 	int nRet = 0;
 664              		.loc 1 198 0
 665 0006 0023     		movs	r3, #0
 666 0008 7B60     		str	r3, [r7, #4]
 199:../src/storage.c **** 	nRet = g_tStorageInfo.SystemInfo.BLVer;
 667              		.loc 1 199 0
 668 000a 054B     		ldr	r3, .L64
 669 000c 1B68     		ldr	r3, [r3]	@ unaligned
 670 000e 7B60     		str	r3, [r7, #4]
 200:../src/storage.c **** 	return nRet;
 671              		.loc 1 200 0
 672 0010 7B68     		ldr	r3, [r7, #4]
 201:../src/storage.c **** }
 673              		.loc 1 201 0
 674 0012 1846     		mov	r0, r3
 675 0014 0C37     		adds	r7, r7, #12
 676              		.cfi_def_cfa_offset 4
 677 0016 BD46     		mov	sp, r7
 678              		.cfi_def_cfa_register 13
 679              		@ sp needed
 680 0018 5DF8047B 		ldr	r7, [sp], #4
 681              		.cfi_restore 7
 682              		.cfi_def_cfa_offset 0
 683 001c 7047     		bx	lr
 684              	.L65:
 685 001e 00BF     		.align	2
 686              	.L64:
 687 0020 00000000 		.word	g_tStorageInfo
 688              		.cfi_endproc
 689              	.LFE108:
 691              		.section	.text.SetBLVer,"ax",%progbits
 692              		.align	2
 693              		.global	SetBLVer
 694              		.thumb
 695              		.thumb_func
 697              	SetBLVer:
 698              	.LFB109:
 202:../src/storage.c **** 
 203:../src/storage.c **** void SetBLVer(int value)
 204:../src/storage.c **** {
 699              		.loc 1 204 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704 0000 80B4     		push	{r7}
 705              		.cfi_def_cfa_offset 4
 706              		.cfi_offset 7, -4
 707 0002 83B0     		sub	sp, sp, #12
 708              		.cfi_def_cfa_offset 16
 709 0004 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
 711 0006 7860     		str	r0, [r7, #4]
 205:../src/storage.c **** 	g_tStorageInfo.SystemInfo.BLVer = value;
 712              		.loc 1 205 0
 713 0008 7B68     		ldr	r3, [r7, #4]
 714 000a 034A     		ldr	r2, .L67
 715 000c 1360     		str	r3, [r2]	@ unaligned
 206:../src/storage.c **** }
 716              		.loc 1 206 0
 717 000e 0C37     		adds	r7, r7, #12
 718              		.cfi_def_cfa_offset 4
 719 0010 BD46     		mov	sp, r7
 720              		.cfi_def_cfa_register 13
 721              		@ sp needed
 722 0012 5DF8047B 		ldr	r7, [sp], #4
 723              		.cfi_restore 7
 724              		.cfi_def_cfa_offset 0
 725 0016 7047     		bx	lr
 726              	.L68:
 727              		.align	2
 728              	.L67:
 729 0018 00000000 		.word	g_tStorageInfo
 730              		.cfi_endproc
 731              	.LFE109:
 733              		.section	.text.GetIAPVer,"ax",%progbits
 734              		.align	2
 735              		.global	GetIAPVer
 736              		.thumb
 737              		.thumb_func
 739              	GetIAPVer:
 740              	.LFB110:
 207:../src/storage.c **** 
 208:../src/storage.c **** int GetIAPVer()
 209:../src/storage.c **** {
 741              		.loc 1 209 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 8
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 0000 80B4     		push	{r7}
 747              		.cfi_def_cfa_offset 4
 748              		.cfi_offset 7, -4
 749 0002 83B0     		sub	sp, sp, #12
 750              		.cfi_def_cfa_offset 16
 751 0004 00AF     		add	r7, sp, #0
 752              		.cfi_def_cfa_register 7
 210:../src/storage.c **** 	int nRet = 0;
 753              		.loc 1 210 0
 754 0006 0023     		movs	r3, #0
 755 0008 7B60     		str	r3, [r7, #4]
 211:../src/storage.c **** 	nRet = g_tStorageInfo.SystemInfo.IAPVer;
 756              		.loc 1 211 0
 757 000a 054B     		ldr	r3, .L71
 758 000c 5B68     		ldr	r3, [r3, #4]	@ unaligned
 759 000e 7B60     		str	r3, [r7, #4]
 212:../src/storage.c **** 	return nRet;
 760              		.loc 1 212 0
 761 0010 7B68     		ldr	r3, [r7, #4]
 213:../src/storage.c **** }
 762              		.loc 1 213 0
 763 0012 1846     		mov	r0, r3
 764 0014 0C37     		adds	r7, r7, #12
 765              		.cfi_def_cfa_offset 4
 766 0016 BD46     		mov	sp, r7
 767              		.cfi_def_cfa_register 13
 768              		@ sp needed
 769 0018 5DF8047B 		ldr	r7, [sp], #4
 770              		.cfi_restore 7
 771              		.cfi_def_cfa_offset 0
 772 001c 7047     		bx	lr
 773              	.L72:
 774 001e 00BF     		.align	2
 775              	.L71:
 776 0020 00000000 		.word	g_tStorageInfo
 777              		.cfi_endproc
 778              	.LFE110:
 780              		.section	.text.SetIAPVer,"ax",%progbits
 781              		.align	2
 782              		.global	SetIAPVer
 783              		.thumb
 784              		.thumb_func
 786              	SetIAPVer:
 787              	.LFB111:
 214:../src/storage.c **** 
 215:../src/storage.c **** void SetIAPVer(int value)
 216:../src/storage.c **** {
 788              		.loc 1 216 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 8
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793 0000 80B4     		push	{r7}
 794              		.cfi_def_cfa_offset 4
 795              		.cfi_offset 7, -4
 796 0002 83B0     		sub	sp, sp, #12
 797              		.cfi_def_cfa_offset 16
 798 0004 00AF     		add	r7, sp, #0
 799              		.cfi_def_cfa_register 7
 800 0006 7860     		str	r0, [r7, #4]
 217:../src/storage.c **** 	g_tStorageInfo.SystemInfo.IAPVer = value;
 801              		.loc 1 217 0
 802 0008 7B68     		ldr	r3, [r7, #4]
 803 000a 034A     		ldr	r2, .L74
 804 000c 5360     		str	r3, [r2, #4]	@ unaligned
 218:../src/storage.c **** }
 805              		.loc 1 218 0
 806 000e 0C37     		adds	r7, r7, #12
 807              		.cfi_def_cfa_offset 4
 808 0010 BD46     		mov	sp, r7
 809              		.cfi_def_cfa_register 13
 810              		@ sp needed
 811 0012 5DF8047B 		ldr	r7, [sp], #4
 812              		.cfi_restore 7
 813              		.cfi_def_cfa_offset 0
 814 0016 7047     		bx	lr
 815              	.L75:
 816              		.align	2
 817              	.L74:
 818 0018 00000000 		.word	g_tStorageInfo
 819              		.cfi_endproc
 820              	.LFE111:
 822              		.section	.text.GetAPPVer,"ax",%progbits
 823              		.align	2
 824              		.global	GetAPPVer
 825              		.thumb
 826              		.thumb_func
 828              	GetAPPVer:
 829              	.LFB112:
 219:../src/storage.c **** 
 220:../src/storage.c **** int GetAPPVer()
 221:../src/storage.c **** {
 830              		.loc 1 221 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 8
 833              		@ frame_needed = 1, uses_anonymous_args = 0
 834              		@ link register save eliminated.
 835 0000 80B4     		push	{r7}
 836              		.cfi_def_cfa_offset 4
 837              		.cfi_offset 7, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 16
 840 0004 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 222:../src/storage.c **** 	int nRet = 0;
 842              		.loc 1 222 0
 843 0006 0023     		movs	r3, #0
 844 0008 7B60     		str	r3, [r7, #4]
 223:../src/storage.c **** 	nRet = g_tStorageInfo.SystemInfo.APPVer;
 845              		.loc 1 223 0
 846 000a 054B     		ldr	r3, .L78
 847 000c 9B68     		ldr	r3, [r3, #8]	@ unaligned
 848 000e 7B60     		str	r3, [r7, #4]
 224:../src/storage.c **** 	return nRet;
 849              		.loc 1 224 0
 850 0010 7B68     		ldr	r3, [r7, #4]
 225:../src/storage.c **** }
 851              		.loc 1 225 0
 852 0012 1846     		mov	r0, r3
 853 0014 0C37     		adds	r7, r7, #12
 854              		.cfi_def_cfa_offset 4
 855 0016 BD46     		mov	sp, r7
 856              		.cfi_def_cfa_register 13
 857              		@ sp needed
 858 0018 5DF8047B 		ldr	r7, [sp], #4
 859              		.cfi_restore 7
 860              		.cfi_def_cfa_offset 0
 861 001c 7047     		bx	lr
 862              	.L79:
 863 001e 00BF     		.align	2
 864              	.L78:
 865 0020 00000000 		.word	g_tStorageInfo
 866              		.cfi_endproc
 867              	.LFE112:
 869              		.section	.text.SetAPPVer,"ax",%progbits
 870              		.align	2
 871              		.global	SetAPPVer
 872              		.thumb
 873              		.thumb_func
 875              	SetAPPVer:
 876              	.LFB113:
 226:../src/storage.c **** 
 227:../src/storage.c **** void SetAPPVer(int value)
 228:../src/storage.c **** {
 877              		.loc 1 228 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 8
 880              		@ frame_needed = 1, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882 0000 80B4     		push	{r7}
 883              		.cfi_def_cfa_offset 4
 884              		.cfi_offset 7, -4
 885 0002 83B0     		sub	sp, sp, #12
 886              		.cfi_def_cfa_offset 16
 887 0004 00AF     		add	r7, sp, #0
 888              		.cfi_def_cfa_register 7
 889 0006 7860     		str	r0, [r7, #4]
 229:../src/storage.c **** 	g_tStorageInfo.SystemInfo.APPVer = value;
 890              		.loc 1 229 0
 891 0008 7B68     		ldr	r3, [r7, #4]
 892 000a 034A     		ldr	r2, .L81
 893 000c 9360     		str	r3, [r2, #8]	@ unaligned
 230:../src/storage.c **** }
 894              		.loc 1 230 0
 895 000e 0C37     		adds	r7, r7, #12
 896              		.cfi_def_cfa_offset 4
 897 0010 BD46     		mov	sp, r7
 898              		.cfi_def_cfa_register 13
 899              		@ sp needed
 900 0012 5DF8047B 		ldr	r7, [sp], #4
 901              		.cfi_restore 7
 902              		.cfi_def_cfa_offset 0
 903 0016 7047     		bx	lr
 904              	.L82:
 905              		.align	2
 906              	.L81:
 907 0018 00000000 		.word	g_tStorageInfo
 908              		.cfi_endproc
 909              	.LFE113:
 911              		.section	.text.GetFPGAVer,"ax",%progbits
 912              		.align	2
 913              		.global	GetFPGAVer
 914              		.thumb
 915              		.thumb_func
 917              	GetFPGAVer:
 918              	.LFB114:
 231:../src/storage.c **** 
 232:../src/storage.c **** int GetFPGAVer()
 233:../src/storage.c **** {
 919              		.loc 1 233 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 8
 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923              		@ link register save eliminated.
 924 0000 80B4     		push	{r7}
 925              		.cfi_def_cfa_offset 4
 926              		.cfi_offset 7, -4
 927 0002 83B0     		sub	sp, sp, #12
 928              		.cfi_def_cfa_offset 16
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 234:../src/storage.c **** 	int nRet = 0;
 931              		.loc 1 234 0
 932 0006 0023     		movs	r3, #0
 933 0008 7B60     		str	r3, [r7, #4]
 235:../src/storage.c **** 	nRet = g_tStorageInfo.SystemInfo.FPGAVer;
 934              		.loc 1 235 0
 935 000a 054B     		ldr	r3, .L85
 936 000c DB68     		ldr	r3, [r3, #12]	@ unaligned
 937 000e 7B60     		str	r3, [r7, #4]
 236:../src/storage.c **** 	return nRet;
 938              		.loc 1 236 0
 939 0010 7B68     		ldr	r3, [r7, #4]
 237:../src/storage.c **** }
 940              		.loc 1 237 0
 941 0012 1846     		mov	r0, r3
 942 0014 0C37     		adds	r7, r7, #12
 943              		.cfi_def_cfa_offset 4
 944 0016 BD46     		mov	sp, r7
 945              		.cfi_def_cfa_register 13
 946              		@ sp needed
 947 0018 5DF8047B 		ldr	r7, [sp], #4
 948              		.cfi_restore 7
 949              		.cfi_def_cfa_offset 0
 950 001c 7047     		bx	lr
 951              	.L86:
 952 001e 00BF     		.align	2
 953              	.L85:
 954 0020 00000000 		.word	g_tStorageInfo
 955              		.cfi_endproc
 956              	.LFE114:
 958              		.section	.text.SetFPGAVer,"ax",%progbits
 959              		.align	2
 960              		.global	SetFPGAVer
 961              		.thumb
 962              		.thumb_func
 964              	SetFPGAVer:
 965              	.LFB115:
 238:../src/storage.c **** 
 239:../src/storage.c **** void SetFPGAVer(int value)
 240:../src/storage.c **** {
 966              		.loc 1 240 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 8
 969              		@ frame_needed = 1, uses_anonymous_args = 0
 970              		@ link register save eliminated.
 971 0000 80B4     		push	{r7}
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 83B0     		sub	sp, sp, #12
 975              		.cfi_def_cfa_offset 16
 976 0004 00AF     		add	r7, sp, #0
 977              		.cfi_def_cfa_register 7
 978 0006 7860     		str	r0, [r7, #4]
 241:../src/storage.c **** 	g_tStorageInfo.SystemInfo.FPGAVer = value;
 979              		.loc 1 241 0
 980 0008 7B68     		ldr	r3, [r7, #4]
 981 000a 034A     		ldr	r2, .L88
 982 000c D360     		str	r3, [r2, #12]	@ unaligned
 242:../src/storage.c **** }
 983              		.loc 1 242 0
 984 000e 0C37     		adds	r7, r7, #12
 985              		.cfi_def_cfa_offset 4
 986 0010 BD46     		mov	sp, r7
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0012 5DF8047B 		ldr	r7, [sp], #4
 990              		.cfi_restore 7
 991              		.cfi_def_cfa_offset 0
 992 0016 7047     		bx	lr
 993              	.L89:
 994              		.align	2
 995              	.L88:
 996 0018 00000000 		.word	g_tStorageInfo
 997              		.cfi_endproc
 998              	.LFE115:
 1000              		.section	.text.GetSerialNo,"ax",%progbits
 1001              		.align	2
 1002              		.global	GetSerialNo
 1003              		.thumb
 1004              		.thumb_func
 1006              	GetSerialNo:
 1007              	.LFB116:
 243:../src/storage.c **** 
 244:../src/storage.c **** int GetSerialNo(unsigned char *pBuffer)
 245:../src/storage.c **** {
 1008              		.loc 1 245 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 16
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012 0000 80B5     		push	{r7, lr}
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 84B0     		sub	sp, sp, #16
 1017              		.cfi_def_cfa_offset 24
 1018 0004 00AF     		add	r7, sp, #0
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
 246:../src/storage.c **** 	int nRet = 0;
 1021              		.loc 1 246 0
 1022 0008 0023     		movs	r3, #0
 1023 000a FB60     		str	r3, [r7, #12]
 247:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.SystemInfo.SerialNo);
 1024              		.loc 1 247 0
 1025 000c 2023     		movs	r3, #32
 1026 000e FB60     		str	r3, [r7, #12]
 248:../src/storage.c **** 	memcpy(pBuffer, g_tStorageInfo.SystemInfo.SerialNo, nRet);
 1027              		.loc 1 248 0
 1028 0010 FB68     		ldr	r3, [r7, #12]
 1029 0012 7868     		ldr	r0, [r7, #4]
 1030 0014 0449     		ldr	r1, .L92
 1031 0016 1A46     		mov	r2, r3
 1032 0018 FFF7FEFF 		bl	memcpy
 249:../src/storage.c **** 
 250:../src/storage.c **** 	return nRet;
 1033              		.loc 1 250 0
 1034 001c FB68     		ldr	r3, [r7, #12]
 251:../src/storage.c **** }
 1035              		.loc 1 251 0
 1036 001e 1846     		mov	r0, r3
 1037 0020 1037     		adds	r7, r7, #16
 1038              		.cfi_def_cfa_offset 8
 1039 0022 BD46     		mov	sp, r7
 1040              		.cfi_def_cfa_register 13
 1041              		@ sp needed
 1042 0024 80BD     		pop	{r7, pc}
 1043              	.L93:
 1044 0026 00BF     		.align	2
 1045              	.L92:
 1046 0028 10000000 		.word	g_tStorageInfo+16
 1047              		.cfi_endproc
 1048              	.LFE116:
 1050              		.section	.text.SetSerialNo,"ax",%progbits
 1051              		.align	2
 1052              		.global	SetSerialNo
 1053              		.thumb
 1054              		.thumb_func
 1056              	SetSerialNo:
 1057              	.LFB117:
 252:../src/storage.c **** 
 253:../src/storage.c **** void SetSerialNo(unsigned char *pBuffer, int size)
 254:../src/storage.c **** {
 1058              		.loc 1 254 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 8
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062 0000 80B5     		push	{r7, lr}
 1063              		.cfi_def_cfa_offset 8
 1064              		.cfi_offset 7, -8
 1065              		.cfi_offset 14, -4
 1066 0002 82B0     		sub	sp, sp, #8
 1067              		.cfi_def_cfa_offset 16
 1068 0004 00AF     		add	r7, sp, #0
 1069              		.cfi_def_cfa_register 7
 1070 0006 7860     		str	r0, [r7, #4]
 1071 0008 3960     		str	r1, [r7]
 255:../src/storage.c **** 	memcpy(g_tStorageInfo.SystemInfo.SerialNo, pBuffer, size);
 1072              		.loc 1 255 0
 1073 000a 3B68     		ldr	r3, [r7]
 1074 000c 0348     		ldr	r0, .L95
 1075 000e 7968     		ldr	r1, [r7, #4]
 1076 0010 1A46     		mov	r2, r3
 1077 0012 FFF7FEFF 		bl	memcpy
 256:../src/storage.c **** }
 1078              		.loc 1 256 0
 1079 0016 0837     		adds	r7, r7, #8
 1080              		.cfi_def_cfa_offset 8
 1081 0018 BD46     		mov	sp, r7
 1082              		.cfi_def_cfa_register 13
 1083              		@ sp needed
 1084 001a 80BD     		pop	{r7, pc}
 1085              	.L96:
 1086              		.align	2
 1087              	.L95:
 1088 001c 10000000 		.word	g_tStorageInfo+16
 1089              		.cfi_endproc
 1090              	.LFE117:
 1092              		.section	.text.GetIPAddress,"ax",%progbits
 1093              		.align	2
 1094              		.global	GetIPAddress
 1095              		.thumb
 1096              		.thumb_func
 1098              	GetIPAddress:
 1099              	.LFB118:
 257:../src/storage.c **** 
 258:../src/storage.c **** int GetIPAddress(unsigned char *pBuffer)
 259:../src/storage.c **** {
 1100              		.loc 1 259 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 16
 1103              		@ frame_needed = 1, uses_anonymous_args = 0
 1104 0000 80B5     		push	{r7, lr}
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 7, -8
 1107              		.cfi_offset 14, -4
 1108 0002 84B0     		sub	sp, sp, #16
 1109              		.cfi_def_cfa_offset 24
 1110 0004 00AF     		add	r7, sp, #0
 1111              		.cfi_def_cfa_register 7
 1112 0006 7860     		str	r0, [r7, #4]
 260:../src/storage.c **** 	int nRet = 0;
 1113              		.loc 1 260 0
 1114 0008 0023     		movs	r3, #0
 1115 000a FB60     		str	r3, [r7, #12]
 261:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.SystemInfo.IPAddress);
 1116              		.loc 1 261 0
 1117 000c 0423     		movs	r3, #4
 1118 000e FB60     		str	r3, [r7, #12]
 262:../src/storage.c **** 	memcpy(pBuffer, g_tStorageInfo.SystemInfo.IPAddress, nRet);
 1119              		.loc 1 262 0
 1120 0010 FB68     		ldr	r3, [r7, #12]
 1121 0012 7868     		ldr	r0, [r7, #4]
 1122 0014 0449     		ldr	r1, .L99
 1123 0016 1A46     		mov	r2, r3
 1124 0018 FFF7FEFF 		bl	memcpy
 263:../src/storage.c **** 	return nRet;
 1125              		.loc 1 263 0
 1126 001c FB68     		ldr	r3, [r7, #12]
 264:../src/storage.c **** }
 1127              		.loc 1 264 0
 1128 001e 1846     		mov	r0, r3
 1129 0020 1037     		adds	r7, r7, #16
 1130              		.cfi_def_cfa_offset 8
 1131 0022 BD46     		mov	sp, r7
 1132              		.cfi_def_cfa_register 13
 1133              		@ sp needed
 1134 0024 80BD     		pop	{r7, pc}
 1135              	.L100:
 1136 0026 00BF     		.align	2
 1137              	.L99:
 1138 0028 30000000 		.word	g_tStorageInfo+48
 1139              		.cfi_endproc
 1140              	.LFE118:
 1142              		.section	.text.SetIPAddress,"ax",%progbits
 1143              		.align	2
 1144              		.global	SetIPAddress
 1145              		.thumb
 1146              		.thumb_func
 1148              	SetIPAddress:
 1149              	.LFB119:
 265:../src/storage.c **** 
 266:../src/storage.c **** void SetIPAddress(unsigned char *pBuffer, int size)
 267:../src/storage.c **** {
 1150              		.loc 1 267 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154 0000 80B5     		push	{r7, lr}
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 82B0     		sub	sp, sp, #8
 1159              		.cfi_def_cfa_offset 16
 1160 0004 00AF     		add	r7, sp, #0
 1161              		.cfi_def_cfa_register 7
 1162 0006 7860     		str	r0, [r7, #4]
 1163 0008 3960     		str	r1, [r7]
 268:../src/storage.c **** 	memcpy(g_tStorageInfo.SystemInfo.IPAddress, pBuffer, size);
 1164              		.loc 1 268 0
 1165 000a 3B68     		ldr	r3, [r7]
 1166 000c 0348     		ldr	r0, .L102
 1167 000e 7968     		ldr	r1, [r7, #4]
 1168 0010 1A46     		mov	r2, r3
 1169 0012 FFF7FEFF 		bl	memcpy
 269:../src/storage.c **** }
 1170              		.loc 1 269 0
 1171 0016 0837     		adds	r7, r7, #8
 1172              		.cfi_def_cfa_offset 8
 1173 0018 BD46     		mov	sp, r7
 1174              		.cfi_def_cfa_register 13
 1175              		@ sp needed
 1176 001a 80BD     		pop	{r7, pc}
 1177              	.L103:
 1178              		.align	2
 1179              	.L102:
 1180 001c 30000000 		.word	g_tStorageInfo+48
 1181              		.cfi_endproc
 1182              	.LFE119:
 1184              		.section	.text.GetGateway,"ax",%progbits
 1185              		.align	2
 1186              		.global	GetGateway
 1187              		.thumb
 1188              		.thumb_func
 1190              	GetGateway:
 1191              	.LFB120:
 270:../src/storage.c **** 
 271:../src/storage.c **** int GetGateway(unsigned char *pBuffer)
 272:../src/storage.c **** {
 1192              		.loc 1 272 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 16
 1195              		@ frame_needed = 1, uses_anonymous_args = 0
 1196 0000 80B5     		push	{r7, lr}
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0002 84B0     		sub	sp, sp, #16
 1201              		.cfi_def_cfa_offset 24
 1202 0004 00AF     		add	r7, sp, #0
 1203              		.cfi_def_cfa_register 7
 1204 0006 7860     		str	r0, [r7, #4]
 273:../src/storage.c **** 	int nRet = 0;
 1205              		.loc 1 273 0
 1206 0008 0023     		movs	r3, #0
 1207 000a FB60     		str	r3, [r7, #12]
 274:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.SystemInfo.Gateway);
 1208              		.loc 1 274 0
 1209 000c 0423     		movs	r3, #4
 1210 000e FB60     		str	r3, [r7, #12]
 275:../src/storage.c **** 	memcpy(pBuffer, g_tStorageInfo.SystemInfo.Gateway, nRet);
 1211              		.loc 1 275 0
 1212 0010 FB68     		ldr	r3, [r7, #12]
 1213 0012 7868     		ldr	r0, [r7, #4]
 1214 0014 0449     		ldr	r1, .L106
 1215 0016 1A46     		mov	r2, r3
 1216 0018 FFF7FEFF 		bl	memcpy
 276:../src/storage.c **** 	return nRet;
 1217              		.loc 1 276 0
 1218 001c FB68     		ldr	r3, [r7, #12]
 277:../src/storage.c **** }
 1219              		.loc 1 277 0
 1220 001e 1846     		mov	r0, r3
 1221 0020 1037     		adds	r7, r7, #16
 1222              		.cfi_def_cfa_offset 8
 1223 0022 BD46     		mov	sp, r7
 1224              		.cfi_def_cfa_register 13
 1225              		@ sp needed
 1226 0024 80BD     		pop	{r7, pc}
 1227              	.L107:
 1228 0026 00BF     		.align	2
 1229              	.L106:
 1230 0028 34000000 		.word	g_tStorageInfo+52
 1231              		.cfi_endproc
 1232              	.LFE120:
 1234              		.section	.text.SetGateway,"ax",%progbits
 1235              		.align	2
 1236              		.global	SetGateway
 1237              		.thumb
 1238              		.thumb_func
 1240              	SetGateway:
 1241              	.LFB121:
 278:../src/storage.c **** 
 279:../src/storage.c **** void SetGateway(unsigned char *pBuffer, int size)
 280:../src/storage.c **** {
 1242              		.loc 1 280 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 8
 1245              		@ frame_needed = 1, uses_anonymous_args = 0
 1246 0000 80B5     		push	{r7, lr}
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 7, -8
 1249              		.cfi_offset 14, -4
 1250 0002 82B0     		sub	sp, sp, #8
 1251              		.cfi_def_cfa_offset 16
 1252 0004 00AF     		add	r7, sp, #0
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
 1255 0008 3960     		str	r1, [r7]
 281:../src/storage.c **** 	memcpy(g_tStorageInfo.SystemInfo.Gateway, pBuffer, size);
 1256              		.loc 1 281 0
 1257 000a 3B68     		ldr	r3, [r7]
 1258 000c 0348     		ldr	r0, .L109
 1259 000e 7968     		ldr	r1, [r7, #4]
 1260 0010 1A46     		mov	r2, r3
 1261 0012 FFF7FEFF 		bl	memcpy
 282:../src/storage.c **** }
 1262              		.loc 1 282 0
 1263 0016 0837     		adds	r7, r7, #8
 1264              		.cfi_def_cfa_offset 8
 1265 0018 BD46     		mov	sp, r7
 1266              		.cfi_def_cfa_register 13
 1267              		@ sp needed
 1268 001a 80BD     		pop	{r7, pc}
 1269              	.L110:
 1270              		.align	2
 1271              	.L109:
 1272 001c 34000000 		.word	g_tStorageInfo+52
 1273              		.cfi_endproc
 1274              	.LFE121:
 1276              		.section	.text.GetMacAddress,"ax",%progbits
 1277              		.align	2
 1278              		.global	GetMacAddress
 1279              		.thumb
 1280              		.thumb_func
 1282              	GetMacAddress:
 1283              	.LFB122:
 283:../src/storage.c **** 
 284:../src/storage.c **** int GetMacAddress(unsigned char *pBuffer)
 285:../src/storage.c **** {
 1284              		.loc 1 285 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 16
 1287              		@ frame_needed = 1, uses_anonymous_args = 0
 1288 0000 80B5     		push	{r7, lr}
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 7, -8
 1291              		.cfi_offset 14, -4
 1292 0002 84B0     		sub	sp, sp, #16
 1293              		.cfi_def_cfa_offset 24
 1294 0004 00AF     		add	r7, sp, #0
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]
 286:../src/storage.c **** 	int nRet = 0;
 1297              		.loc 1 286 0
 1298 0008 0023     		movs	r3, #0
 1299 000a FB60     		str	r3, [r7, #12]
 287:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.SystemInfo.MacAddress);
 1300              		.loc 1 287 0
 1301 000c 0623     		movs	r3, #6
 1302 000e FB60     		str	r3, [r7, #12]
 288:../src/storage.c **** 	memcpy(pBuffer, g_tStorageInfo.SystemInfo.MacAddress, nRet);
 1303              		.loc 1 288 0
 1304 0010 FB68     		ldr	r3, [r7, #12]
 1305 0012 7868     		ldr	r0, [r7, #4]
 1306 0014 0449     		ldr	r1, .L113
 1307 0016 1A46     		mov	r2, r3
 1308 0018 FFF7FEFF 		bl	memcpy
 289:../src/storage.c **** 	return nRet;
 1309              		.loc 1 289 0
 1310 001c FB68     		ldr	r3, [r7, #12]
 290:../src/storage.c **** }
 1311              		.loc 1 290 0
 1312 001e 1846     		mov	r0, r3
 1313 0020 1037     		adds	r7, r7, #16
 1314              		.cfi_def_cfa_offset 8
 1315 0022 BD46     		mov	sp, r7
 1316              		.cfi_def_cfa_register 13
 1317              		@ sp needed
 1318 0024 80BD     		pop	{r7, pc}
 1319              	.L114:
 1320 0026 00BF     		.align	2
 1321              	.L113:
 1322 0028 38000000 		.word	g_tStorageInfo+56
 1323              		.cfi_endproc
 1324              	.LFE122:
 1326              		.section	.text.SetMacAddress,"ax",%progbits
 1327              		.align	2
 1328              		.global	SetMacAddress
 1329              		.thumb
 1330              		.thumb_func
 1332              	SetMacAddress:
 1333              	.LFB123:
 291:../src/storage.c **** 
 292:../src/storage.c **** void SetMacAddress(unsigned char *pBuffer, int size)
 293:../src/storage.c **** {
 1334              		.loc 1 293 0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 8
 1337              		@ frame_needed = 1, uses_anonymous_args = 0
 1338 0000 80B5     		push	{r7, lr}
 1339              		.cfi_def_cfa_offset 8
 1340              		.cfi_offset 7, -8
 1341              		.cfi_offset 14, -4
 1342 0002 82B0     		sub	sp, sp, #8
 1343              		.cfi_def_cfa_offset 16
 1344 0004 00AF     		add	r7, sp, #0
 1345              		.cfi_def_cfa_register 7
 1346 0006 7860     		str	r0, [r7, #4]
 1347 0008 3960     		str	r1, [r7]
 294:../src/storage.c **** 	memcpy(g_tStorageInfo.SystemInfo.MacAddress, pBuffer, size);
 1348              		.loc 1 294 0
 1349 000a 3B68     		ldr	r3, [r7]
 1350 000c 0348     		ldr	r0, .L116
 1351 000e 7968     		ldr	r1, [r7, #4]
 1352 0010 1A46     		mov	r2, r3
 1353 0012 FFF7FEFF 		bl	memcpy
 295:../src/storage.c **** }
 1354              		.loc 1 295 0
 1355 0016 0837     		adds	r7, r7, #8
 1356              		.cfi_def_cfa_offset 8
 1357 0018 BD46     		mov	sp, r7
 1358              		.cfi_def_cfa_register 13
 1359              		@ sp needed
 1360 001a 80BD     		pop	{r7, pc}
 1361              	.L117:
 1362              		.align	2
 1363              	.L116:
 1364 001c 38000000 		.word	g_tStorageInfo+56
 1365              		.cfi_endproc
 1366              	.LFE123:
 1368              		.section	.text.GetModelName,"ax",%progbits
 1369              		.align	2
 1370              		.global	GetModelName
 1371              		.thumb
 1372              		.thumb_func
 1374              	GetModelName:
 1375              	.LFB124:
 296:../src/storage.c **** 
 297:../src/storage.c **** int GetModelName(unsigned char *pBuffer)
 298:../src/storage.c **** {
 1376              		.loc 1 298 0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 16
 1379              		@ frame_needed = 1, uses_anonymous_args = 0
 1380 0000 80B5     		push	{r7, lr}
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 7, -8
 1383              		.cfi_offset 14, -4
 1384 0002 84B0     		sub	sp, sp, #16
 1385              		.cfi_def_cfa_offset 24
 1386 0004 00AF     		add	r7, sp, #0
 1387              		.cfi_def_cfa_register 7
 1388 0006 7860     		str	r0, [r7, #4]
 299:../src/storage.c **** 	int nRet = 0;
 1389              		.loc 1 299 0
 1390 0008 0023     		movs	r3, #0
 1391 000a FB60     		str	r3, [r7, #12]
 300:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.SystemInfo.Model);
 1392              		.loc 1 300 0
 1393 000c 2023     		movs	r3, #32
 1394 000e FB60     		str	r3, [r7, #12]
 301:../src/storage.c **** 	memcpy(pBuffer, g_tStorageInfo.SystemInfo.Model, nRet);
 1395              		.loc 1 301 0
 1396 0010 FB68     		ldr	r3, [r7, #12]
 1397 0012 7868     		ldr	r0, [r7, #4]
 1398 0014 0449     		ldr	r1, .L120
 1399 0016 1A46     		mov	r2, r3
 1400 0018 FFF7FEFF 		bl	memcpy
 302:../src/storage.c **** 
 303:../src/storage.c **** 	return nRet;
 1401              		.loc 1 303 0
 1402 001c FB68     		ldr	r3, [r7, #12]
 304:../src/storage.c **** }
 1403              		.loc 1 304 0
 1404 001e 1846     		mov	r0, r3
 1405 0020 1037     		adds	r7, r7, #16
 1406              		.cfi_def_cfa_offset 8
 1407 0022 BD46     		mov	sp, r7
 1408              		.cfi_def_cfa_register 13
 1409              		@ sp needed
 1410 0024 80BD     		pop	{r7, pc}
 1411              	.L121:
 1412 0026 00BF     		.align	2
 1413              	.L120:
 1414 0028 3E000000 		.word	g_tStorageInfo+62
 1415              		.cfi_endproc
 1416              	.LFE124:
 1418              		.section	.text.SetModelName,"ax",%progbits
 1419              		.align	2
 1420              		.global	SetModelName
 1421              		.thumb
 1422              		.thumb_func
 1424              	SetModelName:
 1425              	.LFB125:
 305:../src/storage.c **** 
 306:../src/storage.c **** void SetModelName(unsigned char *pBuffer, int size)
 307:../src/storage.c **** {
 1426              		.loc 1 307 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 8
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430 0000 80B5     		push	{r7, lr}
 1431              		.cfi_def_cfa_offset 8
 1432              		.cfi_offset 7, -8
 1433              		.cfi_offset 14, -4
 1434 0002 82B0     		sub	sp, sp, #8
 1435              		.cfi_def_cfa_offset 16
 1436 0004 00AF     		add	r7, sp, #0
 1437              		.cfi_def_cfa_register 7
 1438 0006 7860     		str	r0, [r7, #4]
 1439 0008 3960     		str	r1, [r7]
 308:../src/storage.c **** 	memcpy(g_tStorageInfo.SystemInfo.Model, pBuffer, size);
 1440              		.loc 1 308 0
 1441 000a 3B68     		ldr	r3, [r7]
 1442 000c 0348     		ldr	r0, .L123
 1443 000e 7968     		ldr	r1, [r7, #4]
 1444 0010 1A46     		mov	r2, r3
 1445 0012 FFF7FEFF 		bl	memcpy
 309:../src/storage.c **** }
 1446              		.loc 1 309 0
 1447 0016 0837     		adds	r7, r7, #8
 1448              		.cfi_def_cfa_offset 8
 1449 0018 BD46     		mov	sp, r7
 1450              		.cfi_def_cfa_register 13
 1451              		@ sp needed
 1452 001a 80BD     		pop	{r7, pc}
 1453              	.L124:
 1454              		.align	2
 1455              	.L123:
 1456 001c 3E000000 		.word	g_tStorageInfo+62
 1457              		.cfi_endproc
 1458              	.LFE125:
 1460              		.section	.text.GetD2LampTime,"ax",%progbits
 1461              		.align	2
 1462              		.global	GetD2LampTime
 1463              		.thumb
 1464              		.thumb_func
 1466              	GetD2LampTime:
 1467              	.LFB126:
 310:../src/storage.c **** 
 311:../src/storage.c **** // Lamp 사용시간 저장
 312:../src/storage.c **** int GetD2LampTime()
 313:../src/storage.c **** {
 1468              		.loc 1 313 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 8
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472              		@ link register save eliminated.
 1473 0000 80B4     		push	{r7}
 1474              		.cfi_def_cfa_offset 4
 1475              		.cfi_offset 7, -4
 1476 0002 83B0     		sub	sp, sp, #12
 1477              		.cfi_def_cfa_offset 16
 1478 0004 00AF     		add	r7, sp, #0
 1479              		.cfi_def_cfa_register 7
 314:../src/storage.c **** 	int nRet = 0;
 1480              		.loc 1 314 0
 1481 0006 0023     		movs	r3, #0
 1482 0008 7B60     		str	r3, [r7, #4]
 315:../src/storage.c **** 	nRet = g_tStorageInfo.LampTime.D2LampElapse;
 1483              		.loc 1 315 0
 1484 000a 054B     		ldr	r3, .L127
 1485 000c D3F88030 		ldr	r3, [r3, #128]	@ unaligned
 1486 0010 7B60     		str	r3, [r7, #4]
 316:../src/storage.c **** 	return nRet;
 1487              		.loc 1 316 0
 1488 0012 7B68     		ldr	r3, [r7, #4]
 317:../src/storage.c **** }
 1489              		.loc 1 317 0
 1490 0014 1846     		mov	r0, r3
 1491 0016 0C37     		adds	r7, r7, #12
 1492              		.cfi_def_cfa_offset 4
 1493 0018 BD46     		mov	sp, r7
 1494              		.cfi_def_cfa_register 13
 1495              		@ sp needed
 1496 001a 5DF8047B 		ldr	r7, [sp], #4
 1497              		.cfi_restore 7
 1498              		.cfi_def_cfa_offset 0
 1499 001e 7047     		bx	lr
 1500              	.L128:
 1501              		.align	2
 1502              	.L127:
 1503 0020 00000000 		.word	g_tStorageInfo
 1504              		.cfi_endproc
 1505              	.LFE126:
 1507              		.section	.text.SetD2LampTime,"ax",%progbits
 1508              		.align	2
 1509              		.global	SetD2LampTime
 1510              		.thumb
 1511              		.thumb_func
 1513              	SetD2LampTime:
 1514              	.LFB127:
 318:../src/storage.c **** 
 319:../src/storage.c **** void SetD2LampTime(int value)
 320:../src/storage.c **** {
 1515              		.loc 1 320 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 8
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520 0000 80B4     		push	{r7}
 1521              		.cfi_def_cfa_offset 4
 1522              		.cfi_offset 7, -4
 1523 0002 83B0     		sub	sp, sp, #12
 1524              		.cfi_def_cfa_offset 16
 1525 0004 00AF     		add	r7, sp, #0
 1526              		.cfi_def_cfa_register 7
 1527 0006 7860     		str	r0, [r7, #4]
 321:../src/storage.c **** 	g_tStorageInfo.LampTime.D2LampElapse = value;
 1528              		.loc 1 321 0
 1529 0008 7B68     		ldr	r3, [r7, #4]
 1530 000a 044A     		ldr	r2, .L130
 1531 000c C2F88030 		str	r3, [r2, #128]	@ unaligned
 322:../src/storage.c **** }
 1532              		.loc 1 322 0
 1533 0010 0C37     		adds	r7, r7, #12
 1534              		.cfi_def_cfa_offset 4
 1535 0012 BD46     		mov	sp, r7
 1536              		.cfi_def_cfa_register 13
 1537              		@ sp needed
 1538 0014 5DF8047B 		ldr	r7, [sp], #4
 1539              		.cfi_restore 7
 1540              		.cfi_def_cfa_offset 0
 1541 0018 7047     		bx	lr
 1542              	.L131:
 1543 001a 00BF     		.align	2
 1544              	.L130:
 1545 001c 00000000 		.word	g_tStorageInfo
 1546              		.cfi_endproc
 1547              	.LFE127:
 1549              		.section	.text.GetWLampTime,"ax",%progbits
 1550              		.align	2
 1551              		.global	GetWLampTime
 1552              		.thumb
 1553              		.thumb_func
 1555              	GetWLampTime:
 1556              	.LFB128:
 323:../src/storage.c **** 
 324:../src/storage.c **** int GetWLampTime()
 325:../src/storage.c **** {
 1557              		.loc 1 325 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 8
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561              		@ link register save eliminated.
 1562 0000 80B4     		push	{r7}
 1563              		.cfi_def_cfa_offset 4
 1564              		.cfi_offset 7, -4
 1565 0002 83B0     		sub	sp, sp, #12
 1566              		.cfi_def_cfa_offset 16
 1567 0004 00AF     		add	r7, sp, #0
 1568              		.cfi_def_cfa_register 7
 326:../src/storage.c **** 	int nRet = 0;
 1569              		.loc 1 326 0
 1570 0006 0023     		movs	r3, #0
 1571 0008 7B60     		str	r3, [r7, #4]
 327:../src/storage.c **** 	nRet = g_tStorageInfo.LampTime.WLampElapse;
 1572              		.loc 1 327 0
 1573 000a 054B     		ldr	r3, .L134
 1574 000c D3F88430 		ldr	r3, [r3, #132]	@ unaligned
 1575 0010 7B60     		str	r3, [r7, #4]
 328:../src/storage.c **** 	return nRet;
 1576              		.loc 1 328 0
 1577 0012 7B68     		ldr	r3, [r7, #4]
 329:../src/storage.c **** }
 1578              		.loc 1 329 0
 1579 0014 1846     		mov	r0, r3
 1580 0016 0C37     		adds	r7, r7, #12
 1581              		.cfi_def_cfa_offset 4
 1582 0018 BD46     		mov	sp, r7
 1583              		.cfi_def_cfa_register 13
 1584              		@ sp needed
 1585 001a 5DF8047B 		ldr	r7, [sp], #4
 1586              		.cfi_restore 7
 1587              		.cfi_def_cfa_offset 0
 1588 001e 7047     		bx	lr
 1589              	.L135:
 1590              		.align	2
 1591              	.L134:
 1592 0020 00000000 		.word	g_tStorageInfo
 1593              		.cfi_endproc
 1594              	.LFE128:
 1596              		.section	.text.SetWLampTime,"ax",%progbits
 1597              		.align	2
 1598              		.global	SetWLampTime
 1599              		.thumb
 1600              		.thumb_func
 1602              	SetWLampTime:
 1603              	.LFB129:
 330:../src/storage.c **** 
 331:../src/storage.c **** void SetWLampTime(int value)
 332:../src/storage.c **** {
 1604              		.loc 1 332 0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 8
 1607              		@ frame_needed = 1, uses_anonymous_args = 0
 1608              		@ link register save eliminated.
 1609 0000 80B4     		push	{r7}
 1610              		.cfi_def_cfa_offset 4
 1611              		.cfi_offset 7, -4
 1612 0002 83B0     		sub	sp, sp, #12
 1613              		.cfi_def_cfa_offset 16
 1614 0004 00AF     		add	r7, sp, #0
 1615              		.cfi_def_cfa_register 7
 1616 0006 7860     		str	r0, [r7, #4]
 333:../src/storage.c **** 	g_tStorageInfo.LampTime.WLampElapse = value;
 1617              		.loc 1 333 0
 1618 0008 7B68     		ldr	r3, [r7, #4]
 1619 000a 044A     		ldr	r2, .L137
 1620 000c C2F88430 		str	r3, [r2, #132]	@ unaligned
 334:../src/storage.c **** }
 1621              		.loc 1 334 0
 1622 0010 0C37     		adds	r7, r7, #12
 1623              		.cfi_def_cfa_offset 4
 1624 0012 BD46     		mov	sp, r7
 1625              		.cfi_def_cfa_register 13
 1626              		@ sp needed
 1627 0014 5DF8047B 		ldr	r7, [sp], #4
 1628              		.cfi_restore 7
 1629              		.cfi_def_cfa_offset 0
 1630 0018 7047     		bx	lr
 1631              	.L138:
 1632 001a 00BF     		.align	2
 1633              	.L137:
 1634 001c 00000000 		.word	g_tStorageInfo
 1635              		.cfi_endproc
 1636              	.LFE129:
 1638              		.section	.text.GetLampTime,"ax",%progbits
 1639              		.align	2
 1640              		.global	GetLampTime
 1641              		.thumb
 1642              		.thumb_func
 1644              	GetLampTime:
 1645              	.LFB130:
 335:../src/storage.c **** 
 336:../src/storage.c **** int GetLampTime(PSTORAGE_LAMP_INFO_T pValue)
 337:../src/storage.c **** {
 1646              		.loc 1 337 0
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 16
 1649              		@ frame_needed = 1, uses_anonymous_args = 0
 1650 0000 80B5     		push	{r7, lr}
 1651              		.cfi_def_cfa_offset 8
 1652              		.cfi_offset 7, -8
 1653              		.cfi_offset 14, -4
 1654 0002 84B0     		sub	sp, sp, #16
 1655              		.cfi_def_cfa_offset 24
 1656 0004 00AF     		add	r7, sp, #0
 1657              		.cfi_def_cfa_register 7
 1658 0006 7860     		str	r0, [r7, #4]
 338:../src/storage.c **** 	int nRet = 0;
 1659              		.loc 1 338 0
 1660 0008 0023     		movs	r3, #0
 1661 000a FB60     		str	r3, [r7, #12]
 339:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.LampTime);
 1662              		.loc 1 339 0
 1663 000c 4023     		movs	r3, #64
 1664 000e FB60     		str	r3, [r7, #12]
 340:../src/storage.c **** 	memcpy(pValue, &g_tStorageInfo.LampTime, nRet);
 1665              		.loc 1 340 0
 1666 0010 FB68     		ldr	r3, [r7, #12]
 1667 0012 7868     		ldr	r0, [r7, #4]
 1668 0014 0449     		ldr	r1, .L141
 1669 0016 1A46     		mov	r2, r3
 1670 0018 FFF7FEFF 		bl	memcpy
 341:../src/storage.c **** 	return nRet;
 1671              		.loc 1 341 0
 1672 001c FB68     		ldr	r3, [r7, #12]
 342:../src/storage.c **** }
 1673              		.loc 1 342 0
 1674 001e 1846     		mov	r0, r3
 1675 0020 1037     		adds	r7, r7, #16
 1676              		.cfi_def_cfa_offset 8
 1677 0022 BD46     		mov	sp, r7
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed
 1680 0024 80BD     		pop	{r7, pc}
 1681              	.L142:
 1682 0026 00BF     		.align	2
 1683              	.L141:
 1684 0028 80000000 		.word	g_tStorageInfo+128
 1685              		.cfi_endproc
 1686              	.LFE130:
 1688              		.section	.text.SetLampTime,"ax",%progbits
 1689              		.align	2
 1690              		.global	SetLampTime
 1691              		.thumb
 1692              		.thumb_func
 1694              	SetLampTime:
 1695              	.LFB131:
 343:../src/storage.c **** 
 344:../src/storage.c **** void SetLampTime(PSTORAGE_LAMP_INFO_T pValue, int size)
 345:../src/storage.c **** {
 1696              		.loc 1 345 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 8
 1699              		@ frame_needed = 1, uses_anonymous_args = 0
 1700 0000 80B5     		push	{r7, lr}
 1701              		.cfi_def_cfa_offset 8
 1702              		.cfi_offset 7, -8
 1703              		.cfi_offset 14, -4
 1704 0002 82B0     		sub	sp, sp, #8
 1705              		.cfi_def_cfa_offset 16
 1706 0004 00AF     		add	r7, sp, #0
 1707              		.cfi_def_cfa_register 7
 1708 0006 7860     		str	r0, [r7, #4]
 1709 0008 3960     		str	r1, [r7]
 346:../src/storage.c **** 	memcpy(&g_tStorageInfo.LampTime, pValue, size);
 1710              		.loc 1 346 0
 1711 000a 3B68     		ldr	r3, [r7]
 1712 000c 0348     		ldr	r0, .L144
 1713 000e 7968     		ldr	r1, [r7, #4]
 1714 0010 1A46     		mov	r2, r3
 1715 0012 FFF7FEFF 		bl	memcpy
 347:../src/storage.c **** }
 1716              		.loc 1 347 0
 1717 0016 0837     		adds	r7, r7, #8
 1718              		.cfi_def_cfa_offset 8
 1719 0018 BD46     		mov	sp, r7
 1720              		.cfi_def_cfa_register 13
 1721              		@ sp needed
 1722 001a 80BD     		pop	{r7, pc}
 1723              	.L145:
 1724              		.align	2
 1725              	.L144:
 1726 001c 80000000 		.word	g_tStorageInfo+128
 1727              		.cfi_endproc
 1728              	.LFE131:
 1730              		.section	.text.ClearLampTime,"ax",%progbits
 1731              		.align	2
 1732              		.global	ClearLampTime
 1733              		.thumb
 1734              		.thumb_func
 1736              	ClearLampTime:
 1737              	.LFB132:
 348:../src/storage.c **** 
 349:../src/storage.c **** void ClearLampTime()
 350:../src/storage.c **** {
 1738              		.loc 1 350 0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 0
 1741              		@ frame_needed = 1, uses_anonymous_args = 0
 1742 0000 80B5     		push	{r7, lr}
 1743              		.cfi_def_cfa_offset 8
 1744              		.cfi_offset 7, -8
 1745              		.cfi_offset 14, -4
 1746 0002 00AF     		add	r7, sp, #0
 1747              		.cfi_def_cfa_register 7
 351:../src/storage.c **** 	memset(&g_tStorageInfo.LampTime, 0, sizeof(g_tStorageInfo.LampTime));
 1748              		.loc 1 351 0
 1749 0004 0248     		ldr	r0, .L147
 1750 0006 0021     		movs	r1, #0
 1751 0008 4022     		movs	r2, #64
 1752 000a FFF7FEFF 		bl	memset
 352:../src/storage.c **** }
 1753              		.loc 1 352 0
 1754 000e 80BD     		pop	{r7, pc}
 1755              	.L148:
 1756              		.align	2
 1757              	.L147:
 1758 0010 80000000 		.word	g_tStorageInfo+128
 1759              		.cfi_endproc
 1760              	.LFE132:
 1762              		.section	.text.GetWaveInfo,"ax",%progbits
 1763              		.align	2
 1764              		.global	GetWaveInfo
 1765              		.thumb
 1766              		.thumb_func
 1768              	GetWaveInfo:
 1769              	.LFB133:
 353:../src/storage.c **** 
 354:../src/storage.c **** // Calibration 후 파장 저장
 355:../src/storage.c **** int GetWaveInfo(PSTORAGE_WAVE_INFO_T pValue)
 356:../src/storage.c **** {
 1770              		.loc 1 356 0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 16
 1773              		@ frame_needed = 1, uses_anonymous_args = 0
 1774 0000 80B5     		push	{r7, lr}
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 7, -8
 1777              		.cfi_offset 14, -4
 1778 0002 84B0     		sub	sp, sp, #16
 1779              		.cfi_def_cfa_offset 24
 1780 0004 00AF     		add	r7, sp, #0
 1781              		.cfi_def_cfa_register 7
 1782 0006 7860     		str	r0, [r7, #4]
 357:../src/storage.c **** 	int nRet = 0;
 1783              		.loc 1 357 0
 1784 0008 0023     		movs	r3, #0
 1785 000a FB60     		str	r3, [r7, #12]
 358:../src/storage.c **** 	nRet = sizeof(g_tStorageInfo.WaveInfo);
 1786              		.loc 1 358 0
 1787 000c 4023     		movs	r3, #64
 1788 000e FB60     		str	r3, [r7, #12]
 359:../src/storage.c **** 	memcpy(pValue, &g_tStorageInfo.WaveInfo, nRet);
 1789              		.loc 1 359 0
 1790 0010 FB68     		ldr	r3, [r7, #12]
 1791 0012 7868     		ldr	r0, [r7, #4]
 1792 0014 0449     		ldr	r1, .L151
 1793 0016 1A46     		mov	r2, r3
 1794 0018 FFF7FEFF 		bl	memcpy
 360:../src/storage.c **** 	return nRet;
 1795              		.loc 1 360 0
 1796 001c FB68     		ldr	r3, [r7, #12]
 361:../src/storage.c **** }
 1797              		.loc 1 361 0
 1798 001e 1846     		mov	r0, r3
 1799 0020 1037     		adds	r7, r7, #16
 1800              		.cfi_def_cfa_offset 8
 1801 0022 BD46     		mov	sp, r7
 1802              		.cfi_def_cfa_register 13
 1803              		@ sp needed
 1804 0024 80BD     		pop	{r7, pc}
 1805              	.L152:
 1806 0026 00BF     		.align	2
 1807              	.L151:
 1808 0028 C0000000 		.word	g_tStorageInfo+192
 1809              		.cfi_endproc
 1810              	.LFE133:
 1812              		.section	.text.SetWaveInfo,"ax",%progbits
 1813              		.align	2
 1814              		.global	SetWaveInfo
 1815              		.thumb
 1816              		.thumb_func
 1818              	SetWaveInfo:
 1819              	.LFB134:
 362:../src/storage.c **** 
 363:../src/storage.c **** void SetWaveInfo(PSTORAGE_WAVE_INFO_T pValue, int size)
 364:../src/storage.c **** {
 1820              		.loc 1 364 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 8
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824 0000 80B5     		push	{r7, lr}
 1825              		.cfi_def_cfa_offset 8
 1826              		.cfi_offset 7, -8
 1827              		.cfi_offset 14, -4
 1828 0002 82B0     		sub	sp, sp, #8
 1829              		.cfi_def_cfa_offset 16
 1830 0004 00AF     		add	r7, sp, #0
 1831              		.cfi_def_cfa_register 7
 1832 0006 7860     		str	r0, [r7, #4]
 1833 0008 3960     		str	r1, [r7]
 365:../src/storage.c **** 	memcpy(&g_tStorageInfo.WaveInfo, (uint8_t *)pValue, size);
 1834              		.loc 1 365 0
 1835 000a 3B68     		ldr	r3, [r7]
 1836 000c 0348     		ldr	r0, .L154
 1837 000e 7968     		ldr	r1, [r7, #4]
 1838 0010 1A46     		mov	r2, r3
 1839 0012 FFF7FEFF 		bl	memcpy
 366:../src/storage.c **** }
 1840              		.loc 1 366 0
 1841 0016 0837     		adds	r7, r7, #8
 1842              		.cfi_def_cfa_offset 8
 1843 0018 BD46     		mov	sp, r7
 1844              		.cfi_def_cfa_register 13
 1845              		@ sp needed
 1846 001a 80BD     		pop	{r7, pc}
 1847              	.L155:
 1848              		.align	2
 1849              	.L154:
 1850 001c C0000000 		.word	g_tStorageInfo+192
 1851              		.cfi_endproc
 1852              	.LFE134:
 1854              		.section	.text.ClearWaveInfo,"ax",%progbits
 1855              		.align	2
 1856              		.global	ClearWaveInfo
 1857              		.thumb
 1858              		.thumb_func
 1860              	ClearWaveInfo:
 1861              	.LFB135:
 367:../src/storage.c **** 
 368:../src/storage.c **** void ClearWaveInfo()
 369:../src/storage.c **** {
 1862              		.loc 1 369 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 0
 1865              		@ frame_needed = 1, uses_anonymous_args = 0
 1866 0000 80B5     		push	{r7, lr}
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 00AF     		add	r7, sp, #0
 1871              		.cfi_def_cfa_register 7
 370:../src/storage.c **** 	memset(&g_tStorageInfo.WaveInfo, 0, sizeof(g_tStorageInfo.WaveInfo));
 1872              		.loc 1 370 0
 1873 0004 0248     		ldr	r0, .L157
 1874 0006 0021     		movs	r1, #0
 1875 0008 4022     		movs	r2, #64
 1876 000a FFF7FEFF 		bl	memset
 371:../src/storage.c **** }
 1877              		.loc 1 371 0
 1878 000e 80BD     		pop	{r7, pc}
 1879              	.L158:
 1880              		.align	2
 1881              	.L157:
 1882 0010 C0000000 		.word	g_tStorageInfo+192
 1883              		.cfi_endproc
 1884              	.LFE135:
 1886              		.section	.text.GetUseStorageENVM,"ax",%progbits
 1887              		.align	2
 1888              		.global	GetUseStorageENVM
 1889              		.thumb
 1890              		.thumb_func
 1892              	GetUseStorageENVM:
 1893              	.LFB136:
 372:../src/storage.c **** 
 373:../src/storage.c **** int GetUseStorageENVM()
 374:../src/storage.c **** {
 1894              		.loc 1 374 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 8
 1897              		@ frame_needed = 1, uses_anonymous_args = 0
 1898              		@ link register save eliminated.
 1899 0000 80B4     		push	{r7}
 1900              		.cfi_def_cfa_offset 4
 1901              		.cfi_offset 7, -4
 1902 0002 83B0     		sub	sp, sp, #12
 1903              		.cfi_def_cfa_offset 16
 1904 0004 00AF     		add	r7, sp, #0
 1905              		.cfi_def_cfa_register 7
 375:../src/storage.c **** 	int nRet = 0;
 1906              		.loc 1 375 0
 1907 0006 0023     		movs	r3, #0
 1908 0008 7B60     		str	r3, [r7, #4]
 376:../src/storage.c **** 	nRet = g_tStorageInfo.SystemInfo.UsedENVM;
 1909              		.loc 1 376 0
 1910 000a 054B     		ldr	r3, .L161
 1911 000c DB6F     		ldr	r3, [r3, #124]	@ unaligned
 1912 000e 7B60     		str	r3, [r7, #4]
 377:../src/storage.c **** 	return nRet;
 1913              		.loc 1 377 0
 1914 0010 7B68     		ldr	r3, [r7, #4]
 378:../src/storage.c **** }
 1915              		.loc 1 378 0
 1916 0012 1846     		mov	r0, r3
 1917 0014 0C37     		adds	r7, r7, #12
 1918              		.cfi_def_cfa_offset 4
 1919 0016 BD46     		mov	sp, r7
 1920              		.cfi_def_cfa_register 13
 1921              		@ sp needed
 1922 0018 5DF8047B 		ldr	r7, [sp], #4
 1923              		.cfi_restore 7
 1924              		.cfi_def_cfa_offset 0
 1925 001c 7047     		bx	lr
 1926              	.L162:
 1927 001e 00BF     		.align	2
 1928              	.L161:
 1929 0020 00000000 		.word	g_tStorageInfo
 1930              		.cfi_endproc
 1931              	.LFE136:
 1933              		.section	.text.SetUseStorageENVM,"ax",%progbits
 1934              		.align	2
 1935              		.global	SetUseStorageENVM
 1936              		.thumb
 1937              		.thumb_func
 1939              	SetUseStorageENVM:
 1940              	.LFB137:
 379:../src/storage.c **** 
 380:../src/storage.c **** void SetUseStorageENVM(int value)
 381:../src/storage.c **** {
 1941              		.loc 1 381 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 8
 1944              		@ frame_needed = 1, uses_anonymous_args = 0
 1945              		@ link register save eliminated.
 1946 0000 80B4     		push	{r7}
 1947              		.cfi_def_cfa_offset 4
 1948              		.cfi_offset 7, -4
 1949 0002 83B0     		sub	sp, sp, #12
 1950              		.cfi_def_cfa_offset 16
 1951 0004 00AF     		add	r7, sp, #0
 1952              		.cfi_def_cfa_register 7
 1953 0006 7860     		str	r0, [r7, #4]
 382:../src/storage.c **** 	g_tStorageInfo.SystemInfo.UsedENVM = value;
 1954              		.loc 1 382 0
 1955 0008 7B68     		ldr	r3, [r7, #4]
 1956 000a 034A     		ldr	r2, .L164
 1957 000c D367     		str	r3, [r2, #124]	@ unaligned
 383:../src/storage.c **** }
 1958              		.loc 1 383 0
 1959 000e 0C37     		adds	r7, r7, #12
 1960              		.cfi_def_cfa_offset 4
 1961 0010 BD46     		mov	sp, r7
 1962              		.cfi_def_cfa_register 13
 1963              		@ sp needed
 1964 0012 5DF8047B 		ldr	r7, [sp], #4
 1965              		.cfi_restore 7
 1966              		.cfi_def_cfa_offset 0
 1967 0016 7047     		bx	lr
 1968              	.L165:
 1969              		.align	2
 1970              	.L164:
 1971 0018 00000000 		.word	g_tStorageInfo
 1972              		.cfi_endproc
 1973              	.LFE137:
 1975              		.text
 1976              	.Letext0:
 1977              		.file 2 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\arm-none-eabi\\include\\machine\\_def
 1978              		.file 3 "c:\\microsemi\\softconsole_v4.0\\arm-none-eabi-gcc\\arm-none-eabi\\include\\sys\\_stdint.
 1979              		.file 4 "D:\\Home2021\\ChroZen-LC\\LC_AS\\SoC\\Ch_AS_SF2_FW-git\\SoftConsole4-SF2\\SF2_hw_platform
 1980              		.file 5 "../src/storage.h"
 1981              		.file 6 "C:\\Microsemi\\SoftConsole_v4.0\\CMSIS\\V4.3\\Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 storage.c
                            *COM*:00000100 g_tStorageInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:20     .text.InitStorageInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:25     .text.InitStorageInfo:00000000 InitStorageInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:134    .text.LoadStorageInfo:00000000 LoadStorageInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:88     .text.InitStorageInfo:00000044 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:93     .text.GetStorageInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:98     .text.GetStorageInfo:00000000 GetStorageInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:124    .text.GetStorageInfo:00000010 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:129    .text.LoadStorageInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:203    .text.LoadStorageInfo:00000054 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:208    .text.SaveStorageInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:213    .text.SaveStorageInfo:00000000 SaveStorageInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:389    .text.SaveStorageInfo:000000e8 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:397    .text.SaveStorageInfoALL:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:402    .text.SaveStorageInfoALL:00000000 SaveStorageInfoALL
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:515    .text.SaveStorageInfoALL:00000094 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:521    .text.SaveStorageInfoALL_Param:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:526    .text.SaveStorageInfoALL_Param:00000000 SaveStorageInfoALL_Param
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:640    .text.SaveStorageInfoALL_Param:00000094 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:645    .text.GetBLVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:650    .text.GetBLVer:00000000 GetBLVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:687    .text.GetBLVer:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:692    .text.SetBLVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:697    .text.SetBLVer:00000000 SetBLVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:729    .text.SetBLVer:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:734    .text.GetIAPVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:739    .text.GetIAPVer:00000000 GetIAPVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:776    .text.GetIAPVer:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:781    .text.SetIAPVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:786    .text.SetIAPVer:00000000 SetIAPVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:818    .text.SetIAPVer:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:823    .text.GetAPPVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:828    .text.GetAPPVer:00000000 GetAPPVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:865    .text.GetAPPVer:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:870    .text.SetAPPVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:875    .text.SetAPPVer:00000000 SetAPPVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:907    .text.SetAPPVer:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:912    .text.GetFPGAVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:917    .text.GetFPGAVer:00000000 GetFPGAVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:954    .text.GetFPGAVer:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:959    .text.SetFPGAVer:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:964    .text.SetFPGAVer:00000000 SetFPGAVer
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:996    .text.SetFPGAVer:00000018 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1001   .text.GetSerialNo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1006   .text.GetSerialNo:00000000 GetSerialNo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1046   .text.GetSerialNo:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1051   .text.SetSerialNo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1056   .text.SetSerialNo:00000000 SetSerialNo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1088   .text.SetSerialNo:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1093   .text.GetIPAddress:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1098   .text.GetIPAddress:00000000 GetIPAddress
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1138   .text.GetIPAddress:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1143   .text.SetIPAddress:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1148   .text.SetIPAddress:00000000 SetIPAddress
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1180   .text.SetIPAddress:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1185   .text.GetGateway:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1190   .text.GetGateway:00000000 GetGateway
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1230   .text.GetGateway:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1235   .text.SetGateway:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1240   .text.SetGateway:00000000 SetGateway
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1272   .text.SetGateway:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1277   .text.GetMacAddress:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1282   .text.GetMacAddress:00000000 GetMacAddress
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1322   .text.GetMacAddress:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1327   .text.SetMacAddress:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1332   .text.SetMacAddress:00000000 SetMacAddress
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1364   .text.SetMacAddress:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1369   .text.GetModelName:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1374   .text.GetModelName:00000000 GetModelName
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1414   .text.GetModelName:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1419   .text.SetModelName:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1424   .text.SetModelName:00000000 SetModelName
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1456   .text.SetModelName:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1461   .text.GetD2LampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1466   .text.GetD2LampTime:00000000 GetD2LampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1503   .text.GetD2LampTime:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1508   .text.SetD2LampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1513   .text.SetD2LampTime:00000000 SetD2LampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1545   .text.SetD2LampTime:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1550   .text.GetWLampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1555   .text.GetWLampTime:00000000 GetWLampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1592   .text.GetWLampTime:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1597   .text.SetWLampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1602   .text.SetWLampTime:00000000 SetWLampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1634   .text.SetWLampTime:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1639   .text.GetLampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1644   .text.GetLampTime:00000000 GetLampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1684   .text.GetLampTime:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1689   .text.SetLampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1694   .text.SetLampTime:00000000 SetLampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1726   .text.SetLampTime:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1731   .text.ClearLampTime:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1736   .text.ClearLampTime:00000000 ClearLampTime
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1758   .text.ClearLampTime:00000010 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1763   .text.GetWaveInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1768   .text.GetWaveInfo:00000000 GetWaveInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1808   .text.GetWaveInfo:00000028 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1813   .text.SetWaveInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1818   .text.SetWaveInfo:00000000 SetWaveInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1850   .text.SetWaveInfo:0000001c $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1855   .text.ClearWaveInfo:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1860   .text.ClearWaveInfo:00000000 ClearWaveInfo
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1882   .text.ClearWaveInfo:00000010 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1887   .text.GetUseStorageENVM:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1892   .text.GetUseStorageENVM:00000000 GetUseStorageENVM
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1929   .text.GetUseStorageENVM:00000020 $d
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1934   .text.SetUseStorageENVM:00000000 $t
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1939   .text.SetUseStorageENVM:00000000 SetUseStorageENVM
C:\Users\jiryu\AppData\Local\Temp\ccLkcjRr.s:1971   .text.SetUseStorageENVM:00000018 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.8a78f5deb025003dde8e8313b7e18811
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.ctype.h.29.655cb005a4d596b4713c7a42170c401a
                           .group:00000000 wm4.stdarg.h.31.72c3aa8d68b291953fa52b9471bcdff7
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.stddef.h.39.7e3d906ac58942e0b374c527445f5de5
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.81.ded4e8fbe2d299b79c956dc834e43661
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.a99a2db1e55915cfd1b035cc1e9fcff1
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4._intsup.h.10.b2832a532eae49c14d45880be6d4ca65
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.limits.h.2.9dea55bedb68394d9750fdf18fad85e9
                           .group:00000000 wm4.limits.h.60.b4bc9eda7e37043243f7148a2c6d0306
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.m2sxxx.h.14.987ea2aeaafde240411e8c56d47721f7
                           .group:00000000 wm4.core_cm3.h.43.614605f47657df9251f3b3f57590a49a
                           .group:00000000 wm4.core_cmInstr.h.39.addda81f1f3453ba31dd54fc5b6fcee8
                           .group:00000000 wm4.core_cm3.h.160.4f087d7d2b17fc46469486aedc40cf5c
                           .group:00000000 wm4.m2sxxx.h.2709.9eef8620912489dbc5c26e98701cdac3
                           .group:00000000 wm4.sys_config_mss_clocks.h.10.c7f4d81ec72bcea6cafb9cc9c2acf4ab
                           .group:00000000 wm4.sys_config.h.25.1448a2ceceaa3c2e8913533fa4e42cee
                           .group:00000000 wm4.mss_uart.h.258.ed2d082f8e6703bd440653ce1fa4b528
                           .group:00000000 wm4.assert.h.11.7fe9eb241be6b0fee772a1e693b81ae3
                           .group:00000000 wm4.mss_watchdog.h.135.cd7fdb2556dfc88c684a3bccbcbeffd0
                           .group:00000000 wm4.mss_nvm.h.54.53fe48cb67630dbcda63b96130444f53
                           .group:00000000 wm4.protocol.h.2.6a5796ea80238bc4f9a16400f98bef7e
                           .group:00000000 wm4.storage.h.2.37efc95cfbe2d56f733e692b6f73ffca
                           .group:00000000 wm4.system.h.2.8eca77f0cab86ca974940a82c5c17eab
                           .group:00000000 wm4.version.h.2.9d8026164faa16ae393ccbd448177fc2

UNDEFINED SYMBOLS
memset
MSS_NVM_read
NVM_write
NVM_verify
NVM_unlock
memcpy
